
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d8  080031d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e0  080031e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080031f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080031f4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3c  00000000  00000000  00030732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00032670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  000333c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025443  00000000  00000000  00034058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b57  00000000  00000000  0005949b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe86  00000000  00000000  0006aff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156e78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  00156ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080031a8 	.word	0x080031a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080031a8 	.word	0x080031a8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fb05 	bl	8000b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f80c 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8ca 	bl	80006a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f898 	bl	8000644 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//printf("%d\r\n", 1);
		//HAL_UART_Transmit(&huart1, (uint8_t*)'8', strlen('1'), HAL_MAX_DELAY);
		sendChar('w');
 8000514:	2077      	movs	r0, #119	; 0x77
 8000516:	f000 f93f 	bl	8000798 <sendChar>
		HAL_Delay(10);
 800051a:	200a      	movs	r0, #10
 800051c:	f000 fb26 	bl	8000b6c <HAL_Delay>
		sendChar('w');
 8000520:	e7f8      	b.n	8000514 <main+0x14>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b0b4      	sub	sp, #208	; 0xd0
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 fe30 	bl	8003198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	2284      	movs	r2, #132	; 0x84
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f002 fe21 	bl	8003198 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000556:	f000 fdd5 	bl	8001104 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b38      	ldr	r3, [pc, #224]	; (800063c <SystemClock_Config+0x118>)
 800055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055e:	4a37      	ldr	r2, [pc, #220]	; (800063c <SystemClock_Config+0x118>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6413      	str	r3, [r2, #64]	; 0x40
 8000566:	4b35      	ldr	r3, [pc, #212]	; (800063c <SystemClock_Config+0x118>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000572:	4b33      	ldr	r3, [pc, #204]	; (8000640 <SystemClock_Config+0x11c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a32      	ldr	r2, [pc, #200]	; (8000640 <SystemClock_Config+0x11c>)
 8000578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <SystemClock_Config+0x11c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005a6:	230c      	movs	r3, #12
 80005a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ac:	23c0      	movs	r3, #192	; 0xc0
 80005ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fdfe 	bl	80011c4 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ce:	f000 f969 	bl	80008a4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d2:	f000 fda7 	bl	8001124 <HAL_PWREx_EnableOverDrive>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005dc:	f000 f962 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000606:	2106      	movs	r1, #6
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f87f 	bl	800170c <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000614:	f000 f946 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800061c:	2300      	movs	r3, #0
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fa79 	bl	8001b1c <HAL_RCCEx_PeriphCLKConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000630:	f000 f938 	bl	80008a4 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	37d0      	adds	r7, #208	; 0xd0
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART1_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART1_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000688:	f002 f918 	bl	80028bc <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f907 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000028 	.word	0x20000028
 80006a0:	40011000 	.word	0x40011000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <MX_GPIO_Init+0xe8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <MX_GPIO_Init+0xe8>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_GPIO_Init+0xe8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0xe8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <MX_GPIO_Init+0xe8>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <MX_GPIO_Init+0xe8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <MX_GPIO_Init+0xe8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a27      	ldr	r2, [pc, #156]	; (800078c <MX_GPIO_Init+0xe8>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_GPIO_Init+0xe8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_GPIO_Init+0xe8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <MX_GPIO_Init+0xe8>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xe8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_GPIO_Init+0xe8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <MX_GPIO_Init+0xe8>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_GPIO_Init+0xe8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2102      	movs	r1, #2
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <MX_GPIO_Init+0xec>)
 8000738:	f000 fcca 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HW_UART_TX_PIN_GPIO_Port, HW_UART_TX_PIN_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_GPIO_Init+0xf0>)
 8000744:	f000 fcc4 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xec>)
 8000760:	f000 fb0a 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : HW_UART_TX_PIN_Pin */
  GPIO_InitStruct.Pin = HW_UART_TX_PIN_Pin;
 8000764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HW_UART_TX_PIN_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_GPIO_Init+0xf0>)
 800077e:	f000 fafb 	bl	8000d78 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40022000 	.word	0x40022000
 8000794:	40020000 	.word	0x40020000

08000798 <sendChar>:

/* USER CODE BEGIN 4 */

void sendChar(char data){
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	#define BAUDRATE 9600;	//104.2µs -> interpolatie -> 20750

	uint8_t output = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0x01;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	75fb      	strb	r3, [r7, #23]

	//init
	HAL_GPIO_WritePin(HW_UART_TX_PIN_GPIO_Port, HW_UART_TX_PIN_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	482e      	ldr	r0, [pc, #184]	; (8000870 <sendChar+0xd8>)
 80007b6:	f000 fc8b 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	482d      	ldr	r0, [pc, #180]	; (8000874 <sendChar+0xdc>)
 80007c0:	f000 fc86 	bl	80010d0 <HAL_GPIO_WritePin>
	SysTickDelayCount(20750);
 80007c4:	f245 100e 	movw	r0, #20750	; 0x510e
 80007c8:	f000 f856 	bl	8000878 <SysTickDelayCount>

	//startbit
	HAL_GPIO_WritePin(HW_UART_TX_PIN_GPIO_Port, HW_UART_TX_PIN_Pin, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4827      	ldr	r0, [pc, #156]	; (8000870 <sendChar+0xd8>)
 80007d4:	f000 fc7c 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2102      	movs	r1, #2
 80007dc:	4825      	ldr	r0, [pc, #148]	; (8000874 <sendChar+0xdc>)
 80007de:	f000 fc77 	bl	80010d0 <HAL_GPIO_WritePin>
	SysTickDelayCount(20750);
 80007e2:	f245 100e 	movw	r0, #20750	; 0x510e
 80007e6:	f000 f847 	bl	8000878 <SysTickDelayCount>

	shift = data;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < 8;i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	e027      	b.n	8000844 <sendChar+0xac>
		output = shift & mask;
 80007f4:	7dfa      	ldrb	r2, [r7, #23]
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	4013      	ands	r3, r2
 80007fa:	73fb      	strb	r3, [r7, #15]
		if(output == 0x01){
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d10b      	bne.n	800081a <sendChar+0x82>
			HAL_GPIO_WritePin(HW_UART_TX_PIN_GPIO_Port, HW_UART_TX_PIN_Pin, 1);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	4819      	ldr	r0, [pc, #100]	; (8000870 <sendChar+0xd8>)
 800080a:	f000 fc61 	bl	80010d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800080e:	2201      	movs	r2, #1
 8000810:	2102      	movs	r1, #2
 8000812:	4818      	ldr	r0, [pc, #96]	; (8000874 <sendChar+0xdc>)
 8000814:	f000 fc5c 	bl	80010d0 <HAL_GPIO_WritePin>
 8000818:	e00a      	b.n	8000830 <sendChar+0x98>
		}
		else{
			HAL_GPIO_WritePin(HW_UART_TX_PIN_GPIO_Port, HW_UART_TX_PIN_Pin, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <sendChar+0xd8>)
 8000822:	f000 fc55 	bl	80010d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <sendChar+0xdc>)
 800082c:	f000 fc50 	bl	80010d0 <HAL_GPIO_WritePin>
		}
		SysTickDelayCount(20750);
 8000830:	f245 100e 	movw	r0, #20750	; 0x510e
 8000834:	f000 f820 	bl	8000878 <SysTickDelayCount>
		shift = (shift >> 1);
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	085b      	lsrs	r3, r3, #1
 800083c:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 8;i++){
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	3301      	adds	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	2b07      	cmp	r3, #7
 8000848:	ddd4      	ble.n	80007f4 <sendChar+0x5c>
	}
	//stopbit
	HAL_GPIO_WritePin(HW_UART_TX_PIN_GPIO_Port, HW_UART_TX_PIN_Pin, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <sendChar+0xd8>)
 8000852:	f000 fc3d 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <sendChar+0xdc>)
 800085c:	f000 fc38 	bl	80010d0 <HAL_GPIO_WritePin>
	SysTickDelayCount(20750);
 8000860:	f245 100e 	movw	r0, #20750	; 0x510e
 8000864:	f000 f808 	bl	8000878 <SysTickDelayCount>

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020000 	.word	0x40020000
 8000874:	40022000 	.word	0x40022000

08000878 <SysTickDelayCount>:

void __attribute__((naked)) SysTickDelayCount(unsigned long ulCount)
{
    __asm("    subs    r0, #1\n"
 8000878:	3801      	subs	r0, #1
 800087a:	d1fd      	bne.n	8000878 <SysTickDelayCount>
 800087c:	4770      	bx	lr
          "    bne.n     SysTickDelayCount\n"
          "    bx      lr");
}
 800087e:	bf00      	nop

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 f94b 	bl	8000b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40010000 	.word	0x40010000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x7c>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d127      	bne.n	800096a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x80>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_UART_MspInit+0x80>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800094a:	23c0      	movs	r3, #192	; 0xc0
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800095a:	2307      	movs	r3, #7
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_UART_MspInit+0x84>)
 8000966:	f000 fa07 	bl	8000d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40011000 	.word	0x40011000
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	2019      	movs	r0, #25
 8000996:	f000 f9c5 	bl	8000d24 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800099a:	2019      	movs	r0, #25
 800099c:	f000 f9de 	bl	8000d5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <HAL_InitTick+0xa0>)
 80009a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <HAL_InitTick+0xa0>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6453      	str	r3, [r2, #68]	; 0x44
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_InitTick+0xa0>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f878 	bl	8001ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009c8:	f001 f862 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 80009cc:	4603      	mov	r3, r0
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_InitTick+0xa4>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9b      	lsrs	r3, r3, #18
 80009dc:	3b01      	subs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_InitTick+0xa8>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_InitTick+0xac>)
 80009e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_InitTick+0xa8>)
 80009e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_InitTick+0xa8>)
 80009f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_InitTick+0xa8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_InitTick+0xa8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <HAL_InitTick+0xa8>)
 8000a02:	f001 fc7b 	bl	80022fc <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d104      	bne.n	8000a16 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <HAL_InitTick+0xa8>)
 8000a0e:	f001 fcd7 	bl	80023c0 <HAL_TIM_Base_Start_IT>
 8000a12:	4603      	mov	r3, r0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	200000ac 	.word	0x200000ac
 8000a2c:	40010000 	.word	0x40010000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a8e:	f001 fd0f 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000ac 	.word	0x200000ac

08000a9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 fb2f 	bl	8003150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fd05 	bl	8000500 <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b04:	080031e8 	.word	0x080031e8
  ldr r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b0c:	200000fc 	.word	0x200000fc

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>

08000b12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f8f9 	bl	8000d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1c:	200f      	movs	r0, #15
 8000b1e:	f7ff ff2f 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b22:	f7ff fec5 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200000f8 	.word	0x200000f8

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200000f8 	.word	0x200000f8

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffde 	bl	8000b54 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	05fa0000 	.word	0x05fa0000

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff4c 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d36:	f7ff ff61 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff ffb1 	bl	8000ca8 <NVIC_EncodePriority>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff80 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff54 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e175      	b.n	8001084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8164 	bne.w	800107e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x56>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80be 	beq.w	800107e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b66      	ldr	r3, [pc, #408]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a65      	ldr	r2, [pc, #404]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b63      	ldr	r3, [pc, #396]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f1a:	4a61      	ldr	r2, [pc, #388]	; (80010a0 <HAL_GPIO_Init+0x328>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <HAL_GPIO_Init+0x32c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d037      	beq.n	8000fb6 <HAL_GPIO_Init+0x23e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a57      	ldr	r2, [pc, #348]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d031      	beq.n	8000fb2 <HAL_GPIO_Init+0x23a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a56      	ldr	r2, [pc, #344]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d02b      	beq.n	8000fae <HAL_GPIO_Init+0x236>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x338>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d025      	beq.n	8000faa <HAL_GPIO_Init+0x232>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a54      	ldr	r2, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x33c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d01f      	beq.n	8000fa6 <HAL_GPIO_Init+0x22e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a53      	ldr	r2, [pc, #332]	; (80010b8 <HAL_GPIO_Init+0x340>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_GPIO_Init+0x22a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_GPIO_Init+0x344>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a51      	ldr	r2, [pc, #324]	; (80010c0 <HAL_GPIO_Init+0x348>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x222>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <HAL_GPIO_Init+0x34c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x21e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_GPIO_Init+0x350>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f8e:	2309      	movs	r3, #9
 8000f90:	e012      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000f92:	230a      	movs	r3, #10
 8000f94:	e010      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000f96:	2308      	movs	r3, #8
 8000f98:	e00e      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x240>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <HAL_GPIO_Init+0x328>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <HAL_GPIO_Init+0x354>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a34      	ldr	r2, [pc, #208]	; (80010cc <HAL_GPIO_Init+0x354>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <HAL_GPIO_Init+0x354>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a29      	ldr	r2, [pc, #164]	; (80010cc <HAL_GPIO_Init+0x354>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <HAL_GPIO_Init+0x354>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_GPIO_Init+0x354>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_GPIO_Init+0x354>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_GPIO_Init+0x354>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae86 	bls.w	8000d98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40021400 	.word	0x40021400
 80010bc:	40021800 	.word	0x40021800
 80010c0:	40021c00 	.word	0x40021c00
 80010c4:	40022000 	.word	0x40022000
 80010c8:	40022400 	.word	0x40022400
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_PWREx_EnableOverDrive+0x98>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_PWREx_EnableOverDrive+0x98>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001152:	f7ff fcff 	bl	8000b54 <HAL_GetTick>
 8001156:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001158:	e009      	b.n	800116e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800115a:	f7ff fcfb 	bl	8000b54 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001168:	d901      	bls.n	800116e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e022      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117a:	d1ee      	bne.n	800115a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001186:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001188:	f7ff fce4 	bl	8000b54 <HAL_GetTick>
 800118c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800118e:	e009      	b.n	80011a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001190:	f7ff fce0 	bl	8000b54 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119e:	d901      	bls.n	80011a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e007      	b.n	80011b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011b0:	d1ee      	bne.n	8001190 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e291      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8087 	beq.w	80012f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e8:	4b96      	ldr	r3, [pc, #600]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d00c      	beq.n	800120e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f4:	4b93      	ldr	r3, [pc, #588]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d112      	bne.n	8001226 <HAL_RCC_OscConfig+0x62>
 8001200:	4b90      	ldr	r3, [pc, #576]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800120c:	d10b      	bne.n	8001226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	4b8d      	ldr	r3, [pc, #564]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d06c      	beq.n	80012f4 <HAL_RCC_OscConfig+0x130>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d168      	bne.n	80012f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e26b      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x7a>
 8001230:	4b84      	ldr	r3, [pc, #528]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a83      	ldr	r2, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e02e      	b.n	800129c <HAL_RCC_OscConfig+0xd8>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x9c>
 8001246:	4b7f      	ldr	r3, [pc, #508]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7e      	ldr	r2, [pc, #504]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800124c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b7c      	ldr	r3, [pc, #496]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7b      	ldr	r2, [pc, #492]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e01d      	b.n	800129c <HAL_RCC_OscConfig+0xd8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0xc0>
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a75      	ldr	r2, [pc, #468]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a72      	ldr	r2, [pc, #456]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0xd8>
 8001284:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6e      	ldr	r2, [pc, #440]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a6b      	ldr	r2, [pc, #428]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc56 	bl	8000b54 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fc52 	bl	8000b54 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e21f      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b61      	ldr	r3, [pc, #388]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0xe8>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc42 	bl	8000b54 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fc3e 	bl	8000b54 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e20b      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x110>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d069      	beq.n	80013d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001302:	4b50      	ldr	r3, [pc, #320]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d11c      	bne.n	8001354 <HAL_RCC_OscConfig+0x190>
 800131a:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x17a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e1df      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	493d      	ldr	r1, [pc, #244]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e040      	b.n	80013d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d023      	beq.n	80013a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fbf4 	bl	8000b54 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fbf0 	bl	8000b54 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1bd      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001382:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4929      	ldr	r1, [pc, #164]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a26      	ldr	r2, [pc, #152]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fbd0 	bl	8000b54 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fbcc 	bl	8000b54 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e199      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d038      	beq.n	8001454 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d019      	beq.n	800141e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbad 	bl	8000b54 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fba9 	bl	8000b54 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e176      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x23a>
 800141c:	e01a      	b.n	8001454 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_RCC_OscConfig+0x280>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142a:	f7ff fb93 	bl	8000b54 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fb8f 	bl	8000b54 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d903      	bls.n	8001448 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e15c      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
 8001444:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b91      	ldr	r3, [pc, #580]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ee      	bne.n	8001432 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a4 	beq.w	80015aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b8b      	ldr	r3, [pc, #556]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a87      	ldr	r2, [pc, #540]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b85      	ldr	r3, [pc, #532]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x4d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7e      	ldr	r2, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x4d0>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb57 	bl	8000b54 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fb53 	bl	8000b54 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e120      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x4d0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x31a>
 80014d0:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	e02d      	b.n	800153a <HAL_RCC_OscConfig+0x376>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x33c>
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b67      	ldr	r3, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x376>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x35e>
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a60      	ldr	r2, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a5d      	ldr	r2, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x376>
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fb07 	bl	8000b54 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb03 	bl	8000b54 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0ce      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x386>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff faf1 	bl	8000b54 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff faed 	bl	8000b54 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80a4 	beq.w	80016fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d06b      	beq.n	8001698 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d149      	bne.n	800165c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a30      	ldr	r2, [pc, #192]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fabe 	bl	8000b54 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015dc:	f7ff faba 	bl	8000b54 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e087      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	3b01      	subs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	4313      	orrs	r3, r2
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001626:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fa8e 	bl	8000b54 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff fa8a 	bl	8000b54 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e057      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x478>
 800165a:	e04f      	b.n	80016fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fa74 	bl	8000b54 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fa70 	bl	8000b54 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e03d      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x4cc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x4ac>
 800168e:	e035      	b.n	80016fc <HAL_RCC_OscConfig+0x538>
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x544>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d028      	beq.n	80016f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d121      	bne.n	80016f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016c8:	4013      	ands	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d111      	bne.n	80016f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	3b01      	subs	r3, #1
 80016e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d0      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 020f 	bic.w	r2, r3, #15
 800173a:	4965      	ldr	r1, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d040      	beq.n	8001830 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e073      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4936      	ldr	r1, [pc, #216]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7ff f9a8 	bl	8000b54 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff f9a4 	bl	8000b54 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e053      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d210      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 020f 	bic.w	r2, r3, #15
 8001846:	4922      	ldr	r1, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1cc>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1d0>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1d4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f85e 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	080031c0 	.word	0x080031c0
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018ea:	2100      	movs	r1, #0
 80018ec:	6079      	str	r1, [r7, #4]
 80018ee:	2100      	movs	r1, #0
 80018f0:	60f9      	str	r1, [r7, #12]
 80018f2:	2100      	movs	r1, #0
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018f6:	2100      	movs	r1, #0
 80018f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fa:	4952      	ldr	r1, [pc, #328]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 80018fc:	6889      	ldr	r1, [r1, #8]
 80018fe:	f001 010c 	and.w	r1, r1, #12
 8001902:	2908      	cmp	r1, #8
 8001904:	d00d      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x3e>
 8001906:	2908      	cmp	r1, #8
 8001908:	f200 8094 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x150>
 800190c:	2900      	cmp	r1, #0
 800190e:	d002      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x32>
 8001910:	2904      	cmp	r1, #4
 8001912:	d003      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x38>
 8001914:	e08e      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x164>)
 8001918:	60bb      	str	r3, [r7, #8]
      break;
 800191a:	e08e      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191c:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x168>)
 800191e:	60bb      	str	r3, [r7, #8]
      break;
 8001920:	e08b      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001922:	4948      	ldr	r1, [pc, #288]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001924:	6849      	ldr	r1, [r1, #4]
 8001926:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800192a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800192c:	4945      	ldr	r1, [pc, #276]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 800192e:	6849      	ldr	r1, [r1, #4]
 8001930:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001934:	2900      	cmp	r1, #0
 8001936:	d024      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001938:	4942      	ldr	r1, [pc, #264]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 800193a:	6849      	ldr	r1, [r1, #4]
 800193c:	0989      	lsrs	r1, r1, #6
 800193e:	4608      	mov	r0, r1
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001948:	f04f 0500 	mov.w	r5, #0
 800194c:	ea00 0204 	and.w	r2, r0, r4
 8001950:	ea01 0305 	and.w	r3, r1, r5
 8001954:	493d      	ldr	r1, [pc, #244]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x168>)
 8001956:	fb01 f003 	mul.w	r0, r1, r3
 800195a:	2100      	movs	r1, #0
 800195c:	fb01 f102 	mul.w	r1, r1, r2
 8001960:	1844      	adds	r4, r0, r1
 8001962:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x168>)
 8001964:	fba2 0101 	umull	r0, r1, r2, r1
 8001968:	1863      	adds	r3, r4, r1
 800196a:	4619      	mov	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	461a      	mov	r2, r3
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f7fe fc48 	bl	8000208 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e04a      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	461a      	mov	r2, r3
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001992:	f04f 0100 	mov.w	r1, #0
 8001996:	ea02 0400 	and.w	r4, r2, r0
 800199a:	ea03 0501 	and.w	r5, r3, r1
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	014b      	lsls	r3, r1, #5
 80019ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b0:	0142      	lsls	r2, r0, #5
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	1b00      	subs	r0, r0, r4
 80019b8:	eb61 0105 	sbc.w	r1, r1, r5
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	018b      	lsls	r3, r1, #6
 80019c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019ca:	0182      	lsls	r2, r0, #6
 80019cc:	1a12      	subs	r2, r2, r0
 80019ce:	eb63 0301 	sbc.w	r3, r3, r1
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	00d9      	lsls	r1, r3, #3
 80019dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019e0:	00d0      	lsls	r0, r2, #3
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	1912      	adds	r2, r2, r4
 80019e8:	eb45 0303 	adc.w	r3, r5, r3
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	0299      	lsls	r1, r3, #10
 80019f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019fa:	0290      	lsls	r0, r2, #10
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	f7fe fbfc 	bl	8000208 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	3301      	adds	r3, #1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	60bb      	str	r3, [r7, #8]
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x164>)
 8001a36:	60bb      	str	r3, [r7, #8]
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bdb0      	pop	{r4, r5, r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	017d7840 	.word	0x017d7840

08001a50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0a9b      	lsrs	r3, r3, #10
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	080031d0 	.word	0x080031d0

08001a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a94:	f7ff ffdc 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0b5b      	lsrs	r3, r3, #13
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	080031d0 	.word	0x080031d0

08001ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_RCC_GetClockConfig+0x60>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 020f 	and.w	r2, r3, #15
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b44:	4b69      	ldr	r3, [pc, #420]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a68      	ldr	r2, [pc, #416]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b4e:	6093      	str	r3, [r2, #8]
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b58:	4964      	ldr	r1, [pc, #400]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d017      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	4959      	ldr	r1, [pc, #356]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b94:	d101      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d017      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	494a      	ldr	r1, [pc, #296]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 808b 	beq.w	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a39      	ldr	r2, [pc, #228]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c24:	f7fe ff96 	bl	8000b54 <HAL_GetTick>
 8001c28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2c:	f7fe ff92 	bl	8000b54 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e357      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c4a:	4b28      	ldr	r3, [pc, #160]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d035      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d02e      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c68:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d114      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ff5a 	bl	8000b54 <HAL_GetTick>
 8001ca0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7fe ff56 	bl	8000b54 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e319      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ee      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cd2:	d111      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	4901      	ldr	r1, [pc, #4]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	0ffffcff 	.word	0x0ffffcff
 8001cf8:	4bb1      	ldr	r3, [pc, #708]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4ab0      	ldr	r2, [pc, #704]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d02:	6093      	str	r3, [r2, #8]
 8001d04:	4bae      	ldr	r3, [pc, #696]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	49ab      	ldr	r1, [pc, #684]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d22:	4ba7      	ldr	r3, [pc, #668]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d28:	4aa5      	ldr	r2, [pc, #660]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d32:	4ba3      	ldr	r3, [pc, #652]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	49a0      	ldr	r1, [pc, #640]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d50:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5e:	4998      	ldr	r1, [pc, #608]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d72:	4b93      	ldr	r3, [pc, #588]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d80:	498f      	ldr	r1, [pc, #572]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d94:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da2:	4987      	ldr	r1, [pc, #540]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001db6:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	497e      	ldr	r1, [pc, #504]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4976      	ldr	r1, [pc, #472]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dfa:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e00:	f023 020c 	bic.w	r2, r3, #12
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	496d      	ldr	r1, [pc, #436]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4965      	ldr	r1, [pc, #404]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e3e:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4c:	495c      	ldr	r1, [pc, #368]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e60:	4b57      	ldr	r3, [pc, #348]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	4954      	ldr	r1, [pc, #336]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e82:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	494b      	ldr	r1, [pc, #300]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	4943      	ldr	r1, [pc, #268]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed4:	493a      	ldr	r1, [pc, #232]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ef6:	4932      	ldr	r1, [pc, #200]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d011      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f18:	4929      	ldr	r1, [pc, #164]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f28:	d101      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	4919      	ldr	r1, [pc, #100]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f7c:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d006      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80d9 	beq.w	800214a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa4:	f7fe fdd6 	bl	8000b54 <HAL_GetTick>
 8001fa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fac:	f7fe fdd2 	bl	8000b54 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d904      	bls.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e197      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc4:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ed      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d021      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d11d      	bne.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fe4:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ff2:	4b61      	ldr	r3, [pc, #388]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff8:	0e1b      	lsrs	r3, r3, #24
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	019a      	lsls	r2, r3, #6
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	071b      	lsls	r3, r3, #28
 8002018:	4957      	ldr	r1, [pc, #348]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002034:	d00a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02e      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204a:	d129      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800204c:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800204e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002060:	0f1b      	lsrs	r3, r3, #28
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	019a      	lsls	r2, r3, #6
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	431a      	orrs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	071b      	lsls	r3, r3, #28
 8002080:	493d      	ldr	r1, [pc, #244]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800208a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208e:	f023 021f 	bic.w	r2, r3, #31
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	3b01      	subs	r3, #1
 8002098:	4937      	ldr	r1, [pc, #220]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01d      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b2:	0e1b      	lsrs	r3, r3, #24
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c0:	0f1b      	lsrs	r3, r3, #28
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	019a      	lsls	r2, r3, #6
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	431a      	orrs	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	071b      	lsls	r3, r3, #28
 80020e0:	4925      	ldr	r1, [pc, #148]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d011      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	019a      	lsls	r2, r3, #6
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	071b      	lsls	r3, r3, #28
 8002110:	4919      	ldr	r1, [pc, #100]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a16      	ldr	r2, [pc, #88]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800211e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002124:	f7fe fd16 	bl	8000b54 <HAL_GetTick>
 8002128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800212c:	f7fe fd12 	bl	8000b54 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0d7      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b01      	cmp	r3, #1
 800214e:	f040 80cd 	bne.w	80022ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800215e:	f7fe fcf9 	bl	8000b54 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002166:	f7fe fcf5 	bl	8000b54 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b64      	cmp	r3, #100	; 0x64
 8002172:	d903      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0ba      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002178:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800217c:	4b5e      	ldr	r3, [pc, #376]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002188:	d0ed      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d02e      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12a      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021c0:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	0f1b      	lsrs	r3, r3, #28
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	019a      	lsls	r2, r3, #6
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	061b      	lsls	r3, r3, #24
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	071b      	lsls	r3, r3, #28
 80021e6:	4944      	ldr	r1, [pc, #272]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	493d      	ldr	r1, [pc, #244]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d022      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800221c:	d11d      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	0e1b      	lsrs	r3, r3, #24
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800222c:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	0f1b      	lsrs	r3, r3, #28
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	019a      	lsls	r2, r3, #6
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	061b      	lsls	r3, r3, #24
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	071b      	lsls	r3, r3, #28
 8002252:	4929      	ldr	r1, [pc, #164]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d028      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	019a      	lsls	r2, r3, #6
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	431a      	orrs	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	071b      	lsls	r3, r3, #28
 800229a:	4917      	ldr	r1, [pc, #92]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	4911      	ldr	r1, [pc, #68]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fc46 	bl	8000b54 <HAL_GetTick>
 80022c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022cc:	f7fe fc42 	bl	8000b54 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e007      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ea:	d1ef      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e049      	b.n	80023a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f841 	bl	80023aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fa00 	bl	8002740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d001      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e054      	b.n	8002482 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a26      	ldr	r2, [pc, #152]	; (8002490 <HAL_TIM_Base_Start_IT+0xd0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d022      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d01d      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_TIM_Base_Start_IT+0xd4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d018      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_TIM_Base_Start_IT+0xd8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_TIM_Base_Start_IT+0xdc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x80>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d115      	bne.n	800246c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_TIM_Base_Start_IT+0xec>)
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b06      	cmp	r3, #6
 8002450:	d015      	beq.n	800247e <HAL_TIM_Base_Start_IT+0xbe>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d011      	beq.n	800247e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	e008      	b.n	800247e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e000      	b.n	8002480 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40010000 	.word	0x40010000
 8002494:	40000400 	.word	0x40000400
 8002498:	40000800 	.word	0x40000800
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40010400 	.word	0x40010400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40001800 	.word	0x40001800
 80024ac:	00010007 	.word	0x00010007

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f905 	bl	8002702 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8f7 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f908 	bl	8002716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0204 	mvn.w	r2, #4
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8db 	bl	8002702 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f8cd 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8de 	bl	8002716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b08      	cmp	r3, #8
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0208 	mvn.w	r2, #8
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8b1 	bl	8002702 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f8a3 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f8b4 	bl	8002716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0210 	mvn.w	r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2208      	movs	r2, #8
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f887 	bl	8002702 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f879 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f88a 	bl	8002716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0201 	mvn.w	r2, #1
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe f926 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f91a 	bl	8002894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266e:	d10e      	bne.n	800268e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d107      	bne.n	800268e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f90d 	bl	80028a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d10e      	bne.n	80026ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d107      	bne.n	80026ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f838 	bl	800272a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d10e      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f06f 0220 	mvn.w	r2, #32
 80026de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8cd 	bl	8002880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a40      	ldr	r2, [pc, #256]	; (8002854 <TIM_Base_SetConfig+0x114>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <TIM_Base_SetConfig+0x40>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d00f      	beq.n	8002780 <TIM_Base_SetConfig+0x40>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a3d      	ldr	r2, [pc, #244]	; (8002858 <TIM_Base_SetConfig+0x118>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_Base_SetConfig+0x40>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <TIM_Base_SetConfig+0x11c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_Base_SetConfig+0x40>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <TIM_Base_SetConfig+0x120>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_Base_SetConfig+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3a      	ldr	r2, [pc, #232]	; (8002864 <TIM_Base_SetConfig+0x124>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d108      	bne.n	8002792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <TIM_Base_SetConfig+0x114>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d027      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2c      	ldr	r2, [pc, #176]	; (8002858 <TIM_Base_SetConfig+0x118>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d023      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2b      	ldr	r2, [pc, #172]	; (800285c <TIM_Base_SetConfig+0x11c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <TIM_Base_SetConfig+0x120>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01b      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a29      	ldr	r2, [pc, #164]	; (8002864 <TIM_Base_SetConfig+0x124>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d017      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <TIM_Base_SetConfig+0x128>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <TIM_Base_SetConfig+0x12c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00f      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <TIM_Base_SetConfig+0x130>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00b      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a25      	ldr	r2, [pc, #148]	; (8002874 <TIM_Base_SetConfig+0x134>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a24      	ldr	r2, [pc, #144]	; (8002878 <TIM_Base_SetConfig+0x138>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_Base_SetConfig+0xb2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a23      	ldr	r2, [pc, #140]	; (800287c <TIM_Base_SetConfig+0x13c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d108      	bne.n	8002804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <TIM_Base_SetConfig+0x114>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_Base_SetConfig+0xf8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <TIM_Base_SetConfig+0x124>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d103      	bne.n	8002840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	615a      	str	r2, [r3, #20]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40010000 	.word	0x40010000
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800
 8002860:	40000c00 	.word	0x40000c00
 8002864:	40010400 	.word	0x40010400
 8002868:	40014000 	.word	0x40014000
 800286c:	40014400 	.word	0x40014400
 8002870:	40014800 	.word	0x40014800
 8002874:	40001800 	.word	0x40001800
 8002878:	40001c00 	.word	0x40001c00
 800287c:	40002000 	.word	0x40002000

08002880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e040      	b.n	8002950 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe f80a 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2224      	movs	r2, #36	; 0x24
 80028e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f82c 	bl	8002958 <UART_SetConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e022      	b.n	8002950 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa82 	bl	8002e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002936:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fb09 	bl	8002f60 <UART_CheckIdleState>
 800294e:	4603      	mov	r3, r0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4ba7      	ldr	r3, [pc, #668]	; (8002c20 <UART_SetConfig+0x2c8>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	6979      	ldr	r1, [r7, #20]
 800298c:	430b      	orrs	r3, r1
 800298e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a95      	ldr	r2, [pc, #596]	; (8002c24 <UART_SetConfig+0x2cc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d120      	bne.n	8002a16 <UART_SetConfig+0xbe>
 80029d4:	4b94      	ldr	r3, [pc, #592]	; (8002c28 <UART_SetConfig+0x2d0>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d816      	bhi.n	8002a10 <UART_SetConfig+0xb8>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <UART_SetConfig+0x90>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a05 	.word	0x08002a05
 80029f0:	080029ff 	.word	0x080029ff
 80029f4:	08002a0b 	.word	0x08002a0b
 80029f8:	2301      	movs	r3, #1
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e14f      	b.n	8002c9e <UART_SetConfig+0x346>
 80029fe:	2302      	movs	r3, #2
 8002a00:	77fb      	strb	r3, [r7, #31]
 8002a02:	e14c      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a04:	2304      	movs	r3, #4
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	e149      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	77fb      	strb	r3, [r7, #31]
 8002a0e:	e146      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a10:	2310      	movs	r3, #16
 8002a12:	77fb      	strb	r3, [r7, #31]
 8002a14:	e143      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a84      	ldr	r2, [pc, #528]	; (8002c2c <UART_SetConfig+0x2d4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d132      	bne.n	8002a86 <UART_SetConfig+0x12e>
 8002a20:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <UART_SetConfig+0x2d0>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d828      	bhi.n	8002a80 <UART_SetConfig+0x128>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <UART_SetConfig+0xdc>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a69 	.word	0x08002a69
 8002a38:	08002a81 	.word	0x08002a81
 8002a3c:	08002a81 	.word	0x08002a81
 8002a40:	08002a81 	.word	0x08002a81
 8002a44:	08002a75 	.word	0x08002a75
 8002a48:	08002a81 	.word	0x08002a81
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002a81 	.word	0x08002a81
 8002a54:	08002a6f 	.word	0x08002a6f
 8002a58:	08002a81 	.word	0x08002a81
 8002a5c:	08002a81 	.word	0x08002a81
 8002a60:	08002a81 	.word	0x08002a81
 8002a64:	08002a7b 	.word	0x08002a7b
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e117      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	77fb      	strb	r3, [r7, #31]
 8002a72:	e114      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a74:	2304      	movs	r3, #4
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e111      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	77fb      	strb	r3, [r7, #31]
 8002a7e:	e10e      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a80:	2310      	movs	r3, #16
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e10b      	b.n	8002c9e <UART_SetConfig+0x346>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <UART_SetConfig+0x2d8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d120      	bne.n	8002ad2 <UART_SetConfig+0x17a>
 8002a90:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <UART_SetConfig+0x2d0>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a9a:	2b30      	cmp	r3, #48	; 0x30
 8002a9c:	d013      	beq.n	8002ac6 <UART_SetConfig+0x16e>
 8002a9e:	2b30      	cmp	r3, #48	; 0x30
 8002aa0:	d814      	bhi.n	8002acc <UART_SetConfig+0x174>
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d009      	beq.n	8002aba <UART_SetConfig+0x162>
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d810      	bhi.n	8002acc <UART_SetConfig+0x174>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <UART_SetConfig+0x15c>
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d006      	beq.n	8002ac0 <UART_SetConfig+0x168>
 8002ab2:	e00b      	b.n	8002acc <UART_SetConfig+0x174>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77fb      	strb	r3, [r7, #31]
 8002ab8:	e0f1      	b.n	8002c9e <UART_SetConfig+0x346>
 8002aba:	2302      	movs	r3, #2
 8002abc:	77fb      	strb	r3, [r7, #31]
 8002abe:	e0ee      	b.n	8002c9e <UART_SetConfig+0x346>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e0eb      	b.n	8002c9e <UART_SetConfig+0x346>
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e0e8      	b.n	8002c9e <UART_SetConfig+0x346>
 8002acc:	2310      	movs	r3, #16
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e0e5      	b.n	8002c9e <UART_SetConfig+0x346>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <UART_SetConfig+0x2dc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d120      	bne.n	8002b1e <UART_SetConfig+0x1c6>
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <UART_SetConfig+0x2d0>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ae8:	d013      	beq.n	8002b12 <UART_SetConfig+0x1ba>
 8002aea:	2bc0      	cmp	r3, #192	; 0xc0
 8002aec:	d814      	bhi.n	8002b18 <UART_SetConfig+0x1c0>
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d009      	beq.n	8002b06 <UART_SetConfig+0x1ae>
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d810      	bhi.n	8002b18 <UART_SetConfig+0x1c0>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <UART_SetConfig+0x1a8>
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d006      	beq.n	8002b0c <UART_SetConfig+0x1b4>
 8002afe:	e00b      	b.n	8002b18 <UART_SetConfig+0x1c0>
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e0cb      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b06:	2302      	movs	r3, #2
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e0c8      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e0c5      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b12:	2308      	movs	r3, #8
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e0c2      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e0bf      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a45      	ldr	r2, [pc, #276]	; (8002c38 <UART_SetConfig+0x2e0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d125      	bne.n	8002b74 <UART_SetConfig+0x21c>
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <UART_SetConfig+0x2d0>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b36:	d017      	beq.n	8002b68 <UART_SetConfig+0x210>
 8002b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b3c:	d817      	bhi.n	8002b6e <UART_SetConfig+0x216>
 8002b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b42:	d00b      	beq.n	8002b5c <UART_SetConfig+0x204>
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d811      	bhi.n	8002b6e <UART_SetConfig+0x216>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <UART_SetConfig+0x1fe>
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d006      	beq.n	8002b62 <UART_SetConfig+0x20a>
 8002b54:	e00b      	b.n	8002b6e <UART_SetConfig+0x216>
 8002b56:	2300      	movs	r3, #0
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e0a0      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e09d      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b62:	2304      	movs	r3, #4
 8002b64:	77fb      	strb	r3, [r7, #31]
 8002b66:	e09a      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b68:	2308      	movs	r3, #8
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e097      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b6e:	2310      	movs	r3, #16
 8002b70:	77fb      	strb	r3, [r7, #31]
 8002b72:	e094      	b.n	8002c9e <UART_SetConfig+0x346>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a30      	ldr	r2, [pc, #192]	; (8002c3c <UART_SetConfig+0x2e4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d125      	bne.n	8002bca <UART_SetConfig+0x272>
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <UART_SetConfig+0x2d0>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b8c:	d017      	beq.n	8002bbe <UART_SetConfig+0x266>
 8002b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b92:	d817      	bhi.n	8002bc4 <UART_SetConfig+0x26c>
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b98:	d00b      	beq.n	8002bb2 <UART_SetConfig+0x25a>
 8002b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b9e:	d811      	bhi.n	8002bc4 <UART_SetConfig+0x26c>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <UART_SetConfig+0x254>
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba8:	d006      	beq.n	8002bb8 <UART_SetConfig+0x260>
 8002baa:	e00b      	b.n	8002bc4 <UART_SetConfig+0x26c>
 8002bac:	2301      	movs	r3, #1
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e075      	b.n	8002c9e <UART_SetConfig+0x346>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e072      	b.n	8002c9e <UART_SetConfig+0x346>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e06f      	b.n	8002c9e <UART_SetConfig+0x346>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e06c      	b.n	8002c9e <UART_SetConfig+0x346>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e069      	b.n	8002c9e <UART_SetConfig+0x346>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <UART_SetConfig+0x2e8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d137      	bne.n	8002c44 <UART_SetConfig+0x2ec>
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <UART_SetConfig+0x2d0>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002bde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be2:	d017      	beq.n	8002c14 <UART_SetConfig+0x2bc>
 8002be4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be8:	d817      	bhi.n	8002c1a <UART_SetConfig+0x2c2>
 8002bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bee:	d00b      	beq.n	8002c08 <UART_SetConfig+0x2b0>
 8002bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf4:	d811      	bhi.n	8002c1a <UART_SetConfig+0x2c2>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <UART_SetConfig+0x2aa>
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d006      	beq.n	8002c0e <UART_SetConfig+0x2b6>
 8002c00:	e00b      	b.n	8002c1a <UART_SetConfig+0x2c2>
 8002c02:	2300      	movs	r3, #0
 8002c04:	77fb      	strb	r3, [r7, #31]
 8002c06:	e04a      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	e047      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e044      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c14:	2308      	movs	r3, #8
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e041      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e03e      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c20:	efff69f3 	.word	0xefff69f3
 8002c24:	40011000 	.word	0x40011000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40004400 	.word	0x40004400
 8002c30:	40004800 	.word	0x40004800
 8002c34:	40004c00 	.word	0x40004c00
 8002c38:	40005000 	.word	0x40005000
 8002c3c:	40011400 	.word	0x40011400
 8002c40:	40007800 	.word	0x40007800
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a71      	ldr	r2, [pc, #452]	; (8002e10 <UART_SetConfig+0x4b8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d125      	bne.n	8002c9a <UART_SetConfig+0x342>
 8002c4e:	4b71      	ldr	r3, [pc, #452]	; (8002e14 <UART_SetConfig+0x4bc>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c5c:	d017      	beq.n	8002c8e <UART_SetConfig+0x336>
 8002c5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c62:	d817      	bhi.n	8002c94 <UART_SetConfig+0x33c>
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d00b      	beq.n	8002c82 <UART_SetConfig+0x32a>
 8002c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6e:	d811      	bhi.n	8002c94 <UART_SetConfig+0x33c>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <UART_SetConfig+0x324>
 8002c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c78:	d006      	beq.n	8002c88 <UART_SetConfig+0x330>
 8002c7a:	e00b      	b.n	8002c94 <UART_SetConfig+0x33c>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e00d      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c82:	2302      	movs	r3, #2
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e00a      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e007      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c8e:	2308      	movs	r3, #8
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e004      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c94:	2310      	movs	r3, #16
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e001      	b.n	8002c9e <UART_SetConfig+0x346>
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca6:	d15a      	bne.n	8002d5e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d827      	bhi.n	8002cfe <UART_SetConfig+0x3a6>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <UART_SetConfig+0x35c>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cd9 	.word	0x08002cd9
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002ce9 	.word	0x08002ce9
 8002cc0:	08002cff 	.word	0x08002cff
 8002cc4:	08002cef 	.word	0x08002cef
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002cff 	.word	0x08002cff
 8002cd0:	08002cff 	.word	0x08002cff
 8002cd4:	08002cf7 	.word	0x08002cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f7fe fec6 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8002cdc:	61b8      	str	r0, [r7, #24]
        break;
 8002cde:	e013      	b.n	8002d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce0:	f7fe fed6 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8002ce4:	61b8      	str	r0, [r7, #24]
        break;
 8002ce6:	e00f      	b.n	8002d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <UART_SetConfig+0x4c0>)
 8002cea:	61bb      	str	r3, [r7, #24]
        break;
 8002cec:	e00c      	b.n	8002d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cee:	f7fe fdf9 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8002cf2:	61b8      	str	r0, [r7, #24]
        break;
 8002cf4:	e008      	b.n	8002d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	61bb      	str	r3, [r7, #24]
        break;
 8002cfc:	e004      	b.n	8002d08 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77bb      	strb	r3, [r7, #30]
        break;
 8002d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d074      	beq.n	8002df8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	005a      	lsls	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	d916      	bls.n	8002d58 <UART_SetConfig+0x400>
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d212      	bcs.n	8002d58 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f023 030f 	bic.w	r3, r3, #15
 8002d3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	89fa      	ldrh	r2, [r7, #14]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e04f      	b.n	8002df8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	77bb      	strb	r3, [r7, #30]
 8002d5c:	e04c      	b.n	8002df8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d5e:	7ffb      	ldrb	r3, [r7, #31]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d828      	bhi.n	8002db6 <UART_SetConfig+0x45e>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <UART_SetConfig+0x414>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08002db7 	.word	0x08002db7
 8002d7c:	08002da7 	.word	0x08002da7
 8002d80:	08002db7 	.word	0x08002db7
 8002d84:	08002db7 	.word	0x08002db7
 8002d88:	08002db7 	.word	0x08002db7
 8002d8c:	08002daf 	.word	0x08002daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7fe fe6a 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8002d94:	61b8      	str	r0, [r7, #24]
        break;
 8002d96:	e013      	b.n	8002dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7fe fe7a 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	61b8      	str	r0, [r7, #24]
        break;
 8002d9e:	e00f      	b.n	8002dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <UART_SetConfig+0x4c0>)
 8002da2:	61bb      	str	r3, [r7, #24]
        break;
 8002da4:	e00c      	b.n	8002dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da6:	f7fe fd9d 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 8002daa:	61b8      	str	r0, [r7, #24]
        break;
 8002dac:	e008      	b.n	8002dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	61bb      	str	r3, [r7, #24]
        break;
 8002db4:	e004      	b.n	8002dc0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8002dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085a      	lsrs	r2, r3, #1
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d909      	bls.n	8002df4 <UART_SetConfig+0x49c>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d205      	bcs.n	8002df4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e001      	b.n	8002df8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40007c00 	.word	0x40007c00
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400

08002e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01a      	beq.n	8002f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1a:	d10a      	bne.n	8002f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  }
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f70:	f7fd fdf0 	bl	8000b54 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d10e      	bne.n	8002fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f817 	bl	8002fc6 <UART_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00d      	b.n	8002fbe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b09c      	sub	sp, #112	; 0x70
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd6:	e0a5      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	f000 80a1 	beq.w	8003124 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fd fdb7 	bl	8000b54 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d13e      	bne.n	8003076 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800300c:	667b      	str	r3, [r7, #100]	; 0x64
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003018:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800301c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e6      	bne.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3308      	adds	r3, #8
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	663b      	str	r3, [r7, #96]	; 0x60
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3308      	adds	r3, #8
 8003048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800304a:	64ba      	str	r2, [r7, #72]	; 0x48
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1e5      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e067      	b.n	8003146 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d04f      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003092:	d147      	bne.n	8003124 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
 80030be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e6      	bne.n	800309e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3308      	adds	r3, #8
 80030d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	613b      	str	r3, [r7, #16]
   return(result);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030f0:	623a      	str	r2, [r7, #32]
 80030f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	69f9      	ldr	r1, [r7, #28]
 80030f6:	6a3a      	ldr	r2, [r7, #32]
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e010      	b.n	8003146 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	429a      	cmp	r2, r3
 8003140:	f43f af4a 	beq.w	8002fd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3770      	adds	r7, #112	; 0x70
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <__libc_init_array>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	4d0d      	ldr	r5, [pc, #52]	; (8003188 <__libc_init_array+0x38>)
 8003154:	4c0d      	ldr	r4, [pc, #52]	; (800318c <__libc_init_array+0x3c>)
 8003156:	1b64      	subs	r4, r4, r5
 8003158:	10a4      	asrs	r4, r4, #2
 800315a:	2600      	movs	r6, #0
 800315c:	42a6      	cmp	r6, r4
 800315e:	d109      	bne.n	8003174 <__libc_init_array+0x24>
 8003160:	4d0b      	ldr	r5, [pc, #44]	; (8003190 <__libc_init_array+0x40>)
 8003162:	4c0c      	ldr	r4, [pc, #48]	; (8003194 <__libc_init_array+0x44>)
 8003164:	f000 f820 	bl	80031a8 <_init>
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	2600      	movs	r6, #0
 800316e:	42a6      	cmp	r6, r4
 8003170:	d105      	bne.n	800317e <__libc_init_array+0x2e>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	f855 3b04 	ldr.w	r3, [r5], #4
 8003178:	4798      	blx	r3
 800317a:	3601      	adds	r6, #1
 800317c:	e7ee      	b.n	800315c <__libc_init_array+0xc>
 800317e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003182:	4798      	blx	r3
 8003184:	3601      	adds	r6, #1
 8003186:	e7f2      	b.n	800316e <__libc_init_array+0x1e>
 8003188:	080031e0 	.word	0x080031e0
 800318c:	080031e0 	.word	0x080031e0
 8003190:	080031e0 	.word	0x080031e0
 8003194:	080031e4 	.word	0x080031e4

08003198 <memset>:
 8003198:	4402      	add	r2, r0
 800319a:	4603      	mov	r3, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	d100      	bne.n	80031a2 <memset+0xa>
 80031a0:	4770      	bx	lr
 80031a2:	f803 1b01 	strb.w	r1, [r3], #1
 80031a6:	e7f9      	b.n	800319c <memset+0x4>

080031a8 <_init>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr

080031b4 <_fini>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr
