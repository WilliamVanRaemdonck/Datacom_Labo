
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a74  08002a74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a7c  08002a7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002a90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002a90  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ea  00000000  00000000  0002a029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  0002b618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240cf  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa22  00000000  00000000  0005047f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c9e  00000000  00000000  0005aea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cb3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b84  00000000  00000000  0013cb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002a3c 	.word	0x08002a3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002a3c 	.word	0x08002a3c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000504:	f000 f9e7 	bl	80008d6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000508:	f000 f810 	bl	800052c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050c:	f000 f8ce 	bl	80006ac <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000510:	f000 f89c 	bl	800064c <MX_USART1_UART_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_UART_Transmit(&huart1, "test\r\n", strlen("test\r\n"), HAL_MAX_DELAY);
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	2206      	movs	r2, #6
 800051a:	4902      	ldr	r1, [pc, #8]	; (8000524 <main+0x24>)
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <main+0x28>)
 800051e:	f001 fdd1 	bl	80020c4 <HAL_UART_Transmit>
	{
 8000522:	e7f7      	b.n	8000514 <main+0x14>
 8000524:	08002a54 	.word	0x08002a54
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0b4      	sub	sp, #208	; 0xd0
 8000530:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fa76 	bl	8002a2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2284      	movs	r2, #132	; 0x84
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fa67 	bl	8002a2c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b39      	ldr	r3, [pc, #228]	; (8000644 <SystemClock_Config+0x118>)
 8000560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000562:	4a38      	ldr	r2, [pc, #224]	; (8000644 <SystemClock_Config+0x118>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	6413      	str	r3, [r2, #64]	; 0x40
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <SystemClock_Config+0x118>)
 800056c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <SystemClock_Config+0x11c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a33      	ldr	r2, [pc, #204]	; (8000648 <SystemClock_Config+0x11c>)
 800057c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <SystemClock_Config+0x11c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 200;
 80005b2:	23c8      	movs	r3, #200	; 0xc8
 80005b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80005be:	2309      	movs	r3, #9
 80005c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fcc3 	bl	8000f54 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xac>
	{
		Error_Handler();
 80005d4:	f000 f88e 	bl	80006f4 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d8:	f000 fc6c 	bl	8000eb4 <HAL_PWREx_EnableOverDrive>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xba>
	{
		Error_Handler();
 80005e2:	f000 f887 	bl	80006f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000608:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800060c:	2106      	movs	r1, #6
 800060e:	4618      	mov	r0, r3
 8000610:	f000 ff44 	bl	800149c <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xf2>
	{
		Error_Handler();
 800061a:	f000 f86b 	bl	80006f4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800061e:	2340      	movs	r3, #64	; 0x40
 8000620:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000622:	2300      	movs	r3, #0
 8000624:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f90c 	bl	8001848 <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x10e>
	{
		Error_Handler();
 8000636:	f000 f85d 	bl	80006f4 <Error_Handler>
	}
}
 800063a:	bf00      	nop
 800063c:	37d0      	adds	r7, #208	; 0xd0
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART1_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x58>)
 8000690:	f001 fcca 	bl	8002028 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800069a:	f000 f82b 	bl	80006f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40011000 	.word	0x40011000

080006ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x44>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6413      	str	r3, [r2, #64]	; 0x40
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a25      	ldr	r2, [pc, #148]	; (80007fc <HAL_UART_MspInit+0xb4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d144      	bne.n	80007f4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <HAL_UART_MspInit+0xb8>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a24      	ldr	r2, [pc, #144]	; (8000800 <HAL_UART_MspInit+0xb8>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <HAL_UART_MspInit+0xb8>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <HAL_UART_MspInit+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <HAL_UART_MspInit+0xb8>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_UART_MspInit+0xb8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_UART_MspInit+0xb8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <HAL_UART_MspInit+0xb8>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_UART_MspInit+0xb8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c2:	2307      	movs	r3, #7
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <HAL_UART_MspInit+0xbc>)
 80007ce:	f000 f9c5 	bl	8000b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e4:	2307      	movs	r3, #7
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <HAL_UART_MspInit+0xc0>)
 80007f0:	f000 f9b4 	bl	8000b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40011000 	.word	0x40011000
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40020000 	.word	0x40020000

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000858:	f000 f87a 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f002 f897 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fe23 	bl	8000500 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c8:	08002a84 	.word	0x08002a84
  ldr r2, =_sbss
 80008cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d0:	200000b0 	.word	0x200000b0

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>

080008d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 f90a 	bl	8000af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e0:	200f      	movs	r0, #15
 80008e2:	f000 f805 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e6:	f7ff ff0b 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f917 	bl	8000b42 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f8ed 	bl	8000b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	200000ac 	.word	0x200000ac

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200000ac 	.word	0x200000ac

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <__NVIC_SetPriorityGrouping+0x40>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x40>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	05fa0000 	.word	0x05fa0000

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac0:	d301      	bcc.n	8000ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00f      	b.n	8000ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <SysTick_Config+0x40>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f7ff ff8e 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Config+0x40>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SysTick_Config+0x40>)
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010

08000af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff47 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	4603      	mov	r3, r0
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
 8000b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b1c:	f7ff ff5c 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	6978      	ldr	r0, [r7, #20]
 8000b28:	f7ff ff8e 	bl	8000a48 <NVIC_EncodePriority>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff5d 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffb0 	bl	8000ab0 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	e175      	b.n	8000e68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	f040 8164 	bne.w	8000e62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d005      	beq.n	8000bb2 <HAL_GPIO_Init+0x56>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d130      	bne.n	8000c14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	f003 0201 	and.w	r2, r3, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d017      	beq.n	8000c50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d123      	bne.n	8000ca4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	08da      	lsrs	r2, r3, #3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3208      	adds	r2, #8
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0203 	and.w	r2, r3, #3
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 80be 	beq.w	8000e62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <HAL_GPIO_Init+0x324>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a65      	ldr	r2, [pc, #404]	; (8000e80 <HAL_GPIO_Init+0x324>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_GPIO_Init+0x324>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cfe:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <HAL_GPIO_Init+0x328>)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3302      	adds	r3, #2
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a58      	ldr	r2, [pc, #352]	; (8000e88 <HAL_GPIO_Init+0x32c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d037      	beq.n	8000d9a <HAL_GPIO_Init+0x23e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a57      	ldr	r2, [pc, #348]	; (8000e8c <HAL_GPIO_Init+0x330>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d031      	beq.n	8000d96 <HAL_GPIO_Init+0x23a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a56      	ldr	r2, [pc, #344]	; (8000e90 <HAL_GPIO_Init+0x334>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d02b      	beq.n	8000d92 <HAL_GPIO_Init+0x236>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a55      	ldr	r2, [pc, #340]	; (8000e94 <HAL_GPIO_Init+0x338>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d025      	beq.n	8000d8e <HAL_GPIO_Init+0x232>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <HAL_GPIO_Init+0x33c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d01f      	beq.n	8000d8a <HAL_GPIO_Init+0x22e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a53      	ldr	r2, [pc, #332]	; (8000e9c <HAL_GPIO_Init+0x340>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d019      	beq.n	8000d86 <HAL_GPIO_Init+0x22a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <HAL_GPIO_Init+0x344>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0x226>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a51      	ldr	r2, [pc, #324]	; (8000ea4 <HAL_GPIO_Init+0x348>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d00d      	beq.n	8000d7e <HAL_GPIO_Init+0x222>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a50      	ldr	r2, [pc, #320]	; (8000ea8 <HAL_GPIO_Init+0x34c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d007      	beq.n	8000d7a <HAL_GPIO_Init+0x21e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4f      	ldr	r2, [pc, #316]	; (8000eac <HAL_GPIO_Init+0x350>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_GPIO_Init+0x21a>
 8000d72:	2309      	movs	r3, #9
 8000d74:	e012      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d76:	230a      	movs	r3, #10
 8000d78:	e010      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	e00e      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d7e:	2307      	movs	r3, #7
 8000d80:	e00c      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d82:	2306      	movs	r3, #6
 8000d84:	e00a      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e008      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x240>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	69fa      	ldr	r2, [r7, #28]
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dac:	4935      	ldr	r1, [pc, #212]	; (8000e84 <HAL_GPIO_Init+0x328>)
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dde:	4a34      	ldr	r2, [pc, #208]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e32:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <HAL_GPIO_Init+0x354>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3301      	adds	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b0f      	cmp	r3, #15
 8000e6c:	f67f ae86 	bls.w	8000b7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40021400 	.word	0x40021400
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	40021c00 	.word	0x40021c00
 8000ea8:	40022000 	.word	0x40022000
 8000eac:	40022400 	.word	0x40022400
 8000eb0:	40013c00 	.word	0x40013c00

08000eb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_PWREx_EnableOverDrive+0x98>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee2:	f7ff fd49 	bl	8000978 <HAL_GetTick>
 8000ee6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ee8:	e009      	b.n	8000efe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eea:	f7ff fd45 	bl	8000978 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ef8:	d901      	bls.n	8000efe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e022      	b.n	8000f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0a:	d1ee      	bne.n	8000eea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f18:	f7ff fd2e 	bl	8000978 <HAL_GetTick>
 8000f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f1e:	e009      	b.n	8000f34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f20:	f7ff fd2a 	bl	8000978 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f2e:	d901      	bls.n	8000f34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e007      	b.n	8000f44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f40:	d1ee      	bne.n	8000f20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e291      	b.n	800148e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f78:	4b96      	ldr	r3, [pc, #600]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f84:	4b93      	ldr	r3, [pc, #588]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d112      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x62>
 8000f90:	4b90      	ldr	r3, [pc, #576]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b8d      	ldr	r3, [pc, #564]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06c      	beq.n	8001084 <HAL_RCC_OscConfig+0x130>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d168      	bne.n	8001084 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e26b      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x7a>
 8000fc0:	4b84      	ldr	r3, [pc, #528]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a83      	ldr	r2, [pc, #524]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e02e      	b.n	800102c <HAL_RCC_OscConfig+0xd8>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x9c>
 8000fd6:	4b7f      	ldr	r3, [pc, #508]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7e      	ldr	r2, [pc, #504]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b7c      	ldr	r3, [pc, #496]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7b      	ldr	r2, [pc, #492]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xd8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0xc0>
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a75      	ldr	r2, [pc, #468]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b73      	ldr	r3, [pc, #460]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a72      	ldr	r2, [pc, #456]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xd8>
 8001014:	4b6f      	ldr	r3, [pc, #444]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a6e      	ldr	r2, [pc, #440]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b6c      	ldr	r3, [pc, #432]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a6b      	ldr	r2, [pc, #428]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001034:	f7ff fca0 	bl	8000978 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fc9c 	bl	8000978 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e21f      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xe8>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105c:	f7ff fc8c 	bl	8000978 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fc88 	bl	8000978 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e20b      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b57      	ldr	r3, [pc, #348]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x110>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d069      	beq.n	8001166 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x190>
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x17a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1df      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	493d      	ldr	r1, [pc, #244]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e040      	b.n	8001166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d023      	beq.n	8001134 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc3e 	bl	8000978 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fc3a 	bl	8000978 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1bd      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4929      	ldr	r1, [pc, #164]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
 8001132:	e018      	b.n	8001166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fc1a 	bl	8000978 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fc16 	bl	8000978 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e199      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d038      	beq.n	80011e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d019      	beq.n	80011ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 800117c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117e:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001186:	f7ff fbf7 	bl	8000978 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff fbf3 	bl	8000978 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e176      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80011a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x23a>
 80011ac:	e01a      	b.n	80011e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80011b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_RCC_OscConfig+0x280>)
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ba:	f7ff fbdd 	bl	8000978 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff fbd9 	bl	8000978 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d903      	bls.n	80011d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e15c      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
 80011d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	4b91      	ldr	r3, [pc, #580]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80011da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1ee      	bne.n	80011c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80a4 	beq.w	800133a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f2:	4b8b      	ldr	r3, [pc, #556]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a87      	ldr	r2, [pc, #540]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121a:	4b82      	ldr	r3, [pc, #520]	; (8001424 <HAL_RCC_OscConfig+0x4d0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d118      	bne.n	8001258 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001226:	4b7f      	ldr	r3, [pc, #508]	; (8001424 <HAL_RCC_OscConfig+0x4d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a7e      	ldr	r2, [pc, #504]	; (8001424 <HAL_RCC_OscConfig+0x4d0>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fba1 	bl	8000978 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff fb9d 	bl	8000978 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e120      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800124c:	4b75      	ldr	r3, [pc, #468]	; (8001424 <HAL_RCC_OscConfig+0x4d0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x31a>
 8001260:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001264:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6713      	str	r3, [r2, #112]	; 0x70
 800126c:	e02d      	b.n	80012ca <HAL_RCC_OscConfig+0x376>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x33c>
 8001276:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127a:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6713      	str	r3, [r2, #112]	; 0x70
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	4a66      	ldr	r2, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001288:	f023 0304 	bic.w	r3, r3, #4
 800128c:	6713      	str	r3, [r2, #112]	; 0x70
 800128e:	e01c      	b.n	80012ca <HAL_RCC_OscConfig+0x376>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b05      	cmp	r3, #5
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x35e>
 8001298:	4b61      	ldr	r3, [pc, #388]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129c:	4a60      	ldr	r2, [pc, #384]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6713      	str	r3, [r2, #112]	; 0x70
 80012a4:	4b5e      	ldr	r3, [pc, #376]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a8:	4a5d      	ldr	r2, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6713      	str	r3, [r2, #112]	; 0x70
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0x376>
 80012b2:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b6:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6713      	str	r3, [r2, #112]	; 0x70
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c2:	4a57      	ldr	r2, [pc, #348]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012c4:	f023 0304 	bic.w	r3, r3, #4
 80012c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d015      	beq.n	80012fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb51 	bl	8000978 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb4d 	bl	8000978 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e0ce      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0ee      	beq.n	80012da <HAL_RCC_OscConfig+0x386>
 80012fc:	e014      	b.n	8001328 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb3b 	bl	8000978 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fb37 	bl	8000978 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f241 3288 	movw	r2, #5000	; 0x1388
 8001314:	4293      	cmp	r3, r2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e0b8      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800131e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1ee      	bne.n	8001306 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132e:	4b3c      	ldr	r3, [pc, #240]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a3b      	ldr	r2, [pc, #236]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 80a4 	beq.w	800148c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b08      	cmp	r3, #8
 800134e:	d06b      	beq.n	8001428 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d149      	bne.n	80013ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a30      	ldr	r2, [pc, #192]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 800135e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001364:	f7ff fb08 	bl	8000978 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fb04 	bl	8000978 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e087      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	3b01      	subs	r3, #1
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4313      	orrs	r3, r2
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a18      	ldr	r2, [pc, #96]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fad8 	bl	8000978 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fad4 	bl	8000978 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e057      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x478>
 80013ea:	e04f      	b.n	800148c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fabe 	bl	8000978 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff faba 	bl	8000978 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e03d      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x4ac>
 800141e:	e035      	b.n	800148c <HAL_RCC_OscConfig+0x538>
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_RCC_OscConfig+0x544>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d028      	beq.n	8001488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d121      	bne.n	8001488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	429a      	cmp	r2, r3
 8001450:	d11a      	bne.n	8001488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001458:	4013      	ands	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800145e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001460:	4293      	cmp	r3, r2
 8001462:	d111      	bne.n	8001488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	3b01      	subs	r3, #1
 8001472:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d107      	bne.n	8001488 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0d0      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d910      	bls.n	80014e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 020f 	bic.w	r2, r3, #15
 80014ca:	4965      	ldr	r1, [pc, #404]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0b8      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800151a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800151e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	494d      	ldr	r1, [pc, #308]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d040      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e07f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e073      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e06b      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4936      	ldr	r1, [pc, #216]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001590:	f7ff f9f2 	bl	8000978 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff f9ee 	bl	8000978 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e053      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d210      	bcs.n	80015f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 020f 	bic.w	r2, r3, #15
 80015d6:	4922      	ldr	r1, [pc, #136]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e032      	b.n	8001656 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	490e      	ldr	r1, [pc, #56]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162e:	f000 f821 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001632:	4602      	mov	r2, r0
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	490a      	ldr	r1, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1cc>)
 8001640:	5ccb      	ldrb	r3, [r1, r3]
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1d0>)
 8001648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1d4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f94e 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00
 8001664:	40023800 	.word	0x40023800
 8001668:	08002a5c 	.word	0x08002a5c
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800167a:	2100      	movs	r1, #0
 800167c:	6079      	str	r1, [r7, #4]
 800167e:	2100      	movs	r1, #0
 8001680:	60f9      	str	r1, [r7, #12]
 8001682:	2100      	movs	r1, #0
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001686:	2100      	movs	r1, #0
 8001688:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800168a:	4952      	ldr	r1, [pc, #328]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800168c:	6889      	ldr	r1, [r1, #8]
 800168e:	f001 010c 	and.w	r1, r1, #12
 8001692:	2908      	cmp	r1, #8
 8001694:	d00d      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001696:	2908      	cmp	r1, #8
 8001698:	f200 8094 	bhi.w	80017c4 <HAL_RCC_GetSysClockFreq+0x150>
 800169c:	2900      	cmp	r1, #0
 800169e:	d002      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x32>
 80016a0:	2904      	cmp	r1, #4
 80016a2:	d003      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x38>
 80016a4:	e08e      	b.n	80017c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a6:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80016a8:	60bb      	str	r3, [r7, #8]
      break;
 80016aa:	e08e      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_RCC_GetSysClockFreq+0x168>)
 80016ae:	60bb      	str	r3, [r7, #8]
      break;
 80016b0:	e08b      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b2:	4948      	ldr	r1, [pc, #288]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016b4:	6849      	ldr	r1, [r1, #4]
 80016b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80016ba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016bc:	4945      	ldr	r1, [pc, #276]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016be:	6849      	ldr	r1, [r1, #4]
 80016c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d024      	beq.n	8001712 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c8:	4942      	ldr	r1, [pc, #264]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ca:	6849      	ldr	r1, [r1, #4]
 80016cc:	0989      	lsrs	r1, r1, #6
 80016ce:	4608      	mov	r0, r1
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80016d8:	f04f 0500 	mov.w	r5, #0
 80016dc:	ea00 0204 	and.w	r2, r0, r4
 80016e0:	ea01 0305 	and.w	r3, r1, r5
 80016e4:	493d      	ldr	r1, [pc, #244]	; (80017dc <HAL_RCC_GetSysClockFreq+0x168>)
 80016e6:	fb01 f003 	mul.w	r0, r1, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	fb01 f102 	mul.w	r1, r1, r2
 80016f0:	1844      	adds	r4, r0, r1
 80016f2:	493a      	ldr	r1, [pc, #232]	; (80017dc <HAL_RCC_GetSysClockFreq+0x168>)
 80016f4:	fba2 0101 	umull	r0, r1, r2, r1
 80016f8:	1863      	adds	r3, r4, r1
 80016fa:	4619      	mov	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	461a      	mov	r2, r3
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	f7fe fd80 	bl	8000208 <__aeabi_uldivmod>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4613      	mov	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e04a      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	461a      	mov	r2, r3
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	ea02 0400 	and.w	r4, r2, r0
 800172a:	ea03 0501 	and.w	r5, r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	014b      	lsls	r3, r1, #5
 800173c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001740:	0142      	lsls	r2, r0, #5
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	1b00      	subs	r0, r0, r4
 8001748:	eb61 0105 	sbc.w	r1, r1, r5
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	018b      	lsls	r3, r1, #6
 8001756:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800175a:	0182      	lsls	r2, r0, #6
 800175c:	1a12      	subs	r2, r2, r0
 800175e:	eb63 0301 	sbc.w	r3, r3, r1
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	00d9      	lsls	r1, r3, #3
 800176c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001770:	00d0      	lsls	r0, r2, #3
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	1912      	adds	r2, r2, r4
 8001778:	eb45 0303 	adc.w	r3, r5, r3
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	0299      	lsls	r1, r3, #10
 8001786:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800178a:	0290      	lsls	r0, r2, #10
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	461a      	mov	r2, r3
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	f7fe fd34 	bl	8000208 <__aeabi_uldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4613      	mov	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	3301      	adds	r3, #1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	60bb      	str	r3, [r7, #8]
      break;
 80017c2:	e002      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80017c6:	60bb      	str	r3, [r7, #8]
      break;
 80017c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ca:	68bb      	ldr	r3, [r7, #8]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bdb0      	pop	{r4, r5, r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	017d7840 	.word	0x017d7840

080017e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	08002a6c 	.word	0x08002a6c

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001824:	f7ff ffdc 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0b5b      	lsrs	r3, r3, #13
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	08002a6c 	.word	0x08002a6c

08001848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001870:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a68      	ldr	r2, [pc, #416]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001876:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800187a:	6093      	str	r3, [r2, #8]
 800187c:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	4964      	ldr	r1, [pc, #400]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d017      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018a2:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	4959      	ldr	r1, [pc, #356]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018c0:	d101      	bne.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018de:	4b4e      	ldr	r3, [pc, #312]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	494a      	ldr	r1, [pc, #296]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fc:	d101      	bne.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 808b 	beq.w	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff f812 	bl	8000978 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001958:	f7ff f80e 	bl	8000978 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e357      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d035      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d02e      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80019b6:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d114      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7fe ffd6 	bl	8000978 <HAL_GetTick>
 80019cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7fe ffd2 	bl	8000978 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e319      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0ee      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019fe:	d111      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	4901      	ldr	r1, [pc, #4]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	0ffffcff 	.word	0x0ffffcff
 8001a24:	4bb1      	ldr	r3, [pc, #708]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4ab0      	ldr	r2, [pc, #704]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a2e:	6093      	str	r3, [r2, #8]
 8001a30:	4bae      	ldr	r3, [pc, #696]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	49ab      	ldr	r1, [pc, #684]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d010      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a4e:	4ba7      	ldr	r3, [pc, #668]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a54:	4aa5      	ldr	r2, [pc, #660]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a5e:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	49a0      	ldr	r1, [pc, #640]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a7c:	4b9b      	ldr	r3, [pc, #620]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a8a:	4998      	ldr	r1, [pc, #608]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a9e:	4b93      	ldr	r3, [pc, #588]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aac:	498f      	ldr	r1, [pc, #572]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ac0:	4b8a      	ldr	r3, [pc, #552]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ace:	4987      	ldr	r1, [pc, #540]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ae2:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	497e      	ldr	r1, [pc, #504]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4976      	ldr	r1, [pc, #472]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b26:	4b71      	ldr	r3, [pc, #452]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	f023 020c 	bic.w	r2, r3, #12
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	496d      	ldr	r1, [pc, #436]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4965      	ldr	r1, [pc, #404]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b78:	495c      	ldr	r1, [pc, #368]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	4954      	ldr	r1, [pc, #336]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001bae:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	494b      	ldr	r1, [pc, #300]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	4943      	ldr	r1, [pc, #268]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	493a      	ldr	r1, [pc, #232]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00a      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c14:	4b35      	ldr	r3, [pc, #212]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c22:	4932      	ldr	r1, [pc, #200]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d011      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c44:	4929      	ldr	r1, [pc, #164]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c54:	d101      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	4919      	ldr	r1, [pc, #100]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca8:	4910      	ldr	r1, [pc, #64]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d006      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80d9 	beq.w	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd0:	f7fe fe52 	bl	8000978 <HAL_GetTick>
 8001cd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cd8:	f7fe fe4e 	bl	8000978 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d904      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e197      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ed      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d021      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11d      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d10:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d1e:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d24:	0e1b      	lsrs	r3, r3, #24
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	019a      	lsls	r2, r3, #6
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	431a      	orrs	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	071b      	lsls	r3, r3, #28
 8001d44:	4957      	ldr	r1, [pc, #348]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d02e      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d76:	d129      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d7e:	0c1b      	lsrs	r3, r3, #16
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d86:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d8c:	0f1b      	lsrs	r3, r3, #28
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	019a      	lsls	r2, r3, #6
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	071b      	lsls	r3, r3, #28
 8001dac:	493d      	ldr	r1, [pc, #244]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dba:	f023 021f 	bic.w	r2, r3, #31
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4937      	ldr	r1, [pc, #220]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01d      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dde:	0e1b      	lsrs	r3, r3, #24
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dec:	0f1b      	lsrs	r3, r3, #28
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	019a      	lsls	r2, r3, #6
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	431a      	orrs	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	071b      	lsls	r3, r3, #28
 8001e0c:	4925      	ldr	r1, [pc, #148]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d011      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	019a      	lsls	r2, r3, #6
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	061b      	lsls	r3, r3, #24
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	071b      	lsls	r3, r3, #28
 8001e3c:	4919      	ldr	r1, [pc, #100]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e50:	f7fe fd92 	bl	8000978 <HAL_GetTick>
 8001e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e58:	f7fe fd8e 	bl	8000978 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0d7      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	f040 80cd 	bne.w	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fd75 	bl	8000978 <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e92:	f7fe fd71 	bl	8000978 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d903      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0ba      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8001ea4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb4:	d0ed      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d02e      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d12a      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eec:	4b4d      	ldr	r3, [pc, #308]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	0f1b      	lsrs	r3, r3, #28
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	019a      	lsls	r2, r3, #6
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	061b      	lsls	r3, r3, #24
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	071b      	lsls	r3, r3, #28
 8001f12:	4944      	ldr	r1, [pc, #272]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f1a:	4b42      	ldr	r3, [pc, #264]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	493d      	ldr	r1, [pc, #244]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d022      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f48:	d11d      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	0e1b      	lsrs	r3, r3, #24
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f58:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	0f1b      	lsrs	r3, r3, #28
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	019a      	lsls	r2, r3, #6
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	071b      	lsls	r3, r3, #28
 8001f7e:	4929      	ldr	r1, [pc, #164]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d028      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f98:	0e1b      	lsrs	r3, r3, #24
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	019a      	lsls	r2, r3, #6
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	041b      	lsls	r3, r3, #16
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	071b      	lsls	r3, r3, #28
 8001fc6:	4917      	ldr	r1, [pc, #92]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	4911      	ldr	r1, [pc, #68]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fcc2 	bl	8000978 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ff8:	f7fe fcbe 	bl	8000978 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e007      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002016:	d1ef      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e040      	b.n	80020bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fb7c 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8c0 	bl	80021ec <UART_SetConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e022      	b.n	80020bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fb16 	bl	80026b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fb9d 	bl	80027f4 <UART_CheckIdleState>
 80020ba:	4603      	mov	r3, r0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020d8:	2b20      	cmp	r3, #32
 80020da:	f040 8081 	bne.w	80021e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_UART_Transmit+0x26>
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e079      	b.n	80021e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Transmit+0x38>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e072      	b.n	80021e2 <HAL_UART_Transmit+0x11e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2221      	movs	r2, #33	; 0x21
 8002110:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002112:	f7fe fc31 	bl	8000978 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002130:	d108      	bne.n	8002144 <HAL_UART_Transmit+0x80>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d104      	bne.n	8002144 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	e003      	b.n	800214c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002154:	e02c      	b.n	80021b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fb7a 	bl	800285a <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e038      	b.n	80021e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10b      	bne.n	800218e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	3302      	adds	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	e007      	b.n	800219e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1cc      	bne.n	8002156 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fb47 	bl	800285a <UART_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e005      	b.n	80021e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4ba7      	ldr	r3, [pc, #668]	; (80024b4 <UART_SetConfig+0x2c8>)
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	6979      	ldr	r1, [r7, #20]
 8002220:	430b      	orrs	r3, r1
 8002222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a95      	ldr	r2, [pc, #596]	; (80024b8 <UART_SetConfig+0x2cc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d120      	bne.n	80022aa <UART_SetConfig+0xbe>
 8002268:	4b94      	ldr	r3, [pc, #592]	; (80024bc <UART_SetConfig+0x2d0>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b03      	cmp	r3, #3
 8002274:	d816      	bhi.n	80022a4 <UART_SetConfig+0xb8>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <UART_SetConfig+0x90>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	08002299 	.word	0x08002299
 8002284:	08002293 	.word	0x08002293
 8002288:	0800229f 	.word	0x0800229f
 800228c:	2301      	movs	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
 8002290:	e14f      	b.n	8002532 <UART_SetConfig+0x346>
 8002292:	2302      	movs	r3, #2
 8002294:	77fb      	strb	r3, [r7, #31]
 8002296:	e14c      	b.n	8002532 <UART_SetConfig+0x346>
 8002298:	2304      	movs	r3, #4
 800229a:	77fb      	strb	r3, [r7, #31]
 800229c:	e149      	b.n	8002532 <UART_SetConfig+0x346>
 800229e:	2308      	movs	r3, #8
 80022a0:	77fb      	strb	r3, [r7, #31]
 80022a2:	e146      	b.n	8002532 <UART_SetConfig+0x346>
 80022a4:	2310      	movs	r3, #16
 80022a6:	77fb      	strb	r3, [r7, #31]
 80022a8:	e143      	b.n	8002532 <UART_SetConfig+0x346>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a84      	ldr	r2, [pc, #528]	; (80024c0 <UART_SetConfig+0x2d4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d132      	bne.n	800231a <UART_SetConfig+0x12e>
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <UART_SetConfig+0x2d0>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d828      	bhi.n	8002314 <UART_SetConfig+0x128>
 80022c2:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <UART_SetConfig+0xdc>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	080022fd 	.word	0x080022fd
 80022cc:	08002315 	.word	0x08002315
 80022d0:	08002315 	.word	0x08002315
 80022d4:	08002315 	.word	0x08002315
 80022d8:	08002309 	.word	0x08002309
 80022dc:	08002315 	.word	0x08002315
 80022e0:	08002315 	.word	0x08002315
 80022e4:	08002315 	.word	0x08002315
 80022e8:	08002303 	.word	0x08002303
 80022ec:	08002315 	.word	0x08002315
 80022f0:	08002315 	.word	0x08002315
 80022f4:	08002315 	.word	0x08002315
 80022f8:	0800230f 	.word	0x0800230f
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
 8002300:	e117      	b.n	8002532 <UART_SetConfig+0x346>
 8002302:	2302      	movs	r3, #2
 8002304:	77fb      	strb	r3, [r7, #31]
 8002306:	e114      	b.n	8002532 <UART_SetConfig+0x346>
 8002308:	2304      	movs	r3, #4
 800230a:	77fb      	strb	r3, [r7, #31]
 800230c:	e111      	b.n	8002532 <UART_SetConfig+0x346>
 800230e:	2308      	movs	r3, #8
 8002310:	77fb      	strb	r3, [r7, #31]
 8002312:	e10e      	b.n	8002532 <UART_SetConfig+0x346>
 8002314:	2310      	movs	r3, #16
 8002316:	77fb      	strb	r3, [r7, #31]
 8002318:	e10b      	b.n	8002532 <UART_SetConfig+0x346>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a69      	ldr	r2, [pc, #420]	; (80024c4 <UART_SetConfig+0x2d8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d120      	bne.n	8002366 <UART_SetConfig+0x17a>
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <UART_SetConfig+0x2d0>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800232e:	2b30      	cmp	r3, #48	; 0x30
 8002330:	d013      	beq.n	800235a <UART_SetConfig+0x16e>
 8002332:	2b30      	cmp	r3, #48	; 0x30
 8002334:	d814      	bhi.n	8002360 <UART_SetConfig+0x174>
 8002336:	2b20      	cmp	r3, #32
 8002338:	d009      	beq.n	800234e <UART_SetConfig+0x162>
 800233a:	2b20      	cmp	r3, #32
 800233c:	d810      	bhi.n	8002360 <UART_SetConfig+0x174>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <UART_SetConfig+0x15c>
 8002342:	2b10      	cmp	r3, #16
 8002344:	d006      	beq.n	8002354 <UART_SetConfig+0x168>
 8002346:	e00b      	b.n	8002360 <UART_SetConfig+0x174>
 8002348:	2300      	movs	r3, #0
 800234a:	77fb      	strb	r3, [r7, #31]
 800234c:	e0f1      	b.n	8002532 <UART_SetConfig+0x346>
 800234e:	2302      	movs	r3, #2
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	e0ee      	b.n	8002532 <UART_SetConfig+0x346>
 8002354:	2304      	movs	r3, #4
 8002356:	77fb      	strb	r3, [r7, #31]
 8002358:	e0eb      	b.n	8002532 <UART_SetConfig+0x346>
 800235a:	2308      	movs	r3, #8
 800235c:	77fb      	strb	r3, [r7, #31]
 800235e:	e0e8      	b.n	8002532 <UART_SetConfig+0x346>
 8002360:	2310      	movs	r3, #16
 8002362:	77fb      	strb	r3, [r7, #31]
 8002364:	e0e5      	b.n	8002532 <UART_SetConfig+0x346>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a57      	ldr	r2, [pc, #348]	; (80024c8 <UART_SetConfig+0x2dc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d120      	bne.n	80023b2 <UART_SetConfig+0x1c6>
 8002370:	4b52      	ldr	r3, [pc, #328]	; (80024bc <UART_SetConfig+0x2d0>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800237a:	2bc0      	cmp	r3, #192	; 0xc0
 800237c:	d013      	beq.n	80023a6 <UART_SetConfig+0x1ba>
 800237e:	2bc0      	cmp	r3, #192	; 0xc0
 8002380:	d814      	bhi.n	80023ac <UART_SetConfig+0x1c0>
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d009      	beq.n	800239a <UART_SetConfig+0x1ae>
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d810      	bhi.n	80023ac <UART_SetConfig+0x1c0>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <UART_SetConfig+0x1a8>
 800238e:	2b40      	cmp	r3, #64	; 0x40
 8002390:	d006      	beq.n	80023a0 <UART_SetConfig+0x1b4>
 8002392:	e00b      	b.n	80023ac <UART_SetConfig+0x1c0>
 8002394:	2300      	movs	r3, #0
 8002396:	77fb      	strb	r3, [r7, #31]
 8002398:	e0cb      	b.n	8002532 <UART_SetConfig+0x346>
 800239a:	2302      	movs	r3, #2
 800239c:	77fb      	strb	r3, [r7, #31]
 800239e:	e0c8      	b.n	8002532 <UART_SetConfig+0x346>
 80023a0:	2304      	movs	r3, #4
 80023a2:	77fb      	strb	r3, [r7, #31]
 80023a4:	e0c5      	b.n	8002532 <UART_SetConfig+0x346>
 80023a6:	2308      	movs	r3, #8
 80023a8:	77fb      	strb	r3, [r7, #31]
 80023aa:	e0c2      	b.n	8002532 <UART_SetConfig+0x346>
 80023ac:	2310      	movs	r3, #16
 80023ae:	77fb      	strb	r3, [r7, #31]
 80023b0:	e0bf      	b.n	8002532 <UART_SetConfig+0x346>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a45      	ldr	r2, [pc, #276]	; (80024cc <UART_SetConfig+0x2e0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d125      	bne.n	8002408 <UART_SetConfig+0x21c>
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <UART_SetConfig+0x2d0>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023ca:	d017      	beq.n	80023fc <UART_SetConfig+0x210>
 80023cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023d0:	d817      	bhi.n	8002402 <UART_SetConfig+0x216>
 80023d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d6:	d00b      	beq.n	80023f0 <UART_SetConfig+0x204>
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023dc:	d811      	bhi.n	8002402 <UART_SetConfig+0x216>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <UART_SetConfig+0x1fe>
 80023e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e6:	d006      	beq.n	80023f6 <UART_SetConfig+0x20a>
 80023e8:	e00b      	b.n	8002402 <UART_SetConfig+0x216>
 80023ea:	2300      	movs	r3, #0
 80023ec:	77fb      	strb	r3, [r7, #31]
 80023ee:	e0a0      	b.n	8002532 <UART_SetConfig+0x346>
 80023f0:	2302      	movs	r3, #2
 80023f2:	77fb      	strb	r3, [r7, #31]
 80023f4:	e09d      	b.n	8002532 <UART_SetConfig+0x346>
 80023f6:	2304      	movs	r3, #4
 80023f8:	77fb      	strb	r3, [r7, #31]
 80023fa:	e09a      	b.n	8002532 <UART_SetConfig+0x346>
 80023fc:	2308      	movs	r3, #8
 80023fe:	77fb      	strb	r3, [r7, #31]
 8002400:	e097      	b.n	8002532 <UART_SetConfig+0x346>
 8002402:	2310      	movs	r3, #16
 8002404:	77fb      	strb	r3, [r7, #31]
 8002406:	e094      	b.n	8002532 <UART_SetConfig+0x346>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a30      	ldr	r2, [pc, #192]	; (80024d0 <UART_SetConfig+0x2e4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d125      	bne.n	800245e <UART_SetConfig+0x272>
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <UART_SetConfig+0x2d0>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800241c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002420:	d017      	beq.n	8002452 <UART_SetConfig+0x266>
 8002422:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002426:	d817      	bhi.n	8002458 <UART_SetConfig+0x26c>
 8002428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242c:	d00b      	beq.n	8002446 <UART_SetConfig+0x25a>
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002432:	d811      	bhi.n	8002458 <UART_SetConfig+0x26c>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <UART_SetConfig+0x254>
 8002438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243c:	d006      	beq.n	800244c <UART_SetConfig+0x260>
 800243e:	e00b      	b.n	8002458 <UART_SetConfig+0x26c>
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
 8002444:	e075      	b.n	8002532 <UART_SetConfig+0x346>
 8002446:	2302      	movs	r3, #2
 8002448:	77fb      	strb	r3, [r7, #31]
 800244a:	e072      	b.n	8002532 <UART_SetConfig+0x346>
 800244c:	2304      	movs	r3, #4
 800244e:	77fb      	strb	r3, [r7, #31]
 8002450:	e06f      	b.n	8002532 <UART_SetConfig+0x346>
 8002452:	2308      	movs	r3, #8
 8002454:	77fb      	strb	r3, [r7, #31]
 8002456:	e06c      	b.n	8002532 <UART_SetConfig+0x346>
 8002458:	2310      	movs	r3, #16
 800245a:	77fb      	strb	r3, [r7, #31]
 800245c:	e069      	b.n	8002532 <UART_SetConfig+0x346>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <UART_SetConfig+0x2e8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d137      	bne.n	80024d8 <UART_SetConfig+0x2ec>
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <UART_SetConfig+0x2d0>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002476:	d017      	beq.n	80024a8 <UART_SetConfig+0x2bc>
 8002478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800247c:	d817      	bhi.n	80024ae <UART_SetConfig+0x2c2>
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	d00b      	beq.n	800249c <UART_SetConfig+0x2b0>
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002488:	d811      	bhi.n	80024ae <UART_SetConfig+0x2c2>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <UART_SetConfig+0x2aa>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d006      	beq.n	80024a2 <UART_SetConfig+0x2b6>
 8002494:	e00b      	b.n	80024ae <UART_SetConfig+0x2c2>
 8002496:	2300      	movs	r3, #0
 8002498:	77fb      	strb	r3, [r7, #31]
 800249a:	e04a      	b.n	8002532 <UART_SetConfig+0x346>
 800249c:	2302      	movs	r3, #2
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	e047      	b.n	8002532 <UART_SetConfig+0x346>
 80024a2:	2304      	movs	r3, #4
 80024a4:	77fb      	strb	r3, [r7, #31]
 80024a6:	e044      	b.n	8002532 <UART_SetConfig+0x346>
 80024a8:	2308      	movs	r3, #8
 80024aa:	77fb      	strb	r3, [r7, #31]
 80024ac:	e041      	b.n	8002532 <UART_SetConfig+0x346>
 80024ae:	2310      	movs	r3, #16
 80024b0:	77fb      	strb	r3, [r7, #31]
 80024b2:	e03e      	b.n	8002532 <UART_SetConfig+0x346>
 80024b4:	efff69f3 	.word	0xefff69f3
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40004800 	.word	0x40004800
 80024c8:	40004c00 	.word	0x40004c00
 80024cc:	40005000 	.word	0x40005000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	40007800 	.word	0x40007800
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a71      	ldr	r2, [pc, #452]	; (80026a4 <UART_SetConfig+0x4b8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d125      	bne.n	800252e <UART_SetConfig+0x342>
 80024e2:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <UART_SetConfig+0x4bc>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024f0:	d017      	beq.n	8002522 <UART_SetConfig+0x336>
 80024f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024f6:	d817      	bhi.n	8002528 <UART_SetConfig+0x33c>
 80024f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fc:	d00b      	beq.n	8002516 <UART_SetConfig+0x32a>
 80024fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002502:	d811      	bhi.n	8002528 <UART_SetConfig+0x33c>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <UART_SetConfig+0x324>
 8002508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800250c:	d006      	beq.n	800251c <UART_SetConfig+0x330>
 800250e:	e00b      	b.n	8002528 <UART_SetConfig+0x33c>
 8002510:	2300      	movs	r3, #0
 8002512:	77fb      	strb	r3, [r7, #31]
 8002514:	e00d      	b.n	8002532 <UART_SetConfig+0x346>
 8002516:	2302      	movs	r3, #2
 8002518:	77fb      	strb	r3, [r7, #31]
 800251a:	e00a      	b.n	8002532 <UART_SetConfig+0x346>
 800251c:	2304      	movs	r3, #4
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	e007      	b.n	8002532 <UART_SetConfig+0x346>
 8002522:	2308      	movs	r3, #8
 8002524:	77fb      	strb	r3, [r7, #31]
 8002526:	e004      	b.n	8002532 <UART_SetConfig+0x346>
 8002528:	2310      	movs	r3, #16
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e001      	b.n	8002532 <UART_SetConfig+0x346>
 800252e:	2310      	movs	r3, #16
 8002530:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253a:	d15a      	bne.n	80025f2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800253c:	7ffb      	ldrb	r3, [r7, #31]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d827      	bhi.n	8002592 <UART_SetConfig+0x3a6>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <UART_SetConfig+0x35c>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	0800256d 	.word	0x0800256d
 800254c:	08002575 	.word	0x08002575
 8002550:	0800257d 	.word	0x0800257d
 8002554:	08002593 	.word	0x08002593
 8002558:	08002583 	.word	0x08002583
 800255c:	08002593 	.word	0x08002593
 8002560:	08002593 	.word	0x08002593
 8002564:	08002593 	.word	0x08002593
 8002568:	0800258b 	.word	0x0800258b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800256c:	f7ff f944 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8002570:	61b8      	str	r0, [r7, #24]
        break;
 8002572:	e013      	b.n	800259c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002574:	f7ff f954 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002578:	61b8      	str	r0, [r7, #24]
        break;
 800257a:	e00f      	b.n	800259c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <UART_SetConfig+0x4c0>)
 800257e:	61bb      	str	r3, [r7, #24]
        break;
 8002580:	e00c      	b.n	800259c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002582:	f7ff f877 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8002586:	61b8      	str	r0, [r7, #24]
        break;
 8002588:	e008      	b.n	800259c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800258a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258e:	61bb      	str	r3, [r7, #24]
        break;
 8002590:	e004      	b.n	800259c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77bb      	strb	r3, [r7, #30]
        break;
 800259a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d074      	beq.n	800268c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	005a      	lsls	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	441a      	add	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	d916      	bls.n	80025ec <UART_SetConfig+0x400>
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d212      	bcs.n	80025ec <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f023 030f 	bic.w	r3, r3, #15
 80025ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	b29a      	uxth	r2, r3
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	4313      	orrs	r3, r2
 80025e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	89fa      	ldrh	r2, [r7, #14]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	e04f      	b.n	800268c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	77bb      	strb	r3, [r7, #30]
 80025f0:	e04c      	b.n	800268c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d828      	bhi.n	800264a <UART_SetConfig+0x45e>
 80025f8:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <UART_SetConfig+0x414>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002625 	.word	0x08002625
 8002604:	0800262d 	.word	0x0800262d
 8002608:	08002635 	.word	0x08002635
 800260c:	0800264b 	.word	0x0800264b
 8002610:	0800263b 	.word	0x0800263b
 8002614:	0800264b 	.word	0x0800264b
 8002618:	0800264b 	.word	0x0800264b
 800261c:	0800264b 	.word	0x0800264b
 8002620:	08002643 	.word	0x08002643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002624:	f7ff f8e8 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8002628:	61b8      	str	r0, [r7, #24]
        break;
 800262a:	e013      	b.n	8002654 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800262c:	f7ff f8f8 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002630:	61b8      	str	r0, [r7, #24]
        break;
 8002632:	e00f      	b.n	8002654 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <UART_SetConfig+0x4c0>)
 8002636:	61bb      	str	r3, [r7, #24]
        break;
 8002638:	e00c      	b.n	8002654 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800263a:	f7ff f81b 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 800263e:	61b8      	str	r0, [r7, #24]
        break;
 8002640:	e008      	b.n	8002654 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002646:	61bb      	str	r3, [r7, #24]
        break;
 8002648:	e004      	b.n	8002654 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	77bb      	strb	r3, [r7, #30]
        break;
 8002652:	bf00      	nop
    }

    if (pclk != 0U)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d018      	beq.n	800268c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	085a      	lsrs	r2, r3, #1
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	441a      	add	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d909      	bls.n	8002688 <UART_SetConfig+0x49c>
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d205      	bcs.n	8002688 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e001      	b.n	800268c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002698:	7fbb      	ldrb	r3, [r7, #30]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40007c00 	.word	0x40007c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	00f42400 	.word	0x00f42400

080026b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01a      	beq.n	80027c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ae:	d10a      	bne.n	80027c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]
  }
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002804:	f7fe f8b8 	bl	8000978 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b08      	cmp	r3, #8
 8002816:	d10e      	bne.n	8002836 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f817 	bl	800285a <UART_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e00d      	b.n	8002852 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b09c      	sub	sp, #112	; 0x70
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286a:	e0a5      	b.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	f000 80a1 	beq.w	80029b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fe f87f 	bl	8000978 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <UART_WaitOnFlagUntilTimeout+0x32>
 8002886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13e      	bne.n	800290a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800289a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e6      	bne.n	800288c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3308      	adds	r3, #8
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	663b      	str	r3, [r7, #96]	; 0x60
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3308      	adds	r3, #8
 80028dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028de:	64ba      	str	r2, [r7, #72]	; 0x48
 80028e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80028e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80028ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e5      	bne.n	80028be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e067      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d04f      	beq.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002926:	d147      	bne.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
 8002952:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e6      	bne.n	8002932 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3308      	adds	r3, #8
 800296a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	e853 3f00 	ldrex	r3, [r3]
 8002972:	613b      	str	r3, [r7, #16]
   return(result);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	66bb      	str	r3, [r7, #104]	; 0x68
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3308      	adds	r3, #8
 8002982:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002984:	623a      	str	r2, [r7, #32]
 8002986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	69f9      	ldr	r1, [r7, #28]
 800298a:	6a3a      	ldr	r2, [r7, #32]
 800298c:	e841 2300 	strex	r3, r2, [r1]
 8002990:	61bb      	str	r3, [r7, #24]
   return(result);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e5      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e010      	b.n	80029da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f43f af4a 	beq.w	800286c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3770      	adds	r7, #112	; 0x70
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	4d0d      	ldr	r5, [pc, #52]	; (8002a1c <__libc_init_array+0x38>)
 80029e8:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ea:	1b64      	subs	r4, r4, r5
 80029ec:	10a4      	asrs	r4, r4, #2
 80029ee:	2600      	movs	r6, #0
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	4d0b      	ldr	r5, [pc, #44]	; (8002a24 <__libc_init_array+0x40>)
 80029f6:	4c0c      	ldr	r4, [pc, #48]	; (8002a28 <__libc_init_array+0x44>)
 80029f8:	f000 f820 	bl	8002a3c <_init>
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	2600      	movs	r6, #0
 8002a02:	42a6      	cmp	r6, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0c:	4798      	blx	r3
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a16:	4798      	blx	r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08002a7c 	.word	0x08002a7c
 8002a20:	08002a7c 	.word	0x08002a7c
 8002a24:	08002a7c 	.word	0x08002a7c
 8002a28:	08002a80 	.word	0x08002a80

08002a2c <memset>:
 8002a2c:	4402      	add	r2, r0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d100      	bne.n	8002a36 <memset+0xa>
 8002a34:	4770      	bx	lr
 8002a36:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3a:	e7f9      	b.n	8002a30 <memset+0x4>

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
