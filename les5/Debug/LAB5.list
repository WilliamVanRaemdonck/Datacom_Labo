
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f4  080049f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f8  080049f8  000149f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080049fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  08004a70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004a70  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ee8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  00032f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00036290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027705  00000000  00000000  00037000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013116  00000000  00000000  0005e705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f28ea  00000000  00000000  0007181b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  00164158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048d4 	.word	0x080048d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080048d4 	.word	0x080048d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <_write>:

#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef xStatus;
	switch (file) {
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d003      	beq.n	80005c2 <_write+0x1a>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d015      	beq.n	80005ec <_write+0x44>
 80005c0:	e029      	b.n	8000616 <_write+0x6e>
	case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	481a      	ldr	r0, [pc, #104]	; (8000638 <_write+0x90>)
 80005ce:	f002 fd69 	bl	80030a4 <HAL_UART_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d024      	beq.n	8000626 <_write+0x7e>
			errno = EIO;
 80005dc:	f003 f9f2 	bl	80039c4 <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2205      	movs	r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
			return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e020      	b.n	800062e <_write+0x86>
		}
		break;
	case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <_write+0x90>)
 80005f8:	f002 fd54 	bl	80030a4 <HAL_UART_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d011      	beq.n	800062a <_write+0x82>
			errno = EIO;
 8000606:	f003 f9dd 	bl	80039c4 <__errno>
 800060a:	4603      	mov	r3, r0
 800060c:	2205      	movs	r2, #5
 800060e:	601a      	str	r2, [r3, #0]
			return -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	e00b      	b.n	800062e <_write+0x86>
		}
		break;
	default:
		errno = EBADF;
 8000616:	f003 f9d5 	bl	80039c4 <__errno>
 800061a:	4603      	mov	r3, r0
 800061c:	2209      	movs	r2, #9
 800061e:	601a      	str	r2, [r3, #0]
		return -1;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	e003      	b.n	800062e <_write+0x86>
		break;
 8000626:	bf00      	nop
 8000628:	e000      	b.n	800062c <_write+0x84>
		break;
 800062a:	bf00      	nop
	}
	return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000009c 	.word	0x2000009c

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000642:	f000 fdf4 	bl	800122e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000646:	f000 f8a1 	bl	800078c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064a:	f000 f95f 	bl	800090c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800064e:	f000 f92d 	bl	80008ac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t	slaveAdres = 0b00111010;
 8000652:	233a      	movs	r3, #58	; 0x3a
 8000654:	75fb      	strb	r3, [r7, #23]

	uint8_t	whoAmI = 0x0D;
 8000656:	230d      	movs	r3, #13
 8000658:	75bb      	strb	r3, [r7, #22]
	uint8_t OUT_X_MSB = 0x01;
 800065a:	2301      	movs	r3, #1
 800065c:	757b      	strb	r3, [r7, #21]
	uint8_t OUT_X_LSB = 0x02;
 800065e:	2302      	movs	r3, #2
 8000660:	753b      	strb	r3, [r7, #20]
	uint8_t OUT_Y_MSB = 0x03;
 8000662:	2303      	movs	r3, #3
 8000664:	74fb      	strb	r3, [r7, #19]
	uint8_t OUT_Y_LSB = 0x04;
 8000666:	2304      	movs	r3, #4
 8000668:	74bb      	strb	r3, [r7, #18]
	uint8_t OUT_Z_MSB = 0x05;
 800066a:	2305      	movs	r3, #5
 800066c:	747b      	strb	r3, [r7, #17]
	uint8_t OUT_Z_LSB = 0x06;
 800066e:	2306      	movs	r3, #6
 8000670:	743b      	strb	r3, [r7, #16]

	uint8_t	byteCount = 4;
 8000672:	2304      	movs	r3, #4
 8000674:	73fb      	strb	r3, [r7, #15]
	uint8_t *buffer;

	uint8_t input = 0x00;
 8000676:	2300      	movs	r3, #0
 8000678:	73bb      	strb	r3, [r7, #14]
	uint16_t accelX = 0x0000;
 800067a:	2300      	movs	r3, #0
 800067c:	81bb      	strh	r3, [r7, #12]
	uint16_t accelY = 0x0000;
 800067e:	2300      	movs	r3, #0
 8000680:	817b      	strh	r3, [r7, #10]
	uint16_t accelZ = 0x0000;
 8000682:	2300      	movs	r3, #0
 8000684:	813b      	strh	r3, [r7, #8]

	initI2C();
 8000686:	f000 fa21 	bl	8000acc <initI2C>

		//printf("%d\n\r", input);

		//HAL_Delay(1);

		input = I2C_readMem(slaveAdres, OUT_X_MSB, buffer, byteCount);
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	7d79      	ldrb	r1, [r7, #21]
 800068e:	7df8      	ldrb	r0, [r7, #23]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	f000 fb3b 	bl	8000d0c <I2C_readMem>
 8000696:	4603      	mov	r3, r0
 8000698:	73bb      	strb	r3, [r7, #14]
		accelX = input;
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	81bb      	strh	r3, [r7, #12]
		accelX = (accelX << 2);
 800069e:	89bb      	ldrh	r3, [r7, #12]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	81bb      	strh	r3, [r7, #12]
		input = I2C_readMem(slaveAdres, OUT_X_LSB, buffer, byteCount);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	7d39      	ldrb	r1, [r7, #20]
 80006a8:	7df8      	ldrb	r0, [r7, #23]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	f000 fb2e 	bl	8000d0c <I2C_readMem>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73bb      	strb	r3, [r7, #14]
		input &= 0b11000000;
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006ba:	73bb      	strb	r3, [r7, #14]
		input = (input >> 6);
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	099b      	lsrs	r3, r3, #6
 80006c0:	73bb      	strb	r3, [r7, #14]
		accelX |= input;
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	89bb      	ldrh	r3, [r7, #12]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	81bb      	strh	r3, [r7, #12]
		printf("X = %d\n\r", accelX);
 80006cc:	89bb      	ldrh	r3, [r7, #12]
 80006ce:	4619      	mov	r1, r3
 80006d0:	482a      	ldr	r0, [pc, #168]	; (800077c <main+0x140>)
 80006d2:	f003 f9a9 	bl	8003a28 <iprintf>

		input = I2C_readMem(slaveAdres, OUT_Y_MSB, buffer, byteCount);
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	7cf9      	ldrb	r1, [r7, #19]
 80006da:	7df8      	ldrb	r0, [r7, #23]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	f000 fb15 	bl	8000d0c <I2C_readMem>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73bb      	strb	r3, [r7, #14]
		accelY = input;
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	817b      	strh	r3, [r7, #10]
		accelY = (accelY << 2);
 80006ea:	897b      	ldrh	r3, [r7, #10]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	817b      	strh	r3, [r7, #10]
		input = I2C_readMem(slaveAdres, OUT_Y_LSB, buffer, byteCount);
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	7cb9      	ldrb	r1, [r7, #18]
 80006f4:	7df8      	ldrb	r0, [r7, #23]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	f000 fb08 	bl	8000d0c <I2C_readMem>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73bb      	strb	r3, [r7, #14]
		input &= 0b11000000;
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000706:	73bb      	strb	r3, [r7, #14]
		input = (input >> 6);
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	099b      	lsrs	r3, r3, #6
 800070c:	73bb      	strb	r3, [r7, #14]
		accelY |= input;
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	b29a      	uxth	r2, r3
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	4313      	orrs	r3, r2
 8000716:	817b      	strh	r3, [r7, #10]
		printf("Y = %d\n\r", accelY);
 8000718:	897b      	ldrh	r3, [r7, #10]
 800071a:	4619      	mov	r1, r3
 800071c:	4818      	ldr	r0, [pc, #96]	; (8000780 <main+0x144>)
 800071e:	f003 f983 	bl	8003a28 <iprintf>

		input = I2C_readMem(slaveAdres, OUT_Z_MSB, buffer, byteCount);
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	7c79      	ldrb	r1, [r7, #17]
 8000726:	7df8      	ldrb	r0, [r7, #23]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	f000 faef 	bl	8000d0c <I2C_readMem>
 800072e:	4603      	mov	r3, r0
 8000730:	73bb      	strb	r3, [r7, #14]
		accelZ = input;
 8000732:	7bbb      	ldrb	r3, [r7, #14]
 8000734:	813b      	strh	r3, [r7, #8]
		accelZ = (accelZ << 2);
 8000736:	893b      	ldrh	r3, [r7, #8]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	813b      	strh	r3, [r7, #8]
		input = I2C_readMem(slaveAdres, OUT_Z_LSB, buffer, byteCount);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	7c39      	ldrb	r1, [r7, #16]
 8000740:	7df8      	ldrb	r0, [r7, #23]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	f000 fae2 	bl	8000d0c <I2C_readMem>
 8000748:	4603      	mov	r3, r0
 800074a:	73bb      	strb	r3, [r7, #14]
		input &= 0b11000000;
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000752:	73bb      	strb	r3, [r7, #14]
		input = (input >> 6);
 8000754:	7bbb      	ldrb	r3, [r7, #14]
 8000756:	099b      	lsrs	r3, r3, #6
 8000758:	73bb      	strb	r3, [r7, #14]
		accelZ |= input;
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	b29a      	uxth	r2, r3
 800075e:	893b      	ldrh	r3, [r7, #8]
 8000760:	4313      	orrs	r3, r2
 8000762:	813b      	strh	r3, [r7, #8]
		printf("Z = %d\n\n\r", accelZ);
 8000764:	893b      	ldrh	r3, [r7, #8]
 8000766:	4619      	mov	r1, r3
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <main+0x148>)
 800076a:	f003 f95d 	bl	8003a28 <iprintf>

		printf("----------------------------------------\n\r");
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <main+0x14c>)
 8000770:	f003 f95a 	bl	8003a28 <iprintf>

		HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fd87 	bl	8001288 <HAL_Delay>
		input = I2C_readMem(slaveAdres, OUT_X_MSB, buffer, byteCount);
 800077a:	e786      	b.n	800068a <main+0x4e>
 800077c:	080048ec 	.word	0x080048ec
 8000780:	080048f8 	.word	0x080048f8
 8000784:	08004904 	.word	0x08004904
 8000788:	08004910 	.word	0x08004910

0800078c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0b4      	sub	sp, #208	; 0xd0
 8000790:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 f93c 	bl	8003a18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2284      	movs	r2, #132	; 0x84
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f92d 	bl	8003a18 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80007be:	f001 f847 	bl	8001850 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <SystemClock_Config+0x118>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <SystemClock_Config+0x118>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <SystemClock_Config+0x118>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <SystemClock_Config+0x11c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <SystemClock_Config+0x11c>)
 80007e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <SystemClock_Config+0x11c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 12;
 800080e:	230c      	movs	r3, #12
 8000810:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000814:	23c0      	movs	r3, #192	; 0xc0
 8000816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f870 	bl	8001910 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000836:	f000 fb1d 	bl	8000e74 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800083a:	f001 f819 	bl	8001870 <HAL_PWREx_EnableOverDrive>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 8000844:	f000 fb16 	bl	8000e74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800086a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800086e:	2106      	movs	r1, #6
 8000870:	4618      	mov	r0, r3
 8000872:	f001 faf1 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 800087c:	f000 fafa 	bl	8000e74 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fceb 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x110>
	{
		Error_Handler();
 8000898:	f000 faec 	bl	8000e74 <Error_Handler>
	}
}
 800089c:	bf00      	nop
 800089e:	37d0      	adds	r7, #208	; 0xd0
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART1_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART1_UART_Init+0x58>)
 80008f0:	f002 fb8a 	bl	8003008 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80008fa:	f000 fabb 	bl	8000e74 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000009c 	.word	0x2000009c
 8000908:	40011000 	.word	0x40011000

0800090c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a64      	ldr	r2, [pc, #400]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b62      	ldr	r3, [pc, #392]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a4c      	ldr	r2, [pc, #304]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a46      	ldr	r2, [pc, #280]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <MX_GPIO_Init+0x1ac>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, I2C_SCL_Pin|I2C_SDA_Pin|SPI_MOSI_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80009b8:	4840      	ldr	r0, [pc, #256]	; (8000abc <MX_GPIO_Init+0x1b0>)
 80009ba:	f000 ff2f 	bl	800181c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2102      	movs	r1, #2
 80009c2:	483f      	ldr	r0, [pc, #252]	; (8000ac0 <MX_GPIO_Init+0x1b4>)
 80009c4:	f000 ff2a 	bl	800181c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x1b8>)
 80009d0:	f000 ff24 	bl	800181c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
	GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80009d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009da:	2311      	movs	r3, #17
 80009dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4833      	ldr	r0, [pc, #204]	; (8000abc <MX_GPIO_Init+0x1b0>)
 80009ee:	f000 fd51 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT_RTC_Pin SPI_MISO_Pin */
	GPIO_InitStruct.Pin = INT_RTC_Pin|SPI_MISO_Pin;
 80009f2:	f244 0310 	movw	r3, #16400	; 0x4010
 80009f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	482d      	ldr	r0, [pc, #180]	; (8000abc <MX_GPIO_Init+0x1b0>)
 8000a08:	f000 fd44 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_TEMP_Pin */
	GPIO_InitStruct.Pin = INT_TEMP_Pin;
 8000a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(INT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4828      	ldr	r0, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x1b8>)
 8000a22:	f000 fd37 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_SCK_Pin */
	GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x1b4>)
 8000a3e:	f000 fd29 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_MMA1_Pin */
	GPIO_InitStruct.Pin = INT_MMA1_Pin;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(INT_MMA1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0x1b4>)
 8000a56:	f000 fd1d 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <MX_GPIO_Init+0x1b8>)
 8000a74:	f000 fd0e 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_MMA2_Pin */
	GPIO_InitStruct.Pin = INT_MMA2_Pin;
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(INT_MMA2_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <MX_GPIO_Init+0x1bc>)
 8000a8c:	f000 fd02 	bl	8001494 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8000a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0x1b0>)
 8000aaa:	f000 fcf3 	bl	8001494 <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40022000 	.word	0x40022000
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40021800 	.word	0x40021800

08000acc <initI2C>:

/* USER CODE BEGIN 4 */
void initI2C(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <initI2C+0x20>)
 8000ad8:	f000 fea0 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	4802      	ldr	r0, [pc, #8]	; (8000aec <initI2C+0x20>)
 8000ae4:	f000 fe9a 	bl	800181c <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020400 	.word	0x40020400

08000af0 <I2C_start>:


//I2C_start zal de start conditie op de bus plaatsen en kan ook gebruikt worden voor een "repeated start".
//Een start bit is als men de data lijn laag maakt als de kloklijn hoog is.
void I2C_start(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <I2C_start+0x4c>)
 8000afc:	f000 fe8e 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <I2C_start+0x4c>)
 8000b08:	f000 fe88 	bl	800181c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <I2C_start+0x4c>)
 8000b14:	f000 fe82 	bl	800181c <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <I2C_start+0x50>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f939 	bl	8000d94 <SysTickDelayCount>
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <I2C_start+0x4c>)
 8000b2a:	f000 fe77 	bl	800181c <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <I2C_start+0x50>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f92e 	bl	8000d94 <SysTickDelayCount>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	20000000 	.word	0x20000000

08000b44 <I2C_stop>:

//I2C_stop zal de stop conditie op de bus plaatsen.
//Een stop bit is als men de data lijn hoog maakt als de kloklijn hoog is.
void I2C_stop(void){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <I2C_stop+0x4c>)
 8000b50:	f000 fe64 	bl	800181c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <I2C_stop+0x4c>)
 8000b5c:	f000 fe5e 	bl	800181c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <I2C_stop+0x4c>)
 8000b68:	f000 fe58 	bl	800181c <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <I2C_stop+0x50>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f90f 	bl	8000d94 <SysTickDelayCount>
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <I2C_stop+0x4c>)
 8000b7e:	f000 fe4d 	bl	800181c <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <I2C_stop+0x50>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f904 	bl	8000d94 <SysTickDelayCount>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40020400 	.word	0x40020400
 8000b94:	20000000 	.word	0x20000000

08000b98 <I2C_write>:

//I2C_write zal 1 byte op de I2C bus plaatsen. Deze functie kan ook gebruikt worden om een slaveadres op de bus te plaatsen.
//De functie zal ook de ack binnen lezen en teruggeven (bij geldige ack op de bus geeft deze functie 0 terug)
uint8_t I2C_write(uint8_t data){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t shift = 0x00;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0b00000001;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	737b      	strb	r3, [r7, #13]
	uint8_t result = 0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	733b      	strb	r3, [r7, #12]
	uint8_t ack = 0x00;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72fb      	strb	r3, [r7, #11]

	//send input
	shift = reverse(data);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f917 	bl	8000de8 <reverse>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index = 0; index < 8; index++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73bb      	strb	r3, [r7, #14]
 8000bc2:	e02f      	b.n	8000c24 <I2C_write+0x8c>
		result = shift & mask;
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	7b7b      	ldrb	r3, [r7, #13]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	733b      	strb	r3, [r7, #12]
		if(result == 0x01){
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d106      	bne.n	8000be0 <I2C_write+0x48>
			HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	4828      	ldr	r0, [pc, #160]	; (8000c7c <I2C_write+0xe4>)
 8000bda:	f000 fe1f 	bl	800181c <HAL_GPIO_WritePin>
 8000bde:	e005      	b.n	8000bec <I2C_write+0x54>
		}
		else{
			HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4825      	ldr	r0, [pc, #148]	; (8000c7c <I2C_write+0xe4>)
 8000be8:	f000 fe18 	bl	800181c <HAL_GPIO_WritePin>
		}

		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4822      	ldr	r0, [pc, #136]	; (8000c7c <I2C_write+0xe4>)
 8000bf4:	f000 fe12 	bl	800181c <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <I2C_write+0xe8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f8c9 	bl	8000d94 <SysTickDelayCount>
		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	481c      	ldr	r0, [pc, #112]	; (8000c7c <I2C_write+0xe4>)
 8000c0a:	f000 fe07 	bl	800181c <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <I2C_write+0xe8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f8be 	bl	8000d94 <SysTickDelayCount>

		shift = (shift >> 1);	//shift right by one
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	085b      	lsrs	r3, r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index = 0; index < 8; index++){
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	3301      	adds	r3, #1
 8000c22:	73bb      	strb	r3, [r7, #14]
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	2b07      	cmp	r3, #7
 8000c28:	d9cc      	bls.n	8000bc4 <I2C_write+0x2c>
	}
	//ACK
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c30:	4812      	ldr	r0, [pc, #72]	; (8000c7c <I2C_write+0xe4>)
 8000c32:	f000 fdf3 	bl	800181c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <I2C_write+0xe4>)
 8000c3e:	f000 fded 	bl	800181c <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <I2C_write+0xe8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f8a4 	bl	8000d94 <SysTickDelayCount>

	ack = HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin);
 8000c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <I2C_write+0xe4>)
 8000c52:	f000 fdcb 	bl	80017ec <HAL_GPIO_ReadPin>
 8000c56:	4603      	mov	r3, r0
 8000c58:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <I2C_write+0xe4>)
 8000c62:	f000 fddb 	bl	800181c <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <I2C_write+0xe8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f892 	bl	8000d94 <SysTickDelayCount>

	return ack;
 8000c70:	7afb      	ldrb	r3, [r7, #11]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	20000000 	.word	0x20000000

08000c84 <I2C_read>:

//I2C_read zal 1 byte van de I2C bus lezen en al dan niet een ack of een nack terug sturen
//afhankelijk van het argument dat je meegeeft. (ack is 0, nack is 1)
uint8_t I2C_read(uint8_t ack){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
	uint8_t input = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]

	for(uint8_t index = 0; index < 8; index++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	73bb      	strb	r3, [r7, #14]
 8000c96:	e02c      	b.n	8000cf2 <I2C_read+0x6e>
		//clk high
		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9e:	4819      	ldr	r0, [pc, #100]	; (8000d04 <I2C_read+0x80>)
 8000ca0:	f000 fdbc 	bl	800181c <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <I2C_read+0x84>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f873 	bl	8000d94 <SysTickDelayCount>

		//1 on SDA?
		if(HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin)){
 8000cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb2:	4814      	ldr	r0, [pc, #80]	; (8000d04 <I2C_read+0x80>)
 8000cb4:	f000 fd9a 	bl	80017ec <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <I2C_read+0x44>
			//1
			input |= 0b00000001;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e003      	b.n	8000cd0 <I2C_read+0x4c>
		}
		else{
			//0
			input &= 0b11111110;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
		}
		//shift input reg
		input = (input << 1);
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]

		//clk low
		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <I2C_read+0x80>)
 8000cde:	f000 fd9d 	bl	800181c <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <I2C_read+0x84>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f854 	bl	8000d94 <SysTickDelayCount>
	for(uint8_t index = 0; index < 8; index++){
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	73bb      	strb	r3, [r7, #14]
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d9cf      	bls.n	8000c98 <I2C_read+0x14>

		//ack?d
	}
	return input;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40020400 	.word	0x40020400
 8000d08:	20000000 	.word	0x20000000

08000d0c <I2C_readMem>:

//I2C_readMem zal eerst de slave adreseren dan het register adres op de bus schrijven en na een repeated start
//het register lezen. De functie returned het aantal gelezen bytes.
uint8_t I2C_readMem(uint8_t slaveAdres, uint8_t memAdres, uint8_t * buffer, uint8_t byteCount){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	603a      	str	r2, [r7, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
	uint8_t input = 0x00;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
	uint8_t ack = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73bb      	strb	r3, [r7, #14]

	I2C_start();
 8000d2a:	f7ff fee1 	bl	8000af0 <I2C_start>

	ack = I2C_write(slaveAdres);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff31 	bl	8000b98 <I2C_write>
 8000d36:	4603      	mov	r3, r0
 8000d38:	73bb      	strb	r3, [r7, #14]
	SysTickDelayCount(delay1us);
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <I2C_readMem+0x84>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f828 	bl	8000d94 <SysTickDelayCount>

	ack = I2C_write(memAdres);
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff26 	bl	8000b98 <I2C_write>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73bb      	strb	r3, [r7, #14]
	SysTickDelayCount(delay1us);
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <I2C_readMem+0x84>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f81d 	bl	8000d94 <SysTickDelayCount>

	I2C_start();	//repeated start condition
 8000d5a:	f7ff fec9 	bl	8000af0 <I2C_start>

	ack = I2C_write(slaveAdres+1);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff17 	bl	8000b98 <I2C_write>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73bb      	strb	r3, [r7, #14]
	SysTickDelayCount(delay1us);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <I2C_readMem+0x84>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f80e 	bl	8000d94 <SysTickDelayCount>

	input = I2C_read(0x00);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff83 	bl	8000c84 <I2C_read>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73fb      	strb	r3, [r7, #15]

	I2C_stop();
 8000d82:	f7ff fedf 	bl	8000b44 <I2C_stop>

	return input;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000

08000d94 <SysTickDelayCount>:

void SysTickDelayCount(uint32_t ulCount){
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <SysTickDelayCount+0x48>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <SysTickDelayCount+0x48>)
 8000da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da6:	60d3      	str	r3, [r2, #12]
	DWT->LAR = 0xC5ACCE55;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <SysTickDelayCount+0x4c>)
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <SysTickDelayCount+0x50>)
 8000dac:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <SysTickDelayCount+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SysTickDelayCount+0x4c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <SysTickDelayCount+0x4c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6013      	str	r3, [r2, #0]

	while(DWT->CYCCNT < ulCount);
 8000dc2:	bf00      	nop
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SysTickDelayCount+0x4c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d8fa      	bhi.n	8000dc4 <SysTickDelayCount+0x30>
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000edf0 	.word	0xe000edf0
 8000de0:	e0001000 	.word	0xe0001000
 8000de4:	c5acce55 	.word	0xc5acce55

08000de8 <reverse>:


uint8_t reverse(uint8_t b) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	b25a      	sxtb	r2, r3
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	71fb      	strb	r3, [r7, #7]
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	109b      	asrs	r3, r3, #2
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	71fb      	strb	r3, [r7, #7]
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	105b      	asrs	r3, r3, #1
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	71fb      	strb	r3, [r7, #7]
	return b;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e62:	f000 f9f1 	bl	8001248 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40010000 	.word	0x40010000

08000e74 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e7c:	e7fe      	b.n	8000e7c <Error_Handler+0x8>
	...

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a25      	ldr	r2, [pc, #148]	; (8000f7c <HAL_UART_MspInit+0xb4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d144      	bne.n	8000f74 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_UART_MspInit+0xb8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <HAL_UART_MspInit+0xbc>)
 8000f4e:	f000 faa1 	bl	8001494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f64:	2307      	movs	r3, #7
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_UART_MspInit+0xc0>)
 8000f70:	f000 fa90 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2019      	movs	r0, #25
 8000fa2:	f000 fa4d 	bl	8001440 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f000 fa66 	bl	8001478 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_InitTick+0xa0>)
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_InitTick+0xa0>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_InitTick+0xa0>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4611      	mov	r1, r2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f918 	bl	8002204 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fd4:	f001 f902 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_InitTick+0xa4>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9b      	lsrs	r3, r3, #18
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_InitTick+0xa8>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_InitTick+0xac>)
 8000ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <HAL_InitTick+0xa8>)
 8000ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_InitTick+0xa8>)
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_InitTick+0xa8>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_InitTick+0xa8>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_InitTick+0xa8>)
 800100e:	f001 fd1b 	bl	8002a48 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_InitTick+0xa8>)
 800101a:	f001 fd77 	bl	8002b0c <HAL_TIM_Base_Start_IT>
 800101e:	4603      	mov	r3, r0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	431bde83 	.word	0x431bde83
 8001034:	20000120 	.word	0x20000120
 8001038:	40010000 	.word	0x40010000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800109a:	f001 fdaf 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000120 	.word	0x20000120

080010a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
	}

return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	605a      	str	r2, [r3, #4]
	return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f002 fc22 	bl	80039c4 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20050000 	.word	0x20050000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	20000090 	.word	0x20000090
 80011b4:	20000180 	.word	0x20000180

080011b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001206:	f7ff ffd7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f002 fbe1 	bl	80039d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff fa15 	bl	800063c <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001220:	080049fc 	.word	0x080049fc
  ldr r2, =_sbss
 8001224:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001228:	20000180 	.word	0x20000180

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f8f9 	bl	800142a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff fea7 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fe1f 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000000c 	.word	0x2000000c
 800126c:	2000016c 	.word	0x2000016c

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000016c 	.word	0x2000016c

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff4c 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001452:	f7ff ff61 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff ffb1 	bl	80013c4 <NVIC_EncodePriority>
 8001462:	4602      	mov	r2, r0
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff80 	bl	8001370 <__NVIC_SetPriority>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff54 	bl	8001334 <__NVIC_EnableIRQ>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e175      	b.n	80017a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 8164 	bne.w	800179a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x56>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80be 	beq.w	800179a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_GPIO_Init+0x324>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <HAL_GPIO_Init+0x324>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_GPIO_Init+0x324>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001636:	4a61      	ldr	r2, [pc, #388]	; (80017bc <HAL_GPIO_Init+0x328>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_GPIO_Init+0x32c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d037      	beq.n	80016d2 <HAL_GPIO_Init+0x23e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_GPIO_Init+0x330>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d031      	beq.n	80016ce <HAL_GPIO_Init+0x23a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a56      	ldr	r2, [pc, #344]	; (80017c8 <HAL_GPIO_Init+0x334>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x236>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_Init+0x338>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x232>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x33c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x22e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a53      	ldr	r2, [pc, #332]	; (80017d4 <HAL_GPIO_Init+0x340>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x22a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x344>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x226>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x348>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x222>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x34c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x21e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x350>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x21a>
 80016aa:	2309      	movs	r3, #9
 80016ac:	e012      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ae:	230a      	movs	r3, #10
 80016b0:	e010      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016b2:	2308      	movs	r3, #8
 80016b4:	e00e      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x240>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x328>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_GPIO_Init+0x354>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_GPIO_Init+0x354>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_GPIO_Init+0x354>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_GPIO_Init+0x354>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae86 	bls.w	80014b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40022400 	.word	0x40022400
 80017e8:	40013c00 	.word	0x40013c00

080017ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e001      	b.n	800180e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000

08001870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_PWREx_EnableOverDrive+0x98>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_PWREx_EnableOverDrive+0x98>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_PWREx_EnableOverDrive+0x98>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189e:	f7ff fce7 	bl	8001270 <HAL_GetTick>
 80018a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018a4:	e009      	b.n	80018ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018a6:	f7ff fce3 	bl	8001270 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b4:	d901      	bls.n	80018ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e022      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d1ee      	bne.n	80018a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d4:	f7ff fccc 	bl	8001270 <HAL_GetTick>
 80018d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018da:	e009      	b.n	80018f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018dc:	f7ff fcc8 	bl	8001270 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ea:	d901      	bls.n	80018f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e007      	b.n	8001900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018fc:	d1ee      	bne.n	80018dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e291      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 8087 	beq.w	8001a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	d00c      	beq.n	800195a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001940:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d112      	bne.n	8001972 <HAL_RCC_OscConfig+0x62>
 800194c:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001958:	d10b      	bne.n	8001972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195a:	4b8d      	ldr	r3, [pc, #564]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d06c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x130>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d168      	bne.n	8001a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e26b      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x7a>
 800197c:	4b84      	ldr	r3, [pc, #528]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a83      	ldr	r2, [pc, #524]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e02e      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x9c>
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7e      	ldr	r2, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7b      	ldr	r2, [pc, #492]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a75      	ldr	r2, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xd8>
 80019d0:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6b      	ldr	r2, [pc, #428]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fc3e 	bl	8001270 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fc3a 	bl	8001270 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e21f      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fc2a 	bl	8001270 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fc26 	bl	8001270 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e20b      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x110>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d069      	beq.n	8001b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4e:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x190>
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1df      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	493d      	ldr	r1, [pc, #244]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e040      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d023      	beq.n	8001af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fbdc 	bl	8001270 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff fbd8 	bl	8001270 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1bd      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
 8001aee:	e018      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fbb8 	bl	8001270 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fbb4 	bl	8001270 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e199      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d038      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d019      	beq.n	8001b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7ff fb95 	bl	8001270 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fb91 	bl	8001270 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e176      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x23a>
 8001b68:	e01a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb7b 	bl	8001270 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fb77 	bl	8001270 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d903      	bls.n	8001b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e15c      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
 8001b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b91      	ldr	r3, [pc, #580]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a4 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a87      	ldr	r2, [pc, #540]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd6:	4b82      	ldr	r3, [pc, #520]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7e      	ldr	r2, [pc, #504]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb3f 	bl	8001270 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7ff fb3b 	bl	8001270 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e120      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4d0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x31a>
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a6e      	ldr	r2, [pc, #440]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	e02d      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x33c>
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a69      	ldr	r2, [pc, #420]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4a66      	ldr	r2, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4a:	e01c      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x35e>
 8001c54:	4b61      	ldr	r3, [pc, #388]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a60      	ldr	r2, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x376>
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a5a      	ldr	r2, [pc, #360]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff faef 	bl	8001270 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff faeb 	bl	8001270 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0ce      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ee      	beq.n	8001c96 <HAL_RCC_OscConfig+0x386>
 8001cb8:	e014      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff fad9 	bl	8001270 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff fad5 	bl	8001270 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ee      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a4 	beq.w	8001e48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d06b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d149      	bne.n	8001da8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a30      	ldr	r2, [pc, #192]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff faa6 	bl	8001270 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff faa2 	bl	8001270 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e087      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fa76 	bl	8001270 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff fa72 	bl	8001270 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e057      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x478>
 8001da6:	e04f      	b.n	8001e48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff fa5c 	bl	8001270 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff fa58 	bl	8001270 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e03d      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4ac>
 8001dda:	e035      	b.n	8001e48 <HAL_RCC_OscConfig+0x538>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x544>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d028      	beq.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d121      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d0      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0b8      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b50      	ldr	r3, [pc, #320]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	494d      	ldr	r1, [pc, #308]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d040      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e07f      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e073      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06b      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f4c:	f7ff f990 	bl	8001270 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff f98c 	bl	8001270 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e053      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d210      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 020f 	bic.w	r2, r3, #15
 8001f92:	4922      	ldr	r1, [pc, #136]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e032      	b.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4916      	ldr	r1, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	f000 f821 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	490a      	ldr	r1, [pc, #40]	; (8002024 <HAL_RCC_ClockConfig+0x1cc>)
 8001ffc:	5ccb      	ldrb	r3, [r1, r3]
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1d0>)
 8002004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1d4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe ffbe 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00
 8002020:	40023800 	.word	0x40023800
 8002024:	0800493c 	.word	0x0800493c
 8002028:	20000004 	.word	0x20000004
 800202c:	20000008 	.word	0x20000008

08002030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002036:	2100      	movs	r1, #0
 8002038:	6079      	str	r1, [r7, #4]
 800203a:	2100      	movs	r1, #0
 800203c:	60f9      	str	r1, [r7, #12]
 800203e:	2100      	movs	r1, #0
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002042:	2100      	movs	r1, #0
 8002044:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002046:	4952      	ldr	r1, [pc, #328]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 8002048:	6889      	ldr	r1, [r1, #8]
 800204a:	f001 010c 	and.w	r1, r1, #12
 800204e:	2908      	cmp	r1, #8
 8002050:	d00d      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x3e>
 8002052:	2908      	cmp	r1, #8
 8002054:	f200 8094 	bhi.w	8002180 <HAL_RCC_GetSysClockFreq+0x150>
 8002058:	2900      	cmp	r1, #0
 800205a:	d002      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x32>
 800205c:	2904      	cmp	r1, #4
 800205e:	d003      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x38>
 8002060:	e08e      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_RCC_GetSysClockFreq+0x164>)
 8002064:	60bb      	str	r3, [r7, #8]
      break;
 8002066:	e08e      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002068:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_RCC_GetSysClockFreq+0x168>)
 800206a:	60bb      	str	r3, [r7, #8]
      break;
 800206c:	e08b      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800206e:	4948      	ldr	r1, [pc, #288]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 8002070:	6849      	ldr	r1, [r1, #4]
 8002072:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002076:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002078:	4945      	ldr	r1, [pc, #276]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 800207a:	6849      	ldr	r1, [r1, #4]
 800207c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002080:	2900      	cmp	r1, #0
 8002082:	d024      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002084:	4942      	ldr	r1, [pc, #264]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 8002086:	6849      	ldr	r1, [r1, #4]
 8002088:	0989      	lsrs	r1, r1, #6
 800208a:	4608      	mov	r0, r1
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002094:	f04f 0500 	mov.w	r5, #0
 8002098:	ea00 0204 	and.w	r2, r0, r4
 800209c:	ea01 0305 	and.w	r3, r1, r5
 80020a0:	493d      	ldr	r1, [pc, #244]	; (8002198 <HAL_RCC_GetSysClockFreq+0x168>)
 80020a2:	fb01 f003 	mul.w	r0, r1, r3
 80020a6:	2100      	movs	r1, #0
 80020a8:	fb01 f102 	mul.w	r1, r1, r2
 80020ac:	1844      	adds	r4, r0, r1
 80020ae:	493a      	ldr	r1, [pc, #232]	; (8002198 <HAL_RCC_GetSysClockFreq+0x168>)
 80020b0:	fba2 0101 	umull	r0, r1, r2, r1
 80020b4:	1863      	adds	r3, r4, r1
 80020b6:	4619      	mov	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	f7fe f8f6 	bl	80002b0 <__aeabi_uldivmod>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4613      	mov	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e04a      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	099b      	lsrs	r3, r3, #6
 80020d4:	461a      	mov	r2, r3
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	ea02 0400 	and.w	r4, r2, r0
 80020e6:	ea03 0501 	and.w	r5, r3, r1
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	014b      	lsls	r3, r1, #5
 80020f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020fc:	0142      	lsls	r2, r0, #5
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	1b00      	subs	r0, r0, r4
 8002104:	eb61 0105 	sbc.w	r1, r1, r5
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	018b      	lsls	r3, r1, #6
 8002112:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002116:	0182      	lsls	r2, r0, #6
 8002118:	1a12      	subs	r2, r2, r0
 800211a:	eb63 0301 	sbc.w	r3, r3, r1
 800211e:	f04f 0000 	mov.w	r0, #0
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	00d9      	lsls	r1, r3, #3
 8002128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800212c:	00d0      	lsls	r0, r2, #3
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	1912      	adds	r2, r2, r4
 8002134:	eb45 0303 	adc.w	r3, r5, r3
 8002138:	f04f 0000 	mov.w	r0, #0
 800213c:	f04f 0100 	mov.w	r1, #0
 8002140:	0299      	lsls	r1, r3, #10
 8002142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002146:	0290      	lsls	r0, r2, #10
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	f7fe f8aa 	bl	80002b0 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_RCC_GetSysClockFreq+0x160>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	3301      	adds	r3, #1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	60bb      	str	r3, [r7, #8]
      break;
 800217e:	e002      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_GetSysClockFreq+0x164>)
 8002182:	60bb      	str	r3, [r7, #8]
      break;
 8002184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002186:	68bb      	ldr	r3, [r7, #8]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	00f42400 	.word	0x00f42400
 8002198:	017d7840 	.word	0x017d7840

0800219c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff fff0 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a9b      	lsrs	r3, r3, #10
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	0800494c 	.word	0x0800494c

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffdc 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0b5b      	lsrs	r3, r3, #13
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	0800494c 	.word	0x0800494c

08002204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	220f      	movs	r2, #15
 8002212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_RCC_GetClockConfig+0x5c>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCC_GetClockConfig+0x5c>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_RCC_GetClockConfig+0x5c>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_GetClockConfig+0x5c>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	08db      	lsrs	r3, r3, #3
 800223e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_RCC_GetClockConfig+0x60>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40023c00 	.word	0x40023c00

08002268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d012      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a68      	ldr	r2, [pc, #416]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800229a:	6093      	str	r3, [r2, #8]
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	4964      	ldr	r1, [pc, #400]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d017      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c2:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d0:	4959      	ldr	r1, [pc, #356]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022e0:	d101      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d017      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022fe:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	494a      	ldr	r1, [pc, #296]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231c:	d101      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800233a:	2301      	movs	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 808b 	beq.w	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	4a39      	ldr	r2, [pc, #228]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6413      	str	r3, [r2, #64]	; 0x40
 8002358:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a34      	ldr	r2, [pc, #208]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002370:	f7fe ff7e 	bl	8001270 <HAL_GetTick>
 8002374:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe ff7a 	bl	8001270 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e357      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d035      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d02e      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d114      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe ff42 	bl	8001270 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	e00a      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe ff3e 	bl	8001270 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e319      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ee      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800241e:	d111      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800242e:	400b      	ands	r3, r1
 8002430:	4901      	ldr	r1, [pc, #4]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
 8002436:	e00b      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000
 8002440:	0ffffcff 	.word	0x0ffffcff
 8002444:	4bb1      	ldr	r3, [pc, #708]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4ab0      	ldr	r2, [pc, #704]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800244e:	6093      	str	r3, [r2, #8]
 8002450:	4bae      	ldr	r3, [pc, #696]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245c:	49ab      	ldr	r1, [pc, #684]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d010      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800246e:	4ba7      	ldr	r3, [pc, #668]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002474:	4aa5      	ldr	r2, [pc, #660]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800247e:	4ba3      	ldr	r3, [pc, #652]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002480:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	49a0      	ldr	r1, [pc, #640]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800249c:	4b9b      	ldr	r3, [pc, #620]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024aa:	4998      	ldr	r1, [pc, #608]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024be:	4b93      	ldr	r3, [pc, #588]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024cc:	498f      	ldr	r1, [pc, #572]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e0:	4b8a      	ldr	r3, [pc, #552]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ee:	4987      	ldr	r1, [pc, #540]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002502:	4b82      	ldr	r3, [pc, #520]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	497e      	ldr	r1, [pc, #504]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002524:	4b79      	ldr	r3, [pc, #484]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4976      	ldr	r1, [pc, #472]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002546:	4b71      	ldr	r3, [pc, #452]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f023 020c 	bic.w	r2, r3, #12
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002554:	496d      	ldr	r1, [pc, #436]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002568:	4b68      	ldr	r3, [pc, #416]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4965      	ldr	r1, [pc, #404]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800258a:	4b60      	ldr	r3, [pc, #384]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	495c      	ldr	r1, [pc, #368]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	4954      	ldr	r1, [pc, #336]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025ce:	4b4f      	ldr	r3, [pc, #316]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	494b      	ldr	r1, [pc, #300]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025f0:	4b46      	ldr	r3, [pc, #280]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	4943      	ldr	r1, [pc, #268]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002612:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002620:	493a      	ldr	r1, [pc, #232]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002634:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002642:	4932      	ldr	r1, [pc, #200]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002664:	4929      	ldr	r1, [pc, #164]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002674:	d101      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	4919      	ldr	r1, [pc, #100]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c8:	4910      	ldr	r1, [pc, #64]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d006      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80d9 	beq.w	8002896 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fdbe 	bl	8001270 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026f6:	e00b      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026f8:	f7fe fdba 	bl	8001270 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d904      	bls.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e197      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002710:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ed      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11d      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800273e:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002744:	0e1b      	lsrs	r3, r3, #24
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	019a      	lsls	r2, r3, #6
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	071b      	lsls	r3, r3, #28
 8002764:	4957      	ldr	r1, [pc, #348]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02e      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002796:	d129      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002798:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ac:	0f1b      	lsrs	r3, r3, #28
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	019a      	lsls	r2, r3, #6
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	431a      	orrs	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	071b      	lsls	r3, r3, #28
 80027cc:	493d      	ldr	r1, [pc, #244]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027da:	f023 021f 	bic.w	r2, r3, #31
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	3b01      	subs	r3, #1
 80027e4:	4937      	ldr	r1, [pc, #220]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fe:	0e1b      	lsrs	r3, r3, #24
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	0f1b      	lsrs	r3, r3, #28
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	019a      	lsls	r2, r3, #6
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	431a      	orrs	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	431a      	orrs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	071b      	lsls	r3, r3, #28
 800282c:	4925      	ldr	r1, [pc, #148]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	019a      	lsls	r2, r3, #6
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	061b      	lsls	r3, r3, #24
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	071b      	lsls	r3, r3, #28
 800285c:	4919      	ldr	r1, [pc, #100]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800286e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fcfe 	bl	8001270 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002878:	f7fe fcfa 	bl	8001270 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0d7      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 80cd 	bne.w	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028aa:	f7fe fce1 	bl	8001270 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028b2:	f7fe fcdd 	bl	8001270 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d903      	bls.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0ba      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80028c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d4:	d0ed      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x682>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d02e      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d12a      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	0f1b      	lsrs	r3, r3, #28
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	019a      	lsls	r2, r3, #6
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	041b      	lsls	r3, r3, #16
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	061b      	lsls	r3, r3, #24
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	071b      	lsls	r3, r3, #28
 8002932:	4944      	ldr	r1, [pc, #272]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800293a:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800293c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002940:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	493d      	ldr	r1, [pc, #244]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d022      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002968:	d11d      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	0e1b      	lsrs	r3, r3, #24
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002978:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	0f1b      	lsrs	r3, r3, #28
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	019a      	lsls	r2, r3, #6
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	431a      	orrs	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	061b      	lsls	r3, r3, #24
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	071b      	lsls	r3, r3, #28
 800299e:	4929      	ldr	r1, [pc, #164]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	0e1b      	lsrs	r3, r3, #24
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	019a      	lsls	r2, r3, #6
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	4917      	ldr	r1, [pc, #92]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	4911      	ldr	r1, [pc, #68]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a10:	f7fe fc2e 	bl	8001270 <HAL_GetTick>
 8002a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a18:	f7fe fc2a 	bl	8001270 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e007      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a36:	d1ef      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e049      	b.n	8002aee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f841 	bl	8002af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 fa00 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d001      	beq.n	8002b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e054      	b.n	8002bce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d022      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4e:	d01d      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d018      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_TIM_Base_Start_IT+0xe0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x80>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d115      	bne.n	8002bb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_TIM_Base_Start_IT+0xec>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d015      	beq.n	8002bca <HAL_TIM_Base_Start_IT+0xbe>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d011      	beq.n	8002bca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40001800 	.word	0x40001800
 8002bf8:	00010007 	.word	0x00010007

08002bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0202 	mvn.w	r2, #2
 8002c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f905 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8f7 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f908 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0204 	mvn.w	r2, #4
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f8db 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8cd 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f8de 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0208 	mvn.w	r2, #8
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8b1 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8a3 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f8b4 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0210 	mvn.w	r2, #16
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f887 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f879 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f88a 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0201 	mvn.w	r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe f868 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f91a 	bl	8002fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	d10e      	bne.n	8002dda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f90d 	bl	8002ff4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d10e      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d107      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f838 	bl	8002e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d10e      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d107      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0220 	mvn.w	r2, #32
 8002e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8cd 	bl	8002fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d00f      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a3d      	ldr	r2, [pc, #244]	; (8002fa4 <TIM_Base_SetConfig+0x118>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3c      	ldr	r2, [pc, #240]	; (8002fa8 <TIM_Base_SetConfig+0x11c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <TIM_Base_SetConfig+0x120>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3a      	ldr	r2, [pc, #232]	; (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d027      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <TIM_Base_SetConfig+0x118>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d023      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <TIM_Base_SetConfig+0x11c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <TIM_Base_SetConfig+0x120>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d017      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <TIM_Base_SetConfig+0x128>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <TIM_Base_SetConfig+0x12c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <TIM_Base_SetConfig+0x130>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <TIM_Base_SetConfig+0x134>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <TIM_Base_SetConfig+0x138>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <TIM_Base_SetConfig+0x13c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <TIM_Base_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0xf8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	615a      	str	r2, [r3, #20]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40000c00 	.word	0x40000c00
 8002fb0:	40010400 	.word	0x40010400
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	40001800 	.word	0x40001800
 8002fc4:	40001c00 	.word	0x40001c00
 8002fc8:	40002000 	.word	0x40002000

08002fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e040      	b.n	800309c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd ff4c 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f8c0 	bl	80031cc <UART_SetConfig>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e022      	b.n	800309c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb16 	bl	8003690 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fb9d 	bl	80037d4 <UART_CheckIdleState>
 800309a:	4603      	mov	r3, r0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	f040 8081 	bne.w	80031c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_UART_Transmit+0x26>
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e079      	b.n	80031c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Transmit+0x38>
 80030d8:	2302      	movs	r3, #2
 80030da:	e072      	b.n	80031c2 <HAL_UART_Transmit+0x11e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2221      	movs	r2, #33	; 0x21
 80030f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f2:	f7fe f8bd 	bl	8001270 <HAL_GetTick>
 80030f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	88fa      	ldrh	r2, [r7, #6]
 80030fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003110:	d108      	bne.n	8003124 <HAL_UART_Transmit+0x80>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d104      	bne.n	8003124 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e003      	b.n	800312c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003134:	e02c      	b.n	8003190 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fb7a 	bl	800383a <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e038      	b.n	80031c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3302      	adds	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e007      	b.n	800317e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	3301      	adds	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1cc      	bne.n	8003136 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fb47 	bl	800383a <UART_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e005      	b.n	80031c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4ba7      	ldr	r3, [pc, #668]	; (8003494 <UART_SetConfig+0x2c8>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	6979      	ldr	r1, [r7, #20]
 8003200:	430b      	orrs	r3, r1
 8003202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a95      	ldr	r2, [pc, #596]	; (8003498 <UART_SetConfig+0x2cc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d120      	bne.n	800328a <UART_SetConfig+0xbe>
 8003248:	4b94      	ldr	r3, [pc, #592]	; (800349c <UART_SetConfig+0x2d0>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b03      	cmp	r3, #3
 8003254:	d816      	bhi.n	8003284 <UART_SetConfig+0xb8>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x90>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	0800326d 	.word	0x0800326d
 8003260:	08003279 	.word	0x08003279
 8003264:	08003273 	.word	0x08003273
 8003268:	0800327f 	.word	0x0800327f
 800326c:	2301      	movs	r3, #1
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e14f      	b.n	8003512 <UART_SetConfig+0x346>
 8003272:	2302      	movs	r3, #2
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e14c      	b.n	8003512 <UART_SetConfig+0x346>
 8003278:	2304      	movs	r3, #4
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e149      	b.n	8003512 <UART_SetConfig+0x346>
 800327e:	2308      	movs	r3, #8
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e146      	b.n	8003512 <UART_SetConfig+0x346>
 8003284:	2310      	movs	r3, #16
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e143      	b.n	8003512 <UART_SetConfig+0x346>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a84      	ldr	r2, [pc, #528]	; (80034a0 <UART_SetConfig+0x2d4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d132      	bne.n	80032fa <UART_SetConfig+0x12e>
 8003294:	4b81      	ldr	r3, [pc, #516]	; (800349c <UART_SetConfig+0x2d0>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d828      	bhi.n	80032f4 <UART_SetConfig+0x128>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0xdc>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032dd 	.word	0x080032dd
 80032ac:	080032f5 	.word	0x080032f5
 80032b0:	080032f5 	.word	0x080032f5
 80032b4:	080032f5 	.word	0x080032f5
 80032b8:	080032e9 	.word	0x080032e9
 80032bc:	080032f5 	.word	0x080032f5
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	080032f5 	.word	0x080032f5
 80032c8:	080032e3 	.word	0x080032e3
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032f5 	.word	0x080032f5
 80032d8:	080032ef 	.word	0x080032ef
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e117      	b.n	8003512 <UART_SetConfig+0x346>
 80032e2:	2302      	movs	r3, #2
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e114      	b.n	8003512 <UART_SetConfig+0x346>
 80032e8:	2304      	movs	r3, #4
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e111      	b.n	8003512 <UART_SetConfig+0x346>
 80032ee:	2308      	movs	r3, #8
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e10e      	b.n	8003512 <UART_SetConfig+0x346>
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e10b      	b.n	8003512 <UART_SetConfig+0x346>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a69      	ldr	r2, [pc, #420]	; (80034a4 <UART_SetConfig+0x2d8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d120      	bne.n	8003346 <UART_SetConfig+0x17a>
 8003304:	4b65      	ldr	r3, [pc, #404]	; (800349c <UART_SetConfig+0x2d0>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800330e:	2b30      	cmp	r3, #48	; 0x30
 8003310:	d013      	beq.n	800333a <UART_SetConfig+0x16e>
 8003312:	2b30      	cmp	r3, #48	; 0x30
 8003314:	d814      	bhi.n	8003340 <UART_SetConfig+0x174>
 8003316:	2b20      	cmp	r3, #32
 8003318:	d009      	beq.n	800332e <UART_SetConfig+0x162>
 800331a:	2b20      	cmp	r3, #32
 800331c:	d810      	bhi.n	8003340 <UART_SetConfig+0x174>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <UART_SetConfig+0x15c>
 8003322:	2b10      	cmp	r3, #16
 8003324:	d006      	beq.n	8003334 <UART_SetConfig+0x168>
 8003326:	e00b      	b.n	8003340 <UART_SetConfig+0x174>
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e0f1      	b.n	8003512 <UART_SetConfig+0x346>
 800332e:	2302      	movs	r3, #2
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e0ee      	b.n	8003512 <UART_SetConfig+0x346>
 8003334:	2304      	movs	r3, #4
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e0eb      	b.n	8003512 <UART_SetConfig+0x346>
 800333a:	2308      	movs	r3, #8
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e0e8      	b.n	8003512 <UART_SetConfig+0x346>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e0e5      	b.n	8003512 <UART_SetConfig+0x346>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a57      	ldr	r2, [pc, #348]	; (80034a8 <UART_SetConfig+0x2dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d120      	bne.n	8003392 <UART_SetConfig+0x1c6>
 8003350:	4b52      	ldr	r3, [pc, #328]	; (800349c <UART_SetConfig+0x2d0>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800335a:	2bc0      	cmp	r3, #192	; 0xc0
 800335c:	d013      	beq.n	8003386 <UART_SetConfig+0x1ba>
 800335e:	2bc0      	cmp	r3, #192	; 0xc0
 8003360:	d814      	bhi.n	800338c <UART_SetConfig+0x1c0>
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x1ae>
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d810      	bhi.n	800338c <UART_SetConfig+0x1c0>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <UART_SetConfig+0x1a8>
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d006      	beq.n	8003380 <UART_SetConfig+0x1b4>
 8003372:	e00b      	b.n	800338c <UART_SetConfig+0x1c0>
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e0cb      	b.n	8003512 <UART_SetConfig+0x346>
 800337a:	2302      	movs	r3, #2
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e0c8      	b.n	8003512 <UART_SetConfig+0x346>
 8003380:	2304      	movs	r3, #4
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e0c5      	b.n	8003512 <UART_SetConfig+0x346>
 8003386:	2308      	movs	r3, #8
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e0c2      	b.n	8003512 <UART_SetConfig+0x346>
 800338c:	2310      	movs	r3, #16
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e0bf      	b.n	8003512 <UART_SetConfig+0x346>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a45      	ldr	r2, [pc, #276]	; (80034ac <UART_SetConfig+0x2e0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d125      	bne.n	80033e8 <UART_SetConfig+0x21c>
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <UART_SetConfig+0x2d0>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033aa:	d017      	beq.n	80033dc <UART_SetConfig+0x210>
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b0:	d817      	bhi.n	80033e2 <UART_SetConfig+0x216>
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b6:	d00b      	beq.n	80033d0 <UART_SetConfig+0x204>
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d811      	bhi.n	80033e2 <UART_SetConfig+0x216>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <UART_SetConfig+0x1fe>
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d006      	beq.n	80033d6 <UART_SetConfig+0x20a>
 80033c8:	e00b      	b.n	80033e2 <UART_SetConfig+0x216>
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e0a0      	b.n	8003512 <UART_SetConfig+0x346>
 80033d0:	2302      	movs	r3, #2
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e09d      	b.n	8003512 <UART_SetConfig+0x346>
 80033d6:	2304      	movs	r3, #4
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e09a      	b.n	8003512 <UART_SetConfig+0x346>
 80033dc:	2308      	movs	r3, #8
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e097      	b.n	8003512 <UART_SetConfig+0x346>
 80033e2:	2310      	movs	r3, #16
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e094      	b.n	8003512 <UART_SetConfig+0x346>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a30      	ldr	r2, [pc, #192]	; (80034b0 <UART_SetConfig+0x2e4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d125      	bne.n	800343e <UART_SetConfig+0x272>
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <UART_SetConfig+0x2d0>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003400:	d017      	beq.n	8003432 <UART_SetConfig+0x266>
 8003402:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003406:	d817      	bhi.n	8003438 <UART_SetConfig+0x26c>
 8003408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340c:	d00b      	beq.n	8003426 <UART_SetConfig+0x25a>
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d811      	bhi.n	8003438 <UART_SetConfig+0x26c>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <UART_SetConfig+0x254>
 8003418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341c:	d006      	beq.n	800342c <UART_SetConfig+0x260>
 800341e:	e00b      	b.n	8003438 <UART_SetConfig+0x26c>
 8003420:	2301      	movs	r3, #1
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e075      	b.n	8003512 <UART_SetConfig+0x346>
 8003426:	2302      	movs	r3, #2
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e072      	b.n	8003512 <UART_SetConfig+0x346>
 800342c:	2304      	movs	r3, #4
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e06f      	b.n	8003512 <UART_SetConfig+0x346>
 8003432:	2308      	movs	r3, #8
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e06c      	b.n	8003512 <UART_SetConfig+0x346>
 8003438:	2310      	movs	r3, #16
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e069      	b.n	8003512 <UART_SetConfig+0x346>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <UART_SetConfig+0x2e8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d137      	bne.n	80034b8 <UART_SetConfig+0x2ec>
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <UART_SetConfig+0x2d0>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003456:	d017      	beq.n	8003488 <UART_SetConfig+0x2bc>
 8003458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800345c:	d817      	bhi.n	800348e <UART_SetConfig+0x2c2>
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	d00b      	beq.n	800347c <UART_SetConfig+0x2b0>
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003468:	d811      	bhi.n	800348e <UART_SetConfig+0x2c2>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <UART_SetConfig+0x2aa>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	d006      	beq.n	8003482 <UART_SetConfig+0x2b6>
 8003474:	e00b      	b.n	800348e <UART_SetConfig+0x2c2>
 8003476:	2300      	movs	r3, #0
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e04a      	b.n	8003512 <UART_SetConfig+0x346>
 800347c:	2302      	movs	r3, #2
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e047      	b.n	8003512 <UART_SetConfig+0x346>
 8003482:	2304      	movs	r3, #4
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e044      	b.n	8003512 <UART_SetConfig+0x346>
 8003488:	2308      	movs	r3, #8
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e041      	b.n	8003512 <UART_SetConfig+0x346>
 800348e:	2310      	movs	r3, #16
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e03e      	b.n	8003512 <UART_SetConfig+0x346>
 8003494:	efff69f3 	.word	0xefff69f3
 8003498:	40011000 	.word	0x40011000
 800349c:	40023800 	.word	0x40023800
 80034a0:	40004400 	.word	0x40004400
 80034a4:	40004800 	.word	0x40004800
 80034a8:	40004c00 	.word	0x40004c00
 80034ac:	40005000 	.word	0x40005000
 80034b0:	40011400 	.word	0x40011400
 80034b4:	40007800 	.word	0x40007800
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a71      	ldr	r2, [pc, #452]	; (8003684 <UART_SetConfig+0x4b8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d125      	bne.n	800350e <UART_SetConfig+0x342>
 80034c2:	4b71      	ldr	r3, [pc, #452]	; (8003688 <UART_SetConfig+0x4bc>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034d0:	d017      	beq.n	8003502 <UART_SetConfig+0x336>
 80034d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034d6:	d817      	bhi.n	8003508 <UART_SetConfig+0x33c>
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d00b      	beq.n	80034f6 <UART_SetConfig+0x32a>
 80034de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e2:	d811      	bhi.n	8003508 <UART_SetConfig+0x33c>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <UART_SetConfig+0x324>
 80034e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ec:	d006      	beq.n	80034fc <UART_SetConfig+0x330>
 80034ee:	e00b      	b.n	8003508 <UART_SetConfig+0x33c>
 80034f0:	2300      	movs	r3, #0
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e00d      	b.n	8003512 <UART_SetConfig+0x346>
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e00a      	b.n	8003512 <UART_SetConfig+0x346>
 80034fc:	2304      	movs	r3, #4
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e007      	b.n	8003512 <UART_SetConfig+0x346>
 8003502:	2308      	movs	r3, #8
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e004      	b.n	8003512 <UART_SetConfig+0x346>
 8003508:	2310      	movs	r3, #16
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e001      	b.n	8003512 <UART_SetConfig+0x346>
 800350e:	2310      	movs	r3, #16
 8003510:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351a:	d15a      	bne.n	80035d2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800351c:	7ffb      	ldrb	r3, [r7, #31]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d827      	bhi.n	8003572 <UART_SetConfig+0x3a6>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x35c>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003573 	.word	0x08003573
 8003538:	08003563 	.word	0x08003563
 800353c:	08003573 	.word	0x08003573
 8003540:	08003573 	.word	0x08003573
 8003544:	08003573 	.word	0x08003573
 8003548:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fe32 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003550:	61b8      	str	r0, [r7, #24]
        break;
 8003552:	e013      	b.n	800357c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7fe fe42 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003558:	61b8      	str	r0, [r7, #24]
        break;
 800355a:	e00f      	b.n	800357c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355c:	4b4b      	ldr	r3, [pc, #300]	; (800368c <UART_SetConfig+0x4c0>)
 800355e:	61bb      	str	r3, [r7, #24]
        break;
 8003560:	e00c      	b.n	800357c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe fd65 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8003566:	61b8      	str	r0, [r7, #24]
        break;
 8003568:	e008      	b.n	800357c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	61bb      	str	r3, [r7, #24]
        break;
 8003570:	e004      	b.n	800357c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	77bb      	strb	r3, [r7, #30]
        break;
 800357a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d074      	beq.n	800366c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	005a      	lsls	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	441a      	add	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d916      	bls.n	80035cc <UART_SetConfig+0x400>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d212      	bcs.n	80035cc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f023 030f 	bic.w	r3, r3, #15
 80035ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	4313      	orrs	r3, r2
 80035c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	89fa      	ldrh	r2, [r7, #14]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e04f      	b.n	800366c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	77bb      	strb	r3, [r7, #30]
 80035d0:	e04c      	b.n	800366c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d828      	bhi.n	800362a <UART_SetConfig+0x45e>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <UART_SetConfig+0x414>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800360d 	.word	0x0800360d
 80035e8:	08003615 	.word	0x08003615
 80035ec:	0800362b 	.word	0x0800362b
 80035f0:	0800361b 	.word	0x0800361b
 80035f4:	0800362b 	.word	0x0800362b
 80035f8:	0800362b 	.word	0x0800362b
 80035fc:	0800362b 	.word	0x0800362b
 8003600:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7fe fdd6 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003608:	61b8      	str	r0, [r7, #24]
        break;
 800360a:	e013      	b.n	8003634 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800360c:	f7fe fde6 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003610:	61b8      	str	r0, [r7, #24]
        break;
 8003612:	e00f      	b.n	8003634 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <UART_SetConfig+0x4c0>)
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e00c      	b.n	8003634 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7fe fd09 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 800361e:	61b8      	str	r0, [r7, #24]
        break;
 8003620:	e008      	b.n	8003634 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	61bb      	str	r3, [r7, #24]
        break;
 8003628:	e004      	b.n	8003634 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	77bb      	strb	r3, [r7, #30]
        break;
 8003632:	bf00      	nop
    }

    if (pclk != 0U)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085a      	lsrs	r2, r3, #1
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d909      	bls.n	8003668 <UART_SetConfig+0x49c>
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d205      	bcs.n	8003668 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	e001      	b.n	800366c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003678:	7fbb      	ldrb	r3, [r7, #30]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40007c00 	.word	0x40007c00
 8003688:	40023800 	.word	0x40023800
 800368c:	00f42400 	.word	0x00f42400

08003690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00a      	beq.n	80036ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378e:	d10a      	bne.n	80037a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e4:	f7fd fd44 	bl	8001270 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d10e      	bne.n	8003816 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f817 	bl	800383a <UART_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e00d      	b.n	8003832 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b09c      	sub	sp, #112	; 0x70
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384a:	e0a5      	b.n	8003998 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	f000 80a1 	beq.w	8003998 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fd fd0b 	bl	8001270 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <UART_WaitOnFlagUntilTimeout+0x32>
 8003866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003868:	2b00      	cmp	r3, #0
 800386a:	d13e      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800387a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003880:	667b      	str	r3, [r7, #100]	; 0x64
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800388a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e6      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3308      	adds	r3, #8
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	663b      	str	r3, [r7, #96]	; 0x60
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3308      	adds	r3, #8
 80038bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038be:	64ba      	str	r2, [r7, #72]	; 0x48
 80038c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e5      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e067      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d04f      	beq.n	8003998 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003906:	d147      	bne.n	8003998 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003910:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
 8003932:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e6      	bne.n	8003912 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3308      	adds	r3, #8
 800394a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	613b      	str	r3, [r7, #16]
   return(result);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	66bb      	str	r3, [r7, #104]	; 0x68
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003964:	623a      	str	r2, [r7, #32]
 8003966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	69f9      	ldr	r1, [r7, #28]
 800396a:	6a3a      	ldr	r2, [r7, #32]
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	61bb      	str	r3, [r7, #24]
   return(result);
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e5      	bne.n	8003944 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e010      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f43f af4a 	beq.w	800384c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3770      	adds	r7, #112	; 0x70
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <__errno>:
 80039c4:	4b01      	ldr	r3, [pc, #4]	; (80039cc <__errno+0x8>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000010 	.word	0x20000010

080039d0 <__libc_init_array>:
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	4d0d      	ldr	r5, [pc, #52]	; (8003a08 <__libc_init_array+0x38>)
 80039d4:	4c0d      	ldr	r4, [pc, #52]	; (8003a0c <__libc_init_array+0x3c>)
 80039d6:	1b64      	subs	r4, r4, r5
 80039d8:	10a4      	asrs	r4, r4, #2
 80039da:	2600      	movs	r6, #0
 80039dc:	42a6      	cmp	r6, r4
 80039de:	d109      	bne.n	80039f4 <__libc_init_array+0x24>
 80039e0:	4d0b      	ldr	r5, [pc, #44]	; (8003a10 <__libc_init_array+0x40>)
 80039e2:	4c0c      	ldr	r4, [pc, #48]	; (8003a14 <__libc_init_array+0x44>)
 80039e4:	f000 ff76 	bl	80048d4 <_init>
 80039e8:	1b64      	subs	r4, r4, r5
 80039ea:	10a4      	asrs	r4, r4, #2
 80039ec:	2600      	movs	r6, #0
 80039ee:	42a6      	cmp	r6, r4
 80039f0:	d105      	bne.n	80039fe <__libc_init_array+0x2e>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f8:	4798      	blx	r3
 80039fa:	3601      	adds	r6, #1
 80039fc:	e7ee      	b.n	80039dc <__libc_init_array+0xc>
 80039fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a02:	4798      	blx	r3
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7f2      	b.n	80039ee <__libc_init_array+0x1e>
 8003a08:	080049f4 	.word	0x080049f4
 8003a0c:	080049f4 	.word	0x080049f4
 8003a10:	080049f4 	.word	0x080049f4
 8003a14:	080049f8 	.word	0x080049f8

08003a18 <memset>:
 8003a18:	4402      	add	r2, r0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <iprintf>:
 8003a28:	b40f      	push	{r0, r1, r2, r3}
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <iprintf+0x2c>)
 8003a2c:	b513      	push	{r0, r1, r4, lr}
 8003a2e:	681c      	ldr	r4, [r3, #0]
 8003a30:	b124      	cbz	r4, 8003a3c <iprintf+0x14>
 8003a32:	69a3      	ldr	r3, [r4, #24]
 8003a34:	b913      	cbnz	r3, 8003a3c <iprintf+0x14>
 8003a36:	4620      	mov	r0, r4
 8003a38:	f000 f866 	bl	8003b08 <__sinit>
 8003a3c:	ab05      	add	r3, sp, #20
 8003a3e:	9a04      	ldr	r2, [sp, #16]
 8003a40:	68a1      	ldr	r1, [r4, #8]
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	4620      	mov	r0, r4
 8003a46:	f000 f983 	bl	8003d50 <_vfiprintf_r>
 8003a4a:	b002      	add	sp, #8
 8003a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a50:	b004      	add	sp, #16
 8003a52:	4770      	bx	lr
 8003a54:	20000010 	.word	0x20000010

08003a58 <std>:
 8003a58:	2300      	movs	r3, #0
 8003a5a:	b510      	push	{r4, lr}
 8003a5c:	4604      	mov	r4, r0
 8003a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a66:	6083      	str	r3, [r0, #8]
 8003a68:	8181      	strh	r1, [r0, #12]
 8003a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a6c:	81c2      	strh	r2, [r0, #14]
 8003a6e:	6183      	str	r3, [r0, #24]
 8003a70:	4619      	mov	r1, r3
 8003a72:	2208      	movs	r2, #8
 8003a74:	305c      	adds	r0, #92	; 0x5c
 8003a76:	f7ff ffcf 	bl	8003a18 <memset>
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <std+0x38>)
 8003a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <std+0x3c>)
 8003a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <std+0x40>)
 8003a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <std+0x44>)
 8003a88:	6224      	str	r4, [r4, #32]
 8003a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a8c:	bd10      	pop	{r4, pc}
 8003a8e:	bf00      	nop
 8003a90:	080042f9 	.word	0x080042f9
 8003a94:	0800431b 	.word	0x0800431b
 8003a98:	08004353 	.word	0x08004353
 8003a9c:	08004377 	.word	0x08004377

08003aa0 <_cleanup_r>:
 8003aa0:	4901      	ldr	r1, [pc, #4]	; (8003aa8 <_cleanup_r+0x8>)
 8003aa2:	f000 b8af 	b.w	8003c04 <_fwalk_reent>
 8003aa6:	bf00      	nop
 8003aa8:	08004651 	.word	0x08004651

08003aac <__sfmoreglue>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	1e4a      	subs	r2, r1, #1
 8003ab0:	2568      	movs	r5, #104	; 0x68
 8003ab2:	4355      	muls	r5, r2
 8003ab4:	460e      	mov	r6, r1
 8003ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003aba:	f000 f8c5 	bl	8003c48 <_malloc_r>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	b140      	cbz	r0, 8003ad4 <__sfmoreglue+0x28>
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ac8:	300c      	adds	r0, #12
 8003aca:	60a0      	str	r0, [r4, #8]
 8003acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ad0:	f7ff ffa2 	bl	8003a18 <memset>
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}

08003ad8 <__sfp_lock_acquire>:
 8003ad8:	4801      	ldr	r0, [pc, #4]	; (8003ae0 <__sfp_lock_acquire+0x8>)
 8003ada:	f000 b8b3 	b.w	8003c44 <__retarget_lock_acquire_recursive>
 8003ade:	bf00      	nop
 8003ae0:	20000178 	.word	0x20000178

08003ae4 <__sfp_lock_release>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <__sfp_lock_release+0x8>)
 8003ae6:	f000 b8ae 	b.w	8003c46 <__retarget_lock_release_recursive>
 8003aea:	bf00      	nop
 8003aec:	20000178 	.word	0x20000178

08003af0 <__sinit_lock_acquire>:
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <__sinit_lock_acquire+0x8>)
 8003af2:	f000 b8a7 	b.w	8003c44 <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	20000173 	.word	0x20000173

08003afc <__sinit_lock_release>:
 8003afc:	4801      	ldr	r0, [pc, #4]	; (8003b04 <__sinit_lock_release+0x8>)
 8003afe:	f000 b8a2 	b.w	8003c46 <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000173 	.word	0x20000173

08003b08 <__sinit>:
 8003b08:	b510      	push	{r4, lr}
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	f7ff fff0 	bl	8003af0 <__sinit_lock_acquire>
 8003b10:	69a3      	ldr	r3, [r4, #24]
 8003b12:	b11b      	cbz	r3, 8003b1c <__sinit+0x14>
 8003b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b18:	f7ff bff0 	b.w	8003afc <__sinit_lock_release>
 8003b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b20:	6523      	str	r3, [r4, #80]	; 0x50
 8003b22:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <__sinit+0x68>)
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <__sinit+0x6c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	bf04      	itt	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	61a3      	streq	r3, [r4, #24]
 8003b32:	4620      	mov	r0, r4
 8003b34:	f000 f820 	bl	8003b78 <__sfp>
 8003b38:	6060      	str	r0, [r4, #4]
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 f81c 	bl	8003b78 <__sfp>
 8003b40:	60a0      	str	r0, [r4, #8]
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f818 	bl	8003b78 <__sfp>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	60e0      	str	r0, [r4, #12]
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	6860      	ldr	r0, [r4, #4]
 8003b50:	f7ff ff82 	bl	8003a58 <std>
 8003b54:	68a0      	ldr	r0, [r4, #8]
 8003b56:	2201      	movs	r2, #1
 8003b58:	2109      	movs	r1, #9
 8003b5a:	f7ff ff7d 	bl	8003a58 <std>
 8003b5e:	68e0      	ldr	r0, [r4, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	2112      	movs	r1, #18
 8003b64:	f7ff ff78 	bl	8003a58 <std>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61a3      	str	r3, [r4, #24]
 8003b6c:	e7d2      	b.n	8003b14 <__sinit+0xc>
 8003b6e:	bf00      	nop
 8003b70:	08004954 	.word	0x08004954
 8003b74:	08003aa1 	.word	0x08003aa1

08003b78 <__sfp>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	4607      	mov	r7, r0
 8003b7c:	f7ff ffac 	bl	8003ad8 <__sfp_lock_acquire>
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <__sfp+0x84>)
 8003b82:	681e      	ldr	r6, [r3, #0]
 8003b84:	69b3      	ldr	r3, [r6, #24]
 8003b86:	b913      	cbnz	r3, 8003b8e <__sfp+0x16>
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f7ff ffbd 	bl	8003b08 <__sinit>
 8003b8e:	3648      	adds	r6, #72	; 0x48
 8003b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	d503      	bpl.n	8003ba0 <__sfp+0x28>
 8003b98:	6833      	ldr	r3, [r6, #0]
 8003b9a:	b30b      	cbz	r3, 8003be0 <__sfp+0x68>
 8003b9c:	6836      	ldr	r6, [r6, #0]
 8003b9e:	e7f7      	b.n	8003b90 <__sfp+0x18>
 8003ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ba4:	b9d5      	cbnz	r5, 8003bdc <__sfp+0x64>
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <__sfp+0x88>)
 8003ba8:	60e3      	str	r3, [r4, #12]
 8003baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bae:	6665      	str	r5, [r4, #100]	; 0x64
 8003bb0:	f000 f847 	bl	8003c42 <__retarget_lock_init_recursive>
 8003bb4:	f7ff ff96 	bl	8003ae4 <__sfp_lock_release>
 8003bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003bc0:	6025      	str	r5, [r4, #0]
 8003bc2:	61a5      	str	r5, [r4, #24]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bcc:	f7ff ff24 	bl	8003a18 <memset>
 8003bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bd8:	4620      	mov	r0, r4
 8003bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bdc:	3468      	adds	r4, #104	; 0x68
 8003bde:	e7d9      	b.n	8003b94 <__sfp+0x1c>
 8003be0:	2104      	movs	r1, #4
 8003be2:	4638      	mov	r0, r7
 8003be4:	f7ff ff62 	bl	8003aac <__sfmoreglue>
 8003be8:	4604      	mov	r4, r0
 8003bea:	6030      	str	r0, [r6, #0]
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d1d5      	bne.n	8003b9c <__sfp+0x24>
 8003bf0:	f7ff ff78 	bl	8003ae4 <__sfp_lock_release>
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	e7ee      	b.n	8003bd8 <__sfp+0x60>
 8003bfa:	bf00      	nop
 8003bfc:	08004954 	.word	0x08004954
 8003c00:	ffff0001 	.word	0xffff0001

08003c04 <_fwalk_reent>:
 8003c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c08:	4606      	mov	r6, r0
 8003c0a:	4688      	mov	r8, r1
 8003c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c10:	2700      	movs	r7, #0
 8003c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c16:	f1b9 0901 	subs.w	r9, r9, #1
 8003c1a:	d505      	bpl.n	8003c28 <_fwalk_reent+0x24>
 8003c1c:	6824      	ldr	r4, [r4, #0]
 8003c1e:	2c00      	cmp	r4, #0
 8003c20:	d1f7      	bne.n	8003c12 <_fwalk_reent+0xe>
 8003c22:	4638      	mov	r0, r7
 8003c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c28:	89ab      	ldrh	r3, [r5, #12]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d907      	bls.n	8003c3e <_fwalk_reent+0x3a>
 8003c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c32:	3301      	adds	r3, #1
 8003c34:	d003      	beq.n	8003c3e <_fwalk_reent+0x3a>
 8003c36:	4629      	mov	r1, r5
 8003c38:	4630      	mov	r0, r6
 8003c3a:	47c0      	blx	r8
 8003c3c:	4307      	orrs	r7, r0
 8003c3e:	3568      	adds	r5, #104	; 0x68
 8003c40:	e7e9      	b.n	8003c16 <_fwalk_reent+0x12>

08003c42 <__retarget_lock_init_recursive>:
 8003c42:	4770      	bx	lr

08003c44 <__retarget_lock_acquire_recursive>:
 8003c44:	4770      	bx	lr

08003c46 <__retarget_lock_release_recursive>:
 8003c46:	4770      	bx	lr

08003c48 <_malloc_r>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	1ccd      	adds	r5, r1, #3
 8003c4c:	f025 0503 	bic.w	r5, r5, #3
 8003c50:	3508      	adds	r5, #8
 8003c52:	2d0c      	cmp	r5, #12
 8003c54:	bf38      	it	cc
 8003c56:	250c      	movcc	r5, #12
 8003c58:	2d00      	cmp	r5, #0
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	db01      	blt.n	8003c62 <_malloc_r+0x1a>
 8003c5e:	42a9      	cmp	r1, r5
 8003c60:	d903      	bls.n	8003c6a <_malloc_r+0x22>
 8003c62:	230c      	movs	r3, #12
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	2000      	movs	r0, #0
 8003c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c6a:	f000 fda3 	bl	80047b4 <__malloc_lock>
 8003c6e:	4921      	ldr	r1, [pc, #132]	; (8003cf4 <_malloc_r+0xac>)
 8003c70:	680a      	ldr	r2, [r1, #0]
 8003c72:	4614      	mov	r4, r2
 8003c74:	b99c      	cbnz	r4, 8003c9e <_malloc_r+0x56>
 8003c76:	4f20      	ldr	r7, [pc, #128]	; (8003cf8 <_malloc_r+0xb0>)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b923      	cbnz	r3, 8003c86 <_malloc_r+0x3e>
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f000 fb2a 	bl	80042d8 <_sbrk_r>
 8003c84:	6038      	str	r0, [r7, #0]
 8003c86:	4629      	mov	r1, r5
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 fb25 	bl	80042d8 <_sbrk_r>
 8003c8e:	1c43      	adds	r3, r0, #1
 8003c90:	d123      	bne.n	8003cda <_malloc_r+0x92>
 8003c92:	230c      	movs	r3, #12
 8003c94:	6033      	str	r3, [r6, #0]
 8003c96:	4630      	mov	r0, r6
 8003c98:	f000 fd92 	bl	80047c0 <__malloc_unlock>
 8003c9c:	e7e3      	b.n	8003c66 <_malloc_r+0x1e>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	1b5b      	subs	r3, r3, r5
 8003ca2:	d417      	bmi.n	8003cd4 <_malloc_r+0x8c>
 8003ca4:	2b0b      	cmp	r3, #11
 8003ca6:	d903      	bls.n	8003cb0 <_malloc_r+0x68>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	441c      	add	r4, r3
 8003cac:	6025      	str	r5, [r4, #0]
 8003cae:	e004      	b.n	8003cba <_malloc_r+0x72>
 8003cb0:	6863      	ldr	r3, [r4, #4]
 8003cb2:	42a2      	cmp	r2, r4
 8003cb4:	bf0c      	ite	eq
 8003cb6:	600b      	streq	r3, [r1, #0]
 8003cb8:	6053      	strne	r3, [r2, #4]
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 fd80 	bl	80047c0 <__malloc_unlock>
 8003cc0:	f104 000b 	add.w	r0, r4, #11
 8003cc4:	1d23      	adds	r3, r4, #4
 8003cc6:	f020 0007 	bic.w	r0, r0, #7
 8003cca:	1ac2      	subs	r2, r0, r3
 8003ccc:	d0cc      	beq.n	8003c68 <_malloc_r+0x20>
 8003cce:	1a1b      	subs	r3, r3, r0
 8003cd0:	50a3      	str	r3, [r4, r2]
 8003cd2:	e7c9      	b.n	8003c68 <_malloc_r+0x20>
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	6864      	ldr	r4, [r4, #4]
 8003cd8:	e7cc      	b.n	8003c74 <_malloc_r+0x2c>
 8003cda:	1cc4      	adds	r4, r0, #3
 8003cdc:	f024 0403 	bic.w	r4, r4, #3
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d0e3      	beq.n	8003cac <_malloc_r+0x64>
 8003ce4:	1a21      	subs	r1, r4, r0
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 faf6 	bl	80042d8 <_sbrk_r>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d1dd      	bne.n	8003cac <_malloc_r+0x64>
 8003cf0:	e7cf      	b.n	8003c92 <_malloc_r+0x4a>
 8003cf2:	bf00      	nop
 8003cf4:	20000094 	.word	0x20000094
 8003cf8:	20000098 	.word	0x20000098

08003cfc <__sfputc_r>:
 8003cfc:	6893      	ldr	r3, [r2, #8]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	b410      	push	{r4}
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	da08      	bge.n	8003d1a <__sfputc_r+0x1e>
 8003d08:	6994      	ldr	r4, [r2, #24]
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	db01      	blt.n	8003d12 <__sfputc_r+0x16>
 8003d0e:	290a      	cmp	r1, #10
 8003d10:	d103      	bne.n	8003d1a <__sfputc_r+0x1e>
 8003d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d16:	f000 bb33 	b.w	8004380 <__swbuf_r>
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	1c58      	adds	r0, r3, #1
 8003d1e:	6010      	str	r0, [r2, #0]
 8003d20:	7019      	strb	r1, [r3, #0]
 8003d22:	4608      	mov	r0, r1
 8003d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <__sfputs_r>:
 8003d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	460f      	mov	r7, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	18d5      	adds	r5, r2, r3
 8003d34:	42ac      	cmp	r4, r5
 8003d36:	d101      	bne.n	8003d3c <__sfputs_r+0x12>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e007      	b.n	8003d4c <__sfputs_r+0x22>
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	463a      	mov	r2, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7ff ffda 	bl	8003cfc <__sfputc_r>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d1f3      	bne.n	8003d34 <__sfputs_r+0xa>
 8003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d50 <_vfiprintf_r>:
 8003d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d54:	460d      	mov	r5, r1
 8003d56:	b09d      	sub	sp, #116	; 0x74
 8003d58:	4614      	mov	r4, r2
 8003d5a:	4698      	mov	r8, r3
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	b118      	cbz	r0, 8003d68 <_vfiprintf_r+0x18>
 8003d60:	6983      	ldr	r3, [r0, #24]
 8003d62:	b90b      	cbnz	r3, 8003d68 <_vfiprintf_r+0x18>
 8003d64:	f7ff fed0 	bl	8003b08 <__sinit>
 8003d68:	4b89      	ldr	r3, [pc, #548]	; (8003f90 <_vfiprintf_r+0x240>)
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	d11b      	bne.n	8003da6 <_vfiprintf_r+0x56>
 8003d6e:	6875      	ldr	r5, [r6, #4]
 8003d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d72:	07d9      	lsls	r1, r3, #31
 8003d74:	d405      	bmi.n	8003d82 <_vfiprintf_r+0x32>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	059a      	lsls	r2, r3, #22
 8003d7a:	d402      	bmi.n	8003d82 <_vfiprintf_r+0x32>
 8003d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d7e:	f7ff ff61 	bl	8003c44 <__retarget_lock_acquire_recursive>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	071b      	lsls	r3, r3, #28
 8003d86:	d501      	bpl.n	8003d8c <_vfiprintf_r+0x3c>
 8003d88:	692b      	ldr	r3, [r5, #16]
 8003d8a:	b9eb      	cbnz	r3, 8003dc8 <_vfiprintf_r+0x78>
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f000 fb5a 	bl	8004448 <__swsetup_r>
 8003d94:	b1c0      	cbz	r0, 8003dc8 <_vfiprintf_r+0x78>
 8003d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d98:	07dc      	lsls	r4, r3, #31
 8003d9a:	d50e      	bpl.n	8003dba <_vfiprintf_r+0x6a>
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	b01d      	add	sp, #116	; 0x74
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <_vfiprintf_r+0x244>)
 8003da8:	429d      	cmp	r5, r3
 8003daa:	d101      	bne.n	8003db0 <_vfiprintf_r+0x60>
 8003dac:	68b5      	ldr	r5, [r6, #8]
 8003dae:	e7df      	b.n	8003d70 <_vfiprintf_r+0x20>
 8003db0:	4b79      	ldr	r3, [pc, #484]	; (8003f98 <_vfiprintf_r+0x248>)
 8003db2:	429d      	cmp	r5, r3
 8003db4:	bf08      	it	eq
 8003db6:	68f5      	ldreq	r5, [r6, #12]
 8003db8:	e7da      	b.n	8003d70 <_vfiprintf_r+0x20>
 8003dba:	89ab      	ldrh	r3, [r5, #12]
 8003dbc:	0598      	lsls	r0, r3, #22
 8003dbe:	d4ed      	bmi.n	8003d9c <_vfiprintf_r+0x4c>
 8003dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dc2:	f7ff ff40 	bl	8003c46 <__retarget_lock_release_recursive>
 8003dc6:	e7e9      	b.n	8003d9c <_vfiprintf_r+0x4c>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
 8003dcc:	2320      	movs	r3, #32
 8003dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd6:	2330      	movs	r3, #48	; 0x30
 8003dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f9c <_vfiprintf_r+0x24c>
 8003ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003de0:	f04f 0901 	mov.w	r9, #1
 8003de4:	4623      	mov	r3, r4
 8003de6:	469a      	mov	sl, r3
 8003de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dec:	b10a      	cbz	r2, 8003df2 <_vfiprintf_r+0xa2>
 8003dee:	2a25      	cmp	r2, #37	; 0x25
 8003df0:	d1f9      	bne.n	8003de6 <_vfiprintf_r+0x96>
 8003df2:	ebba 0b04 	subs.w	fp, sl, r4
 8003df6:	d00b      	beq.n	8003e10 <_vfiprintf_r+0xc0>
 8003df8:	465b      	mov	r3, fp
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f7ff ff93 	bl	8003d2a <__sfputs_r>
 8003e04:	3001      	adds	r0, #1
 8003e06:	f000 80aa 	beq.w	8003f5e <_vfiprintf_r+0x20e>
 8003e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e0c:	445a      	add	r2, fp
 8003e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8003e10:	f89a 3000 	ldrb.w	r3, [sl]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a2 	beq.w	8003f5e <_vfiprintf_r+0x20e>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e24:	f10a 0a01 	add.w	sl, sl, #1
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e30:	931a      	str	r3, [sp, #104]	; 0x68
 8003e32:	4654      	mov	r4, sl
 8003e34:	2205      	movs	r2, #5
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	4858      	ldr	r0, [pc, #352]	; (8003f9c <_vfiprintf_r+0x24c>)
 8003e3c:	f7fc f9e8 	bl	8000210 <memchr>
 8003e40:	9a04      	ldr	r2, [sp, #16]
 8003e42:	b9d8      	cbnz	r0, 8003e7c <_vfiprintf_r+0x12c>
 8003e44:	06d1      	lsls	r1, r2, #27
 8003e46:	bf44      	itt	mi
 8003e48:	2320      	movmi	r3, #32
 8003e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4e:	0713      	lsls	r3, r2, #28
 8003e50:	bf44      	itt	mi
 8003e52:	232b      	movmi	r3, #43	; 0x2b
 8003e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e58:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5e:	d015      	beq.n	8003e8c <_vfiprintf_r+0x13c>
 8003e60:	9a07      	ldr	r2, [sp, #28]
 8003e62:	4654      	mov	r4, sl
 8003e64:	2000      	movs	r0, #0
 8003e66:	f04f 0c0a 	mov.w	ip, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e70:	3b30      	subs	r3, #48	; 0x30
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	d94e      	bls.n	8003f14 <_vfiprintf_r+0x1c4>
 8003e76:	b1b0      	cbz	r0, 8003ea6 <_vfiprintf_r+0x156>
 8003e78:	9207      	str	r2, [sp, #28]
 8003e7a:	e014      	b.n	8003ea6 <_vfiprintf_r+0x156>
 8003e7c:	eba0 0308 	sub.w	r3, r0, r8
 8003e80:	fa09 f303 	lsl.w	r3, r9, r3
 8003e84:	4313      	orrs	r3, r2
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	46a2      	mov	sl, r4
 8003e8a:	e7d2      	b.n	8003e32 <_vfiprintf_r+0xe2>
 8003e8c:	9b03      	ldr	r3, [sp, #12]
 8003e8e:	1d19      	adds	r1, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	9103      	str	r1, [sp, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bfbb      	ittet	lt
 8003e98:	425b      	neglt	r3, r3
 8003e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e9e:	9307      	strge	r3, [sp, #28]
 8003ea0:	9307      	strlt	r3, [sp, #28]
 8003ea2:	bfb8      	it	lt
 8003ea4:	9204      	strlt	r2, [sp, #16]
 8003ea6:	7823      	ldrb	r3, [r4, #0]
 8003ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8003eaa:	d10c      	bne.n	8003ec6 <_vfiprintf_r+0x176>
 8003eac:	7863      	ldrb	r3, [r4, #1]
 8003eae:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb0:	d135      	bne.n	8003f1e <_vfiprintf_r+0x1ce>
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	1d1a      	adds	r2, r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	9203      	str	r2, [sp, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bfb8      	it	lt
 8003ebe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ec2:	3402      	adds	r4, #2
 8003ec4:	9305      	str	r3, [sp, #20]
 8003ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003fac <_vfiprintf_r+0x25c>
 8003eca:	7821      	ldrb	r1, [r4, #0]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	4650      	mov	r0, sl
 8003ed0:	f7fc f99e 	bl	8000210 <memchr>
 8003ed4:	b140      	cbz	r0, 8003ee8 <_vfiprintf_r+0x198>
 8003ed6:	2340      	movs	r3, #64	; 0x40
 8003ed8:	eba0 000a 	sub.w	r0, r0, sl
 8003edc:	fa03 f000 	lsl.w	r0, r3, r0
 8003ee0:	9b04      	ldr	r3, [sp, #16]
 8003ee2:	4303      	orrs	r3, r0
 8003ee4:	3401      	adds	r4, #1
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eec:	482c      	ldr	r0, [pc, #176]	; (8003fa0 <_vfiprintf_r+0x250>)
 8003eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ef2:	2206      	movs	r2, #6
 8003ef4:	f7fc f98c 	bl	8000210 <memchr>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d03f      	beq.n	8003f7c <_vfiprintf_r+0x22c>
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <_vfiprintf_r+0x254>)
 8003efe:	bb1b      	cbnz	r3, 8003f48 <_vfiprintf_r+0x1f8>
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	3307      	adds	r3, #7
 8003f04:	f023 0307 	bic.w	r3, r3, #7
 8003f08:	3308      	adds	r3, #8
 8003f0a:	9303      	str	r3, [sp, #12]
 8003f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0e:	443b      	add	r3, r7
 8003f10:	9309      	str	r3, [sp, #36]	; 0x24
 8003f12:	e767      	b.n	8003de4 <_vfiprintf_r+0x94>
 8003f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f18:	460c      	mov	r4, r1
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	e7a5      	b.n	8003e6a <_vfiprintf_r+0x11a>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	3401      	adds	r4, #1
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0c0a 	mov.w	ip, #10
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f30:	3a30      	subs	r2, #48	; 0x30
 8003f32:	2a09      	cmp	r2, #9
 8003f34:	d903      	bls.n	8003f3e <_vfiprintf_r+0x1ee>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0c5      	beq.n	8003ec6 <_vfiprintf_r+0x176>
 8003f3a:	9105      	str	r1, [sp, #20]
 8003f3c:	e7c3      	b.n	8003ec6 <_vfiprintf_r+0x176>
 8003f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f42:	4604      	mov	r4, r0
 8003f44:	2301      	movs	r3, #1
 8003f46:	e7f0      	b.n	8003f2a <_vfiprintf_r+0x1da>
 8003f48:	ab03      	add	r3, sp, #12
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <_vfiprintf_r+0x258>)
 8003f50:	a904      	add	r1, sp, #16
 8003f52:	4630      	mov	r0, r6
 8003f54:	f3af 8000 	nop.w
 8003f58:	4607      	mov	r7, r0
 8003f5a:	1c78      	adds	r0, r7, #1
 8003f5c:	d1d6      	bne.n	8003f0c <_vfiprintf_r+0x1bc>
 8003f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f60:	07d9      	lsls	r1, r3, #31
 8003f62:	d405      	bmi.n	8003f70 <_vfiprintf_r+0x220>
 8003f64:	89ab      	ldrh	r3, [r5, #12]
 8003f66:	059a      	lsls	r2, r3, #22
 8003f68:	d402      	bmi.n	8003f70 <_vfiprintf_r+0x220>
 8003f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f6c:	f7ff fe6b 	bl	8003c46 <__retarget_lock_release_recursive>
 8003f70:	89ab      	ldrh	r3, [r5, #12]
 8003f72:	065b      	lsls	r3, r3, #25
 8003f74:	f53f af12 	bmi.w	8003d9c <_vfiprintf_r+0x4c>
 8003f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7a:	e711      	b.n	8003da0 <_vfiprintf_r+0x50>
 8003f7c:	ab03      	add	r3, sp, #12
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	462a      	mov	r2, r5
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <_vfiprintf_r+0x258>)
 8003f84:	a904      	add	r1, sp, #16
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 f880 	bl	800408c <_printf_i>
 8003f8c:	e7e4      	b.n	8003f58 <_vfiprintf_r+0x208>
 8003f8e:	bf00      	nop
 8003f90:	08004978 	.word	0x08004978
 8003f94:	08004998 	.word	0x08004998
 8003f98:	08004958 	.word	0x08004958
 8003f9c:	080049b8 	.word	0x080049b8
 8003fa0:	080049c2 	.word	0x080049c2
 8003fa4:	00000000 	.word	0x00000000
 8003fa8:	08003d2b 	.word	0x08003d2b
 8003fac:	080049be 	.word	0x080049be

08003fb0 <_printf_common>:
 8003fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	4699      	mov	r9, r3
 8003fb8:	688a      	ldr	r2, [r1, #8]
 8003fba:	690b      	ldr	r3, [r1, #16]
 8003fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	bfb8      	it	lt
 8003fc4:	4613      	movlt	r3, r2
 8003fc6:	6033      	str	r3, [r6, #0]
 8003fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fcc:	4607      	mov	r7, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_printf_common+0x26>
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	0699      	lsls	r1, r3, #26
 8003fda:	bf42      	ittt	mi
 8003fdc:	6833      	ldrmi	r3, [r6, #0]
 8003fde:	3302      	addmi	r3, #2
 8003fe0:	6033      	strmi	r3, [r6, #0]
 8003fe2:	6825      	ldr	r5, [r4, #0]
 8003fe4:	f015 0506 	ands.w	r5, r5, #6
 8003fe8:	d106      	bne.n	8003ff8 <_printf_common+0x48>
 8003fea:	f104 0a19 	add.w	sl, r4, #25
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	6832      	ldr	r2, [r6, #0]
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dc26      	bgt.n	8004046 <_printf_common+0x96>
 8003ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ffc:	1e13      	subs	r3, r2, #0
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	bf18      	it	ne
 8004002:	2301      	movne	r3, #1
 8004004:	0692      	lsls	r2, r2, #26
 8004006:	d42b      	bmi.n	8004060 <_printf_common+0xb0>
 8004008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800400c:	4649      	mov	r1, r9
 800400e:	4638      	mov	r0, r7
 8004010:	47c0      	blx	r8
 8004012:	3001      	adds	r0, #1
 8004014:	d01e      	beq.n	8004054 <_printf_common+0xa4>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	68e5      	ldr	r5, [r4, #12]
 800401a:	6832      	ldr	r2, [r6, #0]
 800401c:	f003 0306 	and.w	r3, r3, #6
 8004020:	2b04      	cmp	r3, #4
 8004022:	bf08      	it	eq
 8004024:	1aad      	subeq	r5, r5, r2
 8004026:	68a3      	ldr	r3, [r4, #8]
 8004028:	6922      	ldr	r2, [r4, #16]
 800402a:	bf0c      	ite	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	2500      	movne	r5, #0
 8004032:	4293      	cmp	r3, r2
 8004034:	bfc4      	itt	gt
 8004036:	1a9b      	subgt	r3, r3, r2
 8004038:	18ed      	addgt	r5, r5, r3
 800403a:	2600      	movs	r6, #0
 800403c:	341a      	adds	r4, #26
 800403e:	42b5      	cmp	r5, r6
 8004040:	d11a      	bne.n	8004078 <_printf_common+0xc8>
 8004042:	2000      	movs	r0, #0
 8004044:	e008      	b.n	8004058 <_printf_common+0xa8>
 8004046:	2301      	movs	r3, #1
 8004048:	4652      	mov	r2, sl
 800404a:	4649      	mov	r1, r9
 800404c:	4638      	mov	r0, r7
 800404e:	47c0      	blx	r8
 8004050:	3001      	adds	r0, #1
 8004052:	d103      	bne.n	800405c <_printf_common+0xac>
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405c:	3501      	adds	r5, #1
 800405e:	e7c6      	b.n	8003fee <_printf_common+0x3e>
 8004060:	18e1      	adds	r1, r4, r3
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	2030      	movs	r0, #48	; 0x30
 8004066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800406a:	4422      	add	r2, r4
 800406c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004074:	3302      	adds	r3, #2
 8004076:	e7c7      	b.n	8004008 <_printf_common+0x58>
 8004078:	2301      	movs	r3, #1
 800407a:	4622      	mov	r2, r4
 800407c:	4649      	mov	r1, r9
 800407e:	4638      	mov	r0, r7
 8004080:	47c0      	blx	r8
 8004082:	3001      	adds	r0, #1
 8004084:	d0e6      	beq.n	8004054 <_printf_common+0xa4>
 8004086:	3601      	adds	r6, #1
 8004088:	e7d9      	b.n	800403e <_printf_common+0x8e>
	...

0800408c <_printf_i>:
 800408c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	460c      	mov	r4, r1
 8004092:	4691      	mov	r9, r2
 8004094:	7e27      	ldrb	r7, [r4, #24]
 8004096:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004098:	2f78      	cmp	r7, #120	; 0x78
 800409a:	4680      	mov	r8, r0
 800409c:	469a      	mov	sl, r3
 800409e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a2:	d807      	bhi.n	80040b4 <_printf_i+0x28>
 80040a4:	2f62      	cmp	r7, #98	; 0x62
 80040a6:	d80a      	bhi.n	80040be <_printf_i+0x32>
 80040a8:	2f00      	cmp	r7, #0
 80040aa:	f000 80d8 	beq.w	800425e <_printf_i+0x1d2>
 80040ae:	2f58      	cmp	r7, #88	; 0x58
 80040b0:	f000 80a3 	beq.w	80041fa <_printf_i+0x16e>
 80040b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040bc:	e03a      	b.n	8004134 <_printf_i+0xa8>
 80040be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040c2:	2b15      	cmp	r3, #21
 80040c4:	d8f6      	bhi.n	80040b4 <_printf_i+0x28>
 80040c6:	a001      	add	r0, pc, #4	; (adr r0, 80040cc <_printf_i+0x40>)
 80040c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040cc:	08004125 	.word	0x08004125
 80040d0:	08004139 	.word	0x08004139
 80040d4:	080040b5 	.word	0x080040b5
 80040d8:	080040b5 	.word	0x080040b5
 80040dc:	080040b5 	.word	0x080040b5
 80040e0:	080040b5 	.word	0x080040b5
 80040e4:	08004139 	.word	0x08004139
 80040e8:	080040b5 	.word	0x080040b5
 80040ec:	080040b5 	.word	0x080040b5
 80040f0:	080040b5 	.word	0x080040b5
 80040f4:	080040b5 	.word	0x080040b5
 80040f8:	08004245 	.word	0x08004245
 80040fc:	08004169 	.word	0x08004169
 8004100:	08004227 	.word	0x08004227
 8004104:	080040b5 	.word	0x080040b5
 8004108:	080040b5 	.word	0x080040b5
 800410c:	08004267 	.word	0x08004267
 8004110:	080040b5 	.word	0x080040b5
 8004114:	08004169 	.word	0x08004169
 8004118:	080040b5 	.word	0x080040b5
 800411c:	080040b5 	.word	0x080040b5
 8004120:	0800422f 	.word	0x0800422f
 8004124:	680b      	ldr	r3, [r1, #0]
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	600a      	str	r2, [r1, #0]
 800412c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004134:	2301      	movs	r3, #1
 8004136:	e0a3      	b.n	8004280 <_printf_i+0x1f4>
 8004138:	6825      	ldr	r5, [r4, #0]
 800413a:	6808      	ldr	r0, [r1, #0]
 800413c:	062e      	lsls	r6, r5, #24
 800413e:	f100 0304 	add.w	r3, r0, #4
 8004142:	d50a      	bpl.n	800415a <_printf_i+0xce>
 8004144:	6805      	ldr	r5, [r0, #0]
 8004146:	600b      	str	r3, [r1, #0]
 8004148:	2d00      	cmp	r5, #0
 800414a:	da03      	bge.n	8004154 <_printf_i+0xc8>
 800414c:	232d      	movs	r3, #45	; 0x2d
 800414e:	426d      	negs	r5, r5
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004154:	485e      	ldr	r0, [pc, #376]	; (80042d0 <_printf_i+0x244>)
 8004156:	230a      	movs	r3, #10
 8004158:	e019      	b.n	800418e <_printf_i+0x102>
 800415a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800415e:	6805      	ldr	r5, [r0, #0]
 8004160:	600b      	str	r3, [r1, #0]
 8004162:	bf18      	it	ne
 8004164:	b22d      	sxthne	r5, r5
 8004166:	e7ef      	b.n	8004148 <_printf_i+0xbc>
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	6825      	ldr	r5, [r4, #0]
 800416c:	1d18      	adds	r0, r3, #4
 800416e:	6008      	str	r0, [r1, #0]
 8004170:	0628      	lsls	r0, r5, #24
 8004172:	d501      	bpl.n	8004178 <_printf_i+0xec>
 8004174:	681d      	ldr	r5, [r3, #0]
 8004176:	e002      	b.n	800417e <_printf_i+0xf2>
 8004178:	0669      	lsls	r1, r5, #25
 800417a:	d5fb      	bpl.n	8004174 <_printf_i+0xe8>
 800417c:	881d      	ldrh	r5, [r3, #0]
 800417e:	4854      	ldr	r0, [pc, #336]	; (80042d0 <_printf_i+0x244>)
 8004180:	2f6f      	cmp	r7, #111	; 0x6f
 8004182:	bf0c      	ite	eq
 8004184:	2308      	moveq	r3, #8
 8004186:	230a      	movne	r3, #10
 8004188:	2100      	movs	r1, #0
 800418a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800418e:	6866      	ldr	r6, [r4, #4]
 8004190:	60a6      	str	r6, [r4, #8]
 8004192:	2e00      	cmp	r6, #0
 8004194:	bfa2      	ittt	ge
 8004196:	6821      	ldrge	r1, [r4, #0]
 8004198:	f021 0104 	bicge.w	r1, r1, #4
 800419c:	6021      	strge	r1, [r4, #0]
 800419e:	b90d      	cbnz	r5, 80041a4 <_printf_i+0x118>
 80041a0:	2e00      	cmp	r6, #0
 80041a2:	d04d      	beq.n	8004240 <_printf_i+0x1b4>
 80041a4:	4616      	mov	r6, r2
 80041a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80041aa:	fb03 5711 	mls	r7, r3, r1, r5
 80041ae:	5dc7      	ldrb	r7, [r0, r7]
 80041b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041b4:	462f      	mov	r7, r5
 80041b6:	42bb      	cmp	r3, r7
 80041b8:	460d      	mov	r5, r1
 80041ba:	d9f4      	bls.n	80041a6 <_printf_i+0x11a>
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d10b      	bne.n	80041d8 <_printf_i+0x14c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07df      	lsls	r7, r3, #31
 80041c4:	d508      	bpl.n	80041d8 <_printf_i+0x14c>
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	6861      	ldr	r1, [r4, #4]
 80041ca:	4299      	cmp	r1, r3
 80041cc:	bfde      	ittt	le
 80041ce:	2330      	movle	r3, #48	; 0x30
 80041d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041d8:	1b92      	subs	r2, r2, r6
 80041da:	6122      	str	r2, [r4, #16]
 80041dc:	f8cd a000 	str.w	sl, [sp]
 80041e0:	464b      	mov	r3, r9
 80041e2:	aa03      	add	r2, sp, #12
 80041e4:	4621      	mov	r1, r4
 80041e6:	4640      	mov	r0, r8
 80041e8:	f7ff fee2 	bl	8003fb0 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d14c      	bne.n	800428a <_printf_i+0x1fe>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b004      	add	sp, #16
 80041f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fa:	4835      	ldr	r0, [pc, #212]	; (80042d0 <_printf_i+0x244>)
 80041fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	680e      	ldr	r6, [r1, #0]
 8004204:	061f      	lsls	r7, r3, #24
 8004206:	f856 5b04 	ldr.w	r5, [r6], #4
 800420a:	600e      	str	r6, [r1, #0]
 800420c:	d514      	bpl.n	8004238 <_printf_i+0x1ac>
 800420e:	07d9      	lsls	r1, r3, #31
 8004210:	bf44      	itt	mi
 8004212:	f043 0320 	orrmi.w	r3, r3, #32
 8004216:	6023      	strmi	r3, [r4, #0]
 8004218:	b91d      	cbnz	r5, 8004222 <_printf_i+0x196>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f023 0320 	bic.w	r3, r3, #32
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	2310      	movs	r3, #16
 8004224:	e7b0      	b.n	8004188 <_printf_i+0xfc>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f043 0320 	orr.w	r3, r3, #32
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	2378      	movs	r3, #120	; 0x78
 8004230:	4828      	ldr	r0, [pc, #160]	; (80042d4 <_printf_i+0x248>)
 8004232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004236:	e7e3      	b.n	8004200 <_printf_i+0x174>
 8004238:	065e      	lsls	r6, r3, #25
 800423a:	bf48      	it	mi
 800423c:	b2ad      	uxthmi	r5, r5
 800423e:	e7e6      	b.n	800420e <_printf_i+0x182>
 8004240:	4616      	mov	r6, r2
 8004242:	e7bb      	b.n	80041bc <_printf_i+0x130>
 8004244:	680b      	ldr	r3, [r1, #0]
 8004246:	6826      	ldr	r6, [r4, #0]
 8004248:	6960      	ldr	r0, [r4, #20]
 800424a:	1d1d      	adds	r5, r3, #4
 800424c:	600d      	str	r5, [r1, #0]
 800424e:	0635      	lsls	r5, r6, #24
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	d501      	bpl.n	8004258 <_printf_i+0x1cc>
 8004254:	6018      	str	r0, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0x1d2>
 8004258:	0671      	lsls	r1, r6, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0x1c8>
 800425c:	8018      	strh	r0, [r3, #0]
 800425e:	2300      	movs	r3, #0
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	4616      	mov	r6, r2
 8004264:	e7ba      	b.n	80041dc <_printf_i+0x150>
 8004266:	680b      	ldr	r3, [r1, #0]
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	600a      	str	r2, [r1, #0]
 800426c:	681e      	ldr	r6, [r3, #0]
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	2100      	movs	r1, #0
 8004272:	4630      	mov	r0, r6
 8004274:	f7fb ffcc 	bl	8000210 <memchr>
 8004278:	b108      	cbz	r0, 800427e <_printf_i+0x1f2>
 800427a:	1b80      	subs	r0, r0, r6
 800427c:	6060      	str	r0, [r4, #4]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	2300      	movs	r3, #0
 8004284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004288:	e7a8      	b.n	80041dc <_printf_i+0x150>
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	4632      	mov	r2, r6
 800428e:	4649      	mov	r1, r9
 8004290:	4640      	mov	r0, r8
 8004292:	47d0      	blx	sl
 8004294:	3001      	adds	r0, #1
 8004296:	d0ab      	beq.n	80041f0 <_printf_i+0x164>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	079b      	lsls	r3, r3, #30
 800429c:	d413      	bmi.n	80042c6 <_printf_i+0x23a>
 800429e:	68e0      	ldr	r0, [r4, #12]
 80042a0:	9b03      	ldr	r3, [sp, #12]
 80042a2:	4298      	cmp	r0, r3
 80042a4:	bfb8      	it	lt
 80042a6:	4618      	movlt	r0, r3
 80042a8:	e7a4      	b.n	80041f4 <_printf_i+0x168>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4632      	mov	r2, r6
 80042ae:	4649      	mov	r1, r9
 80042b0:	4640      	mov	r0, r8
 80042b2:	47d0      	blx	sl
 80042b4:	3001      	adds	r0, #1
 80042b6:	d09b      	beq.n	80041f0 <_printf_i+0x164>
 80042b8:	3501      	adds	r5, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	9903      	ldr	r1, [sp, #12]
 80042be:	1a5b      	subs	r3, r3, r1
 80042c0:	42ab      	cmp	r3, r5
 80042c2:	dcf2      	bgt.n	80042aa <_printf_i+0x21e>
 80042c4:	e7eb      	b.n	800429e <_printf_i+0x212>
 80042c6:	2500      	movs	r5, #0
 80042c8:	f104 0619 	add.w	r6, r4, #25
 80042cc:	e7f5      	b.n	80042ba <_printf_i+0x22e>
 80042ce:	bf00      	nop
 80042d0:	080049c9 	.word	0x080049c9
 80042d4:	080049da 	.word	0x080049da

080042d8 <_sbrk_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4d06      	ldr	r5, [pc, #24]	; (80042f4 <_sbrk_r+0x1c>)
 80042dc:	2300      	movs	r3, #0
 80042de:	4604      	mov	r4, r0
 80042e0:	4608      	mov	r0, r1
 80042e2:	602b      	str	r3, [r5, #0]
 80042e4:	f7fc ff32 	bl	800114c <_sbrk>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d102      	bne.n	80042f2 <_sbrk_r+0x1a>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	b103      	cbz	r3, 80042f2 <_sbrk_r+0x1a>
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	2000017c 	.word	0x2000017c

080042f8 <__sread>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	460c      	mov	r4, r1
 80042fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004300:	f000 fab4 	bl	800486c <_read_r>
 8004304:	2800      	cmp	r0, #0
 8004306:	bfab      	itete	ge
 8004308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800430a:	89a3      	ldrhlt	r3, [r4, #12]
 800430c:	181b      	addge	r3, r3, r0
 800430e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004312:	bfac      	ite	ge
 8004314:	6563      	strge	r3, [r4, #84]	; 0x54
 8004316:	81a3      	strhlt	r3, [r4, #12]
 8004318:	bd10      	pop	{r4, pc}

0800431a <__swrite>:
 800431a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	461f      	mov	r7, r3
 8004320:	898b      	ldrh	r3, [r1, #12]
 8004322:	05db      	lsls	r3, r3, #23
 8004324:	4605      	mov	r5, r0
 8004326:	460c      	mov	r4, r1
 8004328:	4616      	mov	r6, r2
 800432a:	d505      	bpl.n	8004338 <__swrite+0x1e>
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	2302      	movs	r3, #2
 8004332:	2200      	movs	r2, #0
 8004334:	f000 f9c8 	bl	80046c8 <_lseek_r>
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	4628      	mov	r0, r5
 800434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	f000 b869 	b.w	8004424 <_write_r>

08004352 <__sseek>:
 8004352:	b510      	push	{r4, lr}
 8004354:	460c      	mov	r4, r1
 8004356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435a:	f000 f9b5 	bl	80046c8 <_lseek_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	bf15      	itete	ne
 8004364:	6560      	strne	r0, [r4, #84]	; 0x54
 8004366:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800436a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800436e:	81a3      	strheq	r3, [r4, #12]
 8004370:	bf18      	it	ne
 8004372:	81a3      	strhne	r3, [r4, #12]
 8004374:	bd10      	pop	{r4, pc}

08004376 <__sclose>:
 8004376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437a:	f000 b8d3 	b.w	8004524 <_close_r>
	...

08004380 <__swbuf_r>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	460e      	mov	r6, r1
 8004384:	4614      	mov	r4, r2
 8004386:	4605      	mov	r5, r0
 8004388:	b118      	cbz	r0, 8004392 <__swbuf_r+0x12>
 800438a:	6983      	ldr	r3, [r0, #24]
 800438c:	b90b      	cbnz	r3, 8004392 <__swbuf_r+0x12>
 800438e:	f7ff fbbb 	bl	8003b08 <__sinit>
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <__swbuf_r+0x98>)
 8004394:	429c      	cmp	r4, r3
 8004396:	d12b      	bne.n	80043f0 <__swbuf_r+0x70>
 8004398:	686c      	ldr	r4, [r5, #4]
 800439a:	69a3      	ldr	r3, [r4, #24]
 800439c:	60a3      	str	r3, [r4, #8]
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	071a      	lsls	r2, r3, #28
 80043a2:	d52f      	bpl.n	8004404 <__swbuf_r+0x84>
 80043a4:	6923      	ldr	r3, [r4, #16]
 80043a6:	b36b      	cbz	r3, 8004404 <__swbuf_r+0x84>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	1ac0      	subs	r0, r0, r3
 80043ae:	6963      	ldr	r3, [r4, #20]
 80043b0:	b2f6      	uxtb	r6, r6
 80043b2:	4283      	cmp	r3, r0
 80043b4:	4637      	mov	r7, r6
 80043b6:	dc04      	bgt.n	80043c2 <__swbuf_r+0x42>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 f948 	bl	8004650 <_fflush_r>
 80043c0:	bb30      	cbnz	r0, 8004410 <__swbuf_r+0x90>
 80043c2:	68a3      	ldr	r3, [r4, #8]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60a3      	str	r3, [r4, #8]
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	6022      	str	r2, [r4, #0]
 80043ce:	701e      	strb	r6, [r3, #0]
 80043d0:	6963      	ldr	r3, [r4, #20]
 80043d2:	3001      	adds	r0, #1
 80043d4:	4283      	cmp	r3, r0
 80043d6:	d004      	beq.n	80043e2 <__swbuf_r+0x62>
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	07db      	lsls	r3, r3, #31
 80043dc:	d506      	bpl.n	80043ec <__swbuf_r+0x6c>
 80043de:	2e0a      	cmp	r6, #10
 80043e0:	d104      	bne.n	80043ec <__swbuf_r+0x6c>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 f933 	bl	8004650 <_fflush_r>
 80043ea:	b988      	cbnz	r0, 8004410 <__swbuf_r+0x90>
 80043ec:	4638      	mov	r0, r7
 80043ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <__swbuf_r+0x9c>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d101      	bne.n	80043fa <__swbuf_r+0x7a>
 80043f6:	68ac      	ldr	r4, [r5, #8]
 80043f8:	e7cf      	b.n	800439a <__swbuf_r+0x1a>
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <__swbuf_r+0xa0>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	bf08      	it	eq
 8004400:	68ec      	ldreq	r4, [r5, #12]
 8004402:	e7ca      	b.n	800439a <__swbuf_r+0x1a>
 8004404:	4621      	mov	r1, r4
 8004406:	4628      	mov	r0, r5
 8004408:	f000 f81e 	bl	8004448 <__swsetup_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	d0cb      	beq.n	80043a8 <__swbuf_r+0x28>
 8004410:	f04f 37ff 	mov.w	r7, #4294967295
 8004414:	e7ea      	b.n	80043ec <__swbuf_r+0x6c>
 8004416:	bf00      	nop
 8004418:	08004978 	.word	0x08004978
 800441c:	08004998 	.word	0x08004998
 8004420:	08004958 	.word	0x08004958

08004424 <_write_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d07      	ldr	r5, [pc, #28]	; (8004444 <_write_r+0x20>)
 8004428:	4604      	mov	r4, r0
 800442a:	4608      	mov	r0, r1
 800442c:	4611      	mov	r1, r2
 800442e:	2200      	movs	r2, #0
 8004430:	602a      	str	r2, [r5, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	f7fc f8b8 	bl	80005a8 <_write>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_write_r+0x1e>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_write_r+0x1e>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	2000017c 	.word	0x2000017c

08004448 <__swsetup_r>:
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <__swsetup_r+0xcc>)
 800444a:	b570      	push	{r4, r5, r6, lr}
 800444c:	681d      	ldr	r5, [r3, #0]
 800444e:	4606      	mov	r6, r0
 8004450:	460c      	mov	r4, r1
 8004452:	b125      	cbz	r5, 800445e <__swsetup_r+0x16>
 8004454:	69ab      	ldr	r3, [r5, #24]
 8004456:	b913      	cbnz	r3, 800445e <__swsetup_r+0x16>
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff fb55 	bl	8003b08 <__sinit>
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <__swsetup_r+0xd0>)
 8004460:	429c      	cmp	r4, r3
 8004462:	d10f      	bne.n	8004484 <__swsetup_r+0x3c>
 8004464:	686c      	ldr	r4, [r5, #4]
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800446c:	0719      	lsls	r1, r3, #28
 800446e:	d42c      	bmi.n	80044ca <__swsetup_r+0x82>
 8004470:	06dd      	lsls	r5, r3, #27
 8004472:	d411      	bmi.n	8004498 <__swsetup_r+0x50>
 8004474:	2309      	movs	r3, #9
 8004476:	6033      	str	r3, [r6, #0]
 8004478:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800447c:	81a3      	strh	r3, [r4, #12]
 800447e:	f04f 30ff 	mov.w	r0, #4294967295
 8004482:	e03e      	b.n	8004502 <__swsetup_r+0xba>
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <__swsetup_r+0xd4>)
 8004486:	429c      	cmp	r4, r3
 8004488:	d101      	bne.n	800448e <__swsetup_r+0x46>
 800448a:	68ac      	ldr	r4, [r5, #8]
 800448c:	e7eb      	b.n	8004466 <__swsetup_r+0x1e>
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <__swsetup_r+0xd8>)
 8004490:	429c      	cmp	r4, r3
 8004492:	bf08      	it	eq
 8004494:	68ec      	ldreq	r4, [r5, #12]
 8004496:	e7e6      	b.n	8004466 <__swsetup_r+0x1e>
 8004498:	0758      	lsls	r0, r3, #29
 800449a:	d512      	bpl.n	80044c2 <__swsetup_r+0x7a>
 800449c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800449e:	b141      	cbz	r1, 80044b2 <__swsetup_r+0x6a>
 80044a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a4:	4299      	cmp	r1, r3
 80044a6:	d002      	beq.n	80044ae <__swsetup_r+0x66>
 80044a8:	4630      	mov	r0, r6
 80044aa:	f000 f98f 	bl	80047cc <_free_r>
 80044ae:	2300      	movs	r3, #0
 80044b0:	6363      	str	r3, [r4, #52]	; 0x34
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	2300      	movs	r3, #0
 80044bc:	6063      	str	r3, [r4, #4]
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f043 0308 	orr.w	r3, r3, #8
 80044c8:	81a3      	strh	r3, [r4, #12]
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	b94b      	cbnz	r3, 80044e2 <__swsetup_r+0x9a>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d8:	d003      	beq.n	80044e2 <__swsetup_r+0x9a>
 80044da:	4621      	mov	r1, r4
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f929 	bl	8004734 <__smakebuf_r>
 80044e2:	89a0      	ldrh	r0, [r4, #12]
 80044e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044e8:	f010 0301 	ands.w	r3, r0, #1
 80044ec:	d00a      	beq.n	8004504 <__swsetup_r+0xbc>
 80044ee:	2300      	movs	r3, #0
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	6963      	ldr	r3, [r4, #20]
 80044f4:	425b      	negs	r3, r3
 80044f6:	61a3      	str	r3, [r4, #24]
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	b943      	cbnz	r3, 800450e <__swsetup_r+0xc6>
 80044fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004500:	d1ba      	bne.n	8004478 <__swsetup_r+0x30>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	0781      	lsls	r1, r0, #30
 8004506:	bf58      	it	pl
 8004508:	6963      	ldrpl	r3, [r4, #20]
 800450a:	60a3      	str	r3, [r4, #8]
 800450c:	e7f4      	b.n	80044f8 <__swsetup_r+0xb0>
 800450e:	2000      	movs	r0, #0
 8004510:	e7f7      	b.n	8004502 <__swsetup_r+0xba>
 8004512:	bf00      	nop
 8004514:	20000010 	.word	0x20000010
 8004518:	08004978 	.word	0x08004978
 800451c:	08004998 	.word	0x08004998
 8004520:	08004958 	.word	0x08004958

08004524 <_close_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d06      	ldr	r5, [pc, #24]	; (8004540 <_close_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc fdd7 	bl	80010e2 <_close>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_close_r+0x1a>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_close_r+0x1a>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	2000017c 	.word	0x2000017c

08004544 <__sflush_r>:
 8004544:	898a      	ldrh	r2, [r1, #12]
 8004546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	4605      	mov	r5, r0
 800454c:	0710      	lsls	r0, r2, #28
 800454e:	460c      	mov	r4, r1
 8004550:	d458      	bmi.n	8004604 <__sflush_r+0xc0>
 8004552:	684b      	ldr	r3, [r1, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	dc05      	bgt.n	8004564 <__sflush_r+0x20>
 8004558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	dc02      	bgt.n	8004564 <__sflush_r+0x20>
 800455e:	2000      	movs	r0, #0
 8004560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004566:	2e00      	cmp	r6, #0
 8004568:	d0f9      	beq.n	800455e <__sflush_r+0x1a>
 800456a:	2300      	movs	r3, #0
 800456c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004570:	682f      	ldr	r7, [r5, #0]
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	d032      	beq.n	80045dc <__sflush_r+0x98>
 8004576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	075a      	lsls	r2, r3, #29
 800457c:	d505      	bpl.n	800458a <__sflush_r+0x46>
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	1ac0      	subs	r0, r0, r3
 8004582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004584:	b10b      	cbz	r3, 800458a <__sflush_r+0x46>
 8004586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004588:	1ac0      	subs	r0, r0, r3
 800458a:	2300      	movs	r3, #0
 800458c:	4602      	mov	r2, r0
 800458e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004590:	6a21      	ldr	r1, [r4, #32]
 8004592:	4628      	mov	r0, r5
 8004594:	47b0      	blx	r6
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	d106      	bne.n	80045aa <__sflush_r+0x66>
 800459c:	6829      	ldr	r1, [r5, #0]
 800459e:	291d      	cmp	r1, #29
 80045a0:	d82c      	bhi.n	80045fc <__sflush_r+0xb8>
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <__sflush_r+0x108>)
 80045a4:	40ca      	lsrs	r2, r1
 80045a6:	07d6      	lsls	r6, r2, #31
 80045a8:	d528      	bpl.n	80045fc <__sflush_r+0xb8>
 80045aa:	2200      	movs	r2, #0
 80045ac:	6062      	str	r2, [r4, #4]
 80045ae:	04d9      	lsls	r1, r3, #19
 80045b0:	6922      	ldr	r2, [r4, #16]
 80045b2:	6022      	str	r2, [r4, #0]
 80045b4:	d504      	bpl.n	80045c0 <__sflush_r+0x7c>
 80045b6:	1c42      	adds	r2, r0, #1
 80045b8:	d101      	bne.n	80045be <__sflush_r+0x7a>
 80045ba:	682b      	ldr	r3, [r5, #0]
 80045bc:	b903      	cbnz	r3, 80045c0 <__sflush_r+0x7c>
 80045be:	6560      	str	r0, [r4, #84]	; 0x54
 80045c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c2:	602f      	str	r7, [r5, #0]
 80045c4:	2900      	cmp	r1, #0
 80045c6:	d0ca      	beq.n	800455e <__sflush_r+0x1a>
 80045c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045cc:	4299      	cmp	r1, r3
 80045ce:	d002      	beq.n	80045d6 <__sflush_r+0x92>
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 f8fb 	bl	80047cc <_free_r>
 80045d6:	2000      	movs	r0, #0
 80045d8:	6360      	str	r0, [r4, #52]	; 0x34
 80045da:	e7c1      	b.n	8004560 <__sflush_r+0x1c>
 80045dc:	6a21      	ldr	r1, [r4, #32]
 80045de:	2301      	movs	r3, #1
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b0      	blx	r6
 80045e4:	1c41      	adds	r1, r0, #1
 80045e6:	d1c7      	bne.n	8004578 <__sflush_r+0x34>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0c4      	beq.n	8004578 <__sflush_r+0x34>
 80045ee:	2b1d      	cmp	r3, #29
 80045f0:	d001      	beq.n	80045f6 <__sflush_r+0xb2>
 80045f2:	2b16      	cmp	r3, #22
 80045f4:	d101      	bne.n	80045fa <__sflush_r+0xb6>
 80045f6:	602f      	str	r7, [r5, #0]
 80045f8:	e7b1      	b.n	800455e <__sflush_r+0x1a>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	e7ad      	b.n	8004560 <__sflush_r+0x1c>
 8004604:	690f      	ldr	r7, [r1, #16]
 8004606:	2f00      	cmp	r7, #0
 8004608:	d0a9      	beq.n	800455e <__sflush_r+0x1a>
 800460a:	0793      	lsls	r3, r2, #30
 800460c:	680e      	ldr	r6, [r1, #0]
 800460e:	bf08      	it	eq
 8004610:	694b      	ldreq	r3, [r1, #20]
 8004612:	600f      	str	r7, [r1, #0]
 8004614:	bf18      	it	ne
 8004616:	2300      	movne	r3, #0
 8004618:	eba6 0807 	sub.w	r8, r6, r7
 800461c:	608b      	str	r3, [r1, #8]
 800461e:	f1b8 0f00 	cmp.w	r8, #0
 8004622:	dd9c      	ble.n	800455e <__sflush_r+0x1a>
 8004624:	6a21      	ldr	r1, [r4, #32]
 8004626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004628:	4643      	mov	r3, r8
 800462a:	463a      	mov	r2, r7
 800462c:	4628      	mov	r0, r5
 800462e:	47b0      	blx	r6
 8004630:	2800      	cmp	r0, #0
 8004632:	dc06      	bgt.n	8004642 <__sflush_r+0xfe>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	e78e      	b.n	8004560 <__sflush_r+0x1c>
 8004642:	4407      	add	r7, r0
 8004644:	eba8 0800 	sub.w	r8, r8, r0
 8004648:	e7e9      	b.n	800461e <__sflush_r+0xda>
 800464a:	bf00      	nop
 800464c:	20400001 	.word	0x20400001

08004650 <_fflush_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	690b      	ldr	r3, [r1, #16]
 8004654:	4605      	mov	r5, r0
 8004656:	460c      	mov	r4, r1
 8004658:	b913      	cbnz	r3, 8004660 <_fflush_r+0x10>
 800465a:	2500      	movs	r5, #0
 800465c:	4628      	mov	r0, r5
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	b118      	cbz	r0, 800466a <_fflush_r+0x1a>
 8004662:	6983      	ldr	r3, [r0, #24]
 8004664:	b90b      	cbnz	r3, 800466a <_fflush_r+0x1a>
 8004666:	f7ff fa4f 	bl	8003b08 <__sinit>
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <_fflush_r+0x6c>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d11b      	bne.n	80046a8 <_fflush_r+0x58>
 8004670:	686c      	ldr	r4, [r5, #4]
 8004672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ef      	beq.n	800465a <_fflush_r+0xa>
 800467a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800467c:	07d0      	lsls	r0, r2, #31
 800467e:	d404      	bmi.n	800468a <_fflush_r+0x3a>
 8004680:	0599      	lsls	r1, r3, #22
 8004682:	d402      	bmi.n	800468a <_fflush_r+0x3a>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f7ff fadd 	bl	8003c44 <__retarget_lock_acquire_recursive>
 800468a:	4628      	mov	r0, r5
 800468c:	4621      	mov	r1, r4
 800468e:	f7ff ff59 	bl	8004544 <__sflush_r>
 8004692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004694:	07da      	lsls	r2, r3, #31
 8004696:	4605      	mov	r5, r0
 8004698:	d4e0      	bmi.n	800465c <_fflush_r+0xc>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	d4dd      	bmi.n	800465c <_fflush_r+0xc>
 80046a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046a2:	f7ff fad0 	bl	8003c46 <__retarget_lock_release_recursive>
 80046a6:	e7d9      	b.n	800465c <_fflush_r+0xc>
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <_fflush_r+0x70>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	d101      	bne.n	80046b2 <_fflush_r+0x62>
 80046ae:	68ac      	ldr	r4, [r5, #8]
 80046b0:	e7df      	b.n	8004672 <_fflush_r+0x22>
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <_fflush_r+0x74>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	bf08      	it	eq
 80046b8:	68ec      	ldreq	r4, [r5, #12]
 80046ba:	e7da      	b.n	8004672 <_fflush_r+0x22>
 80046bc:	08004978 	.word	0x08004978
 80046c0:	08004998 	.word	0x08004998
 80046c4:	08004958 	.word	0x08004958

080046c8 <_lseek_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d07      	ldr	r5, [pc, #28]	; (80046e8 <_lseek_r+0x20>)
 80046cc:	4604      	mov	r4, r0
 80046ce:	4608      	mov	r0, r1
 80046d0:	4611      	mov	r1, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	602a      	str	r2, [r5, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	f7fc fd2a 	bl	8001130 <_lseek>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_lseek_r+0x1e>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_lseek_r+0x1e>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	2000017c 	.word	0x2000017c

080046ec <__swhatbuf_r>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	460e      	mov	r6, r1
 80046f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f4:	2900      	cmp	r1, #0
 80046f6:	b096      	sub	sp, #88	; 0x58
 80046f8:	4614      	mov	r4, r2
 80046fa:	461d      	mov	r5, r3
 80046fc:	da07      	bge.n	800470e <__swhatbuf_r+0x22>
 80046fe:	2300      	movs	r3, #0
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	89b3      	ldrh	r3, [r6, #12]
 8004704:	061a      	lsls	r2, r3, #24
 8004706:	d410      	bmi.n	800472a <__swhatbuf_r+0x3e>
 8004708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470c:	e00e      	b.n	800472c <__swhatbuf_r+0x40>
 800470e:	466a      	mov	r2, sp
 8004710:	f000 f8be 	bl	8004890 <_fstat_r>
 8004714:	2800      	cmp	r0, #0
 8004716:	dbf2      	blt.n	80046fe <__swhatbuf_r+0x12>
 8004718:	9a01      	ldr	r2, [sp, #4]
 800471a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800471e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004722:	425a      	negs	r2, r3
 8004724:	415a      	adcs	r2, r3
 8004726:	602a      	str	r2, [r5, #0]
 8004728:	e7ee      	b.n	8004708 <__swhatbuf_r+0x1c>
 800472a:	2340      	movs	r3, #64	; 0x40
 800472c:	2000      	movs	r0, #0
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	b016      	add	sp, #88	; 0x58
 8004732:	bd70      	pop	{r4, r5, r6, pc}

08004734 <__smakebuf_r>:
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004738:	079d      	lsls	r5, r3, #30
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	d507      	bpl.n	8004750 <__smakebuf_r+0x1c>
 8004740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	6123      	str	r3, [r4, #16]
 8004748:	2301      	movs	r3, #1
 800474a:	6163      	str	r3, [r4, #20]
 800474c:	b002      	add	sp, #8
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	ab01      	add	r3, sp, #4
 8004752:	466a      	mov	r2, sp
 8004754:	f7ff ffca 	bl	80046ec <__swhatbuf_r>
 8004758:	9900      	ldr	r1, [sp, #0]
 800475a:	4605      	mov	r5, r0
 800475c:	4630      	mov	r0, r6
 800475e:	f7ff fa73 	bl	8003c48 <_malloc_r>
 8004762:	b948      	cbnz	r0, 8004778 <__smakebuf_r+0x44>
 8004764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004768:	059a      	lsls	r2, r3, #22
 800476a:	d4ef      	bmi.n	800474c <__smakebuf_r+0x18>
 800476c:	f023 0303 	bic.w	r3, r3, #3
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	81a3      	strh	r3, [r4, #12]
 8004776:	e7e3      	b.n	8004740 <__smakebuf_r+0xc>
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <__smakebuf_r+0x7c>)
 800477a:	62b3      	str	r3, [r6, #40]	; 0x28
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	6020      	str	r0, [r4, #0]
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	9b00      	ldr	r3, [sp, #0]
 8004788:	6163      	str	r3, [r4, #20]
 800478a:	9b01      	ldr	r3, [sp, #4]
 800478c:	6120      	str	r0, [r4, #16]
 800478e:	b15b      	cbz	r3, 80047a8 <__smakebuf_r+0x74>
 8004790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004794:	4630      	mov	r0, r6
 8004796:	f000 f88d 	bl	80048b4 <_isatty_r>
 800479a:	b128      	cbz	r0, 80047a8 <__smakebuf_r+0x74>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	81a3      	strh	r3, [r4, #12]
 80047a8:	89a0      	ldrh	r0, [r4, #12]
 80047aa:	4305      	orrs	r5, r0
 80047ac:	81a5      	strh	r5, [r4, #12]
 80047ae:	e7cd      	b.n	800474c <__smakebuf_r+0x18>
 80047b0:	08003aa1 	.word	0x08003aa1

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <__malloc_lock+0x8>)
 80047b6:	f7ff ba45 	b.w	8003c44 <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	20000174 	.word	0x20000174

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	; (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f7ff ba40 	b.w	8003c46 <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	20000174 	.word	0x20000174

080047cc <_free_r>:
 80047cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d048      	beq.n	8004864 <_free_r+0x98>
 80047d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d6:	9001      	str	r0, [sp, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f1a1 0404 	sub.w	r4, r1, #4
 80047de:	bfb8      	it	lt
 80047e0:	18e4      	addlt	r4, r4, r3
 80047e2:	f7ff ffe7 	bl	80047b4 <__malloc_lock>
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <_free_r+0x9c>)
 80047e8:	9801      	ldr	r0, [sp, #4]
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	4615      	mov	r5, r2
 80047ee:	b933      	cbnz	r3, 80047fe <_free_r+0x32>
 80047f0:	6063      	str	r3, [r4, #4]
 80047f2:	6014      	str	r4, [r2, #0]
 80047f4:	b003      	add	sp, #12
 80047f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047fa:	f7ff bfe1 	b.w	80047c0 <__malloc_unlock>
 80047fe:	42a3      	cmp	r3, r4
 8004800:	d90b      	bls.n	800481a <_free_r+0x4e>
 8004802:	6821      	ldr	r1, [r4, #0]
 8004804:	1862      	adds	r2, r4, r1
 8004806:	4293      	cmp	r3, r2
 8004808:	bf04      	itt	eq
 800480a:	681a      	ldreq	r2, [r3, #0]
 800480c:	685b      	ldreq	r3, [r3, #4]
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	bf04      	itt	eq
 8004812:	1852      	addeq	r2, r2, r1
 8004814:	6022      	streq	r2, [r4, #0]
 8004816:	602c      	str	r4, [r5, #0]
 8004818:	e7ec      	b.n	80047f4 <_free_r+0x28>
 800481a:	461a      	mov	r2, r3
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b10b      	cbz	r3, 8004824 <_free_r+0x58>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d9fa      	bls.n	800481a <_free_r+0x4e>
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	1855      	adds	r5, r2, r1
 8004828:	42a5      	cmp	r5, r4
 800482a:	d10b      	bne.n	8004844 <_free_r+0x78>
 800482c:	6824      	ldr	r4, [r4, #0]
 800482e:	4421      	add	r1, r4
 8004830:	1854      	adds	r4, r2, r1
 8004832:	42a3      	cmp	r3, r4
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	d1dd      	bne.n	80047f4 <_free_r+0x28>
 8004838:	681c      	ldr	r4, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	6053      	str	r3, [r2, #4]
 800483e:	4421      	add	r1, r4
 8004840:	6011      	str	r1, [r2, #0]
 8004842:	e7d7      	b.n	80047f4 <_free_r+0x28>
 8004844:	d902      	bls.n	800484c <_free_r+0x80>
 8004846:	230c      	movs	r3, #12
 8004848:	6003      	str	r3, [r0, #0]
 800484a:	e7d3      	b.n	80047f4 <_free_r+0x28>
 800484c:	6825      	ldr	r5, [r4, #0]
 800484e:	1961      	adds	r1, r4, r5
 8004850:	428b      	cmp	r3, r1
 8004852:	bf04      	itt	eq
 8004854:	6819      	ldreq	r1, [r3, #0]
 8004856:	685b      	ldreq	r3, [r3, #4]
 8004858:	6063      	str	r3, [r4, #4]
 800485a:	bf04      	itt	eq
 800485c:	1949      	addeq	r1, r1, r5
 800485e:	6021      	streq	r1, [r4, #0]
 8004860:	6054      	str	r4, [r2, #4]
 8004862:	e7c7      	b.n	80047f4 <_free_r+0x28>
 8004864:	b003      	add	sp, #12
 8004866:	bd30      	pop	{r4, r5, pc}
 8004868:	20000094 	.word	0x20000094

0800486c <_read_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d07      	ldr	r5, [pc, #28]	; (800488c <_read_r+0x20>)
 8004870:	4604      	mov	r4, r0
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	2200      	movs	r2, #0
 8004878:	602a      	str	r2, [r5, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	f7fc fc14 	bl	80010a8 <_read>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d102      	bne.n	800488a <_read_r+0x1e>
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	b103      	cbz	r3, 800488a <_read_r+0x1e>
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	bd38      	pop	{r3, r4, r5, pc}
 800488c:	2000017c 	.word	0x2000017c

08004890 <_fstat_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d07      	ldr	r5, [pc, #28]	; (80048b0 <_fstat_r+0x20>)
 8004894:	2300      	movs	r3, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	f7fc fc2c 	bl	80010fa <_fstat>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d102      	bne.n	80048ac <_fstat_r+0x1c>
 80048a6:	682b      	ldr	r3, [r5, #0]
 80048a8:	b103      	cbz	r3, 80048ac <_fstat_r+0x1c>
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
 80048ae:	bf00      	nop
 80048b0:	2000017c 	.word	0x2000017c

080048b4 <_isatty_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4d06      	ldr	r5, [pc, #24]	; (80048d0 <_isatty_r+0x1c>)
 80048b8:	2300      	movs	r3, #0
 80048ba:	4604      	mov	r4, r0
 80048bc:	4608      	mov	r0, r1
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	f7fc fc2b 	bl	800111a <_isatty>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_isatty_r+0x1a>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_isatty_r+0x1a>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	2000017c 	.word	0x2000017c

080048d4 <_init>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr

080048e0 <_fini>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr
