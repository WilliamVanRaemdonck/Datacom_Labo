
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004844  08004844  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800484c  0800484c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080048c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080048c8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e50  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  00032ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000361f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027705  00000000  00000000  00036f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013063  00000000  00000000  0005e66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2892  00000000  00000000  000716d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  00163fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004774 	.word	0x08004774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004774 	.word	0x08004774

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <_write>:

#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef xStatus;
	switch (file) {
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d003      	beq.n	80005c2 <_write+0x1a>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d015      	beq.n	80005ec <_write+0x44>
 80005c0:	e029      	b.n	8000616 <_write+0x6e>
	case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	481a      	ldr	r0, [pc, #104]	; (8000638 <_write+0x90>)
 80005ce:	f002 fcb9 	bl	8002f44 <HAL_UART_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d024      	beq.n	8000626 <_write+0x7e>
			errno = EIO;
 80005dc:	f003 f942 	bl	8003864 <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2205      	movs	r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
			return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e020      	b.n	800062e <_write+0x86>
		}
		break;
	case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <_write+0x90>)
 80005f8:	f002 fca4 	bl	8002f44 <HAL_UART_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d011      	beq.n	800062a <_write+0x82>
			errno = EIO;
 8000606:	f003 f92d 	bl	8003864 <__errno>
 800060a:	4603      	mov	r3, r0
 800060c:	2205      	movs	r2, #5
 800060e:	601a      	str	r2, [r3, #0]
			return -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	e00b      	b.n	800062e <_write+0x86>
		}
		break;
	default:
		errno = EBADF;
 8000616:	f003 f925 	bl	8003864 <__errno>
 800061a:	4603      	mov	r3, r0
 800061c:	2209      	movs	r2, #9
 800061e:	601a      	str	r2, [r3, #0]
		return -1;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	e003      	b.n	800062e <_write+0x86>
		break;
 8000626:	bf00      	nop
 8000628:	e000      	b.n	800062c <_write+0x84>
		break;
 800062a:	bf00      	nop
	}
	return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000009c 	.word	0x2000009c

0800063c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000642:	f000 fd44 	bl	80010ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000646:	f000 f821 	bl	800068c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064a:	f000 f8df 	bl	800080c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800064e:	f000 f8ad 	bl	80007ac <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t	slaveAdres = 0b00111010;
 8000652:	233a      	movs	r3, #58	; 0x3a
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t	memAdres = 0x0D;
 8000656:	230d      	movs	r3, #13
 8000658:	71bb      	strb	r3, [r7, #6]
	uint8_t	byteCount = 4;
 800065a:	2304      	movs	r3, #4
 800065c:	717b      	strb	r3, [r7, #5]
	uint8_t *buffer;

	uint8_t input = 0x00;
 800065e:	2300      	movs	r3, #0
 8000660:	713b      	strb	r3, [r7, #4]

	initI2C();
 8000662:	f000 f9b3 	bl	80009cc <initI2C>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		input = I2C_readMem(slaveAdres, memAdres, buffer, byteCount);
 8000666:	797b      	ldrb	r3, [r7, #5]
 8000668:	79b9      	ldrb	r1, [r7, #6]
 800066a:	79f8      	ldrb	r0, [r7, #7]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	f000 fa9f 	bl	8000bb0 <I2C_readMem>
 8000672:	4603      	mov	r3, r0
 8000674:	713b      	strb	r3, [r7, #4]

		printf("%d\n\r", input);
 8000676:	793b      	ldrb	r3, [r7, #4]
 8000678:	4619      	mov	r1, r3
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <main+0x4c>)
 800067c:	f003 f924 	bl	80038c8 <iprintf>

		HAL_Delay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 fd51 	bl	8001128 <HAL_Delay>
		input = I2C_readMem(slaveAdres, memAdres, buffer, byteCount);
 8000686:	e7ee      	b.n	8000666 <main+0x2a>
 8000688:	0800478c 	.word	0x0800478c

0800068c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b0b4      	sub	sp, #208	; 0xd0
 8000690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f90c 	bl	80038b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2284      	movs	r2, #132	; 0x84
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f8fd 	bl	80038b8 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006be:	f001 f817 	bl	80016f0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <SystemClock_Config+0x118>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a37      	ldr	r2, [pc, #220]	; (80007a4 <SystemClock_Config+0x118>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <SystemClock_Config+0x118>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <SystemClock_Config+0x11c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a32      	ldr	r2, [pc, #200]	; (80007a8 <SystemClock_Config+0x11c>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <SystemClock_Config+0x11c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 12;
 800070e:	230c      	movs	r3, #12
 8000710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000714:	23c0      	movs	r3, #192	; 0xc0
 8000716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f840 	bl	80017b0 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8000736:	f000 faed 	bl	8000d14 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073a:	f000 ffe9 	bl	8001710 <HAL_PWREx_EnableOverDrive>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 8000744:	f000 fae6 	bl	8000d14 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800076a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800076e:	2106      	movs	r1, #6
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fac1 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 800077c:	f000 faca 	bl	8000d14 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000784:	2300      	movs	r3, #0
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fcbb 	bl	8002108 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x110>
	{
		Error_Handler();
 8000798:	f000 fabc 	bl	8000d14 <Error_Handler>
	}
}
 800079c:	bf00      	nop
 800079e:	37d0      	adds	r7, #208	; 0xd0
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART1_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007f0:	f002 fb5a 	bl	8002ea8 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80007fa:	f000 fa8b 	bl	8000d14 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000009c 	.word	0x2000009c
 8000808:	40011000 	.word	0x40011000

0800080c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b62      	ldr	r3, [pc, #392]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b5f      	ldr	r3, [pc, #380]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a5e      	ldr	r2, [pc, #376]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000852:	4b59      	ldr	r3, [pc, #356]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a58      	ldr	r2, [pc, #352]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b56      	ldr	r3, [pc, #344]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a52      	ldr	r2, [pc, #328]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b4d      	ldr	r3, [pc, #308]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a4c      	ldr	r2, [pc, #304]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a46      	ldr	r2, [pc, #280]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <MX_GPIO_Init+0x1ac>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, I2C_SCL_Pin|I2C_SDA_Pin|SPI_MOSI_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80008b8:	4840      	ldr	r0, [pc, #256]	; (80009bc <MX_GPIO_Init+0x1b0>)
 80008ba:	f000 feff 	bl	80016bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	483f      	ldr	r0, [pc, #252]	; (80009c0 <MX_GPIO_Init+0x1b4>)
 80008c4:	f000 fefa 	bl	80016bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ce:	483d      	ldr	r0, [pc, #244]	; (80009c4 <MX_GPIO_Init+0x1b8>)
 80008d0:	f000 fef4 	bl	80016bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
	GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80008d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008da:	2311      	movs	r3, #17
 80008dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4833      	ldr	r0, [pc, #204]	; (80009bc <MX_GPIO_Init+0x1b0>)
 80008ee:	f000 fd21 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT_RTC_Pin SPI_MISO_Pin */
	GPIO_InitStruct.Pin = INT_RTC_Pin|SPI_MISO_Pin;
 80008f2:	f244 0310 	movw	r3, #16400	; 0x4010
 80008f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_GPIO_Init+0x1b0>)
 8000908:	f000 fd14 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_TEMP_Pin */
	GPIO_InitStruct.Pin = INT_TEMP_Pin;
 800090c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000910:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(INT_TEMP_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4828      	ldr	r0, [pc, #160]	; (80009c4 <MX_GPIO_Init+0x1b8>)
 8000922:	f000 fd07 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_SCK_Pin */
	GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4820      	ldr	r0, [pc, #128]	; (80009c0 <MX_GPIO_Init+0x1b4>)
 800093e:	f000 fcf9 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_MMA1_Pin */
	GPIO_InitStruct.Pin = INT_MMA1_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(INT_MMA1_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	481a      	ldr	r0, [pc, #104]	; (80009c0 <MX_GPIO_Init+0x1b4>)
 8000956:	f000 fced 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800095a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <MX_GPIO_Init+0x1b8>)
 8000974:	f000 fcde 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_MMA2_Pin */
	GPIO_InitStruct.Pin = INT_MMA2_Pin;
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(INT_MMA2_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	480f      	ldr	r0, [pc, #60]	; (80009c8 <MX_GPIO_Init+0x1bc>)
 800098c:	f000 fcd2 	bl	8001334 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8000990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000994:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x1b0>)
 80009aa:	f000 fcc3 	bl	8001334 <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40022000 	.word	0x40022000
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40021800 	.word	0x40021800

080009cc <initI2C>:

/* USER CODE BEGIN 4 */
void initI2C(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <initI2C+0x20>)
 80009d8:	f000 fe70 	bl	80016bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	4802      	ldr	r0, [pc, #8]	; (80009ec <initI2C+0x20>)
 80009e4:	f000 fe6a 	bl	80016bc <HAL_GPIO_WritePin>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40020400 	.word	0x40020400

080009f0 <I2C_start>:


//I2C_start zal de start conditie op de bus plaatsen en kan ook gebruikt worden voor een "repeated start".
//Een start bit is als men de data lijn laag maakt als de kloklijn hoog is.
void I2C_start(void){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <I2C_start+0x34>)
 80009fc:	f000 fe5e 	bl	80016bc <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <I2C_start+0x38>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f915 	bl	8000c34 <SysTickDelayCount>
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <I2C_start+0x34>)
 8000a12:	f000 fe53 	bl	80016bc <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <I2C_start+0x38>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f90a 	bl	8000c34 <SysTickDelayCount>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40020400 	.word	0x40020400
 8000a28:	20000000 	.word	0x20000000

08000a2c <I2C_stop>:

//I2C_stop zal de stop conditie op de bus plaatsen.
//Een stop bit is als men de data lijn hoog maakt als de kloklijn hoog is.
void I2C_stop(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <I2C_stop+0x34>)
 8000a38:	f000 fe40 	bl	80016bc <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <I2C_stop+0x38>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f8f7 	bl	8000c34 <SysTickDelayCount>
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <I2C_stop+0x34>)
 8000a4e:	f000 fe35 	bl	80016bc <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <I2C_stop+0x38>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f8ec 	bl	8000c34 <SysTickDelayCount>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020400 	.word	0x40020400
 8000a64:	20000000 	.word	0x20000000

08000a68 <I2C_write>:

//I2C_write zal 1 byte op de I2C bus plaatsen. Deze functie kan ook gebruikt worden om een slaveadres op de bus te plaatsen.
//De functie zal ook de ack binnen lezen en teruggeven (bij geldige ack op de bus geeft deze functie 0 terug)
uint8_t I2C_write(uint8_t data){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	uint8_t shift = 0x00;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0b00000001;
 8000a76:	2301      	movs	r3, #1
 8000a78:	737b      	strb	r3, [r7, #13]
	uint8_t result = 0x00;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	733b      	strb	r3, [r7, #12]
	uint8_t ack = 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	72fb      	strb	r3, [r7, #11]

	//send input
	shift = reverse(data);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f8ff 	bl	8000c88 <reverse>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index = 0; index < 8; index++){
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73bb      	strb	r3, [r7, #14]
 8000a92:	e02f      	b.n	8000af4 <I2C_write+0x8c>
		result = shift & mask;
 8000a94:	7bfa      	ldrb	r2, [r7, #15]
 8000a96:	7b7b      	ldrb	r3, [r7, #13]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	733b      	strb	r3, [r7, #12]
		if(result == 0x01){
 8000a9c:	7b3b      	ldrb	r3, [r7, #12]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d106      	bne.n	8000ab0 <I2C_write+0x48>
			HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	4828      	ldr	r0, [pc, #160]	; (8000b4c <I2C_write+0xe4>)
 8000aaa:	f000 fe07 	bl	80016bc <HAL_GPIO_WritePin>
 8000aae:	e005      	b.n	8000abc <I2C_write+0x54>
		}
		else{
			HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	4825      	ldr	r0, [pc, #148]	; (8000b4c <I2C_write+0xe4>)
 8000ab8:	f000 fe00 	bl	80016bc <HAL_GPIO_WritePin>
		}

		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <I2C_write+0xe4>)
 8000ac4:	f000 fdfa 	bl	80016bc <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <I2C_write+0xe8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f8b1 	bl	8000c34 <SysTickDelayCount>
		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad8:	481c      	ldr	r0, [pc, #112]	; (8000b4c <I2C_write+0xe4>)
 8000ada:	f000 fdef 	bl	80016bc <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <I2C_write+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f8a6 	bl	8000c34 <SysTickDelayCount>

		shift = (shift >> 1);	//shift right by one
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	085b      	lsrs	r3, r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index = 0; index < 8; index++){
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	3301      	adds	r3, #1
 8000af2:	73bb      	strb	r3, [r7, #14]
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	2b07      	cmp	r3, #7
 8000af8:	d9cc      	bls.n	8000a94 <I2C_write+0x2c>
	}
	//ACK
	HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <I2C_write+0xe4>)
 8000b02:	f000 fddb 	bl	80016bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0c:	480f      	ldr	r0, [pc, #60]	; (8000b4c <I2C_write+0xe4>)
 8000b0e:	f000 fdd5 	bl	80016bc <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <I2C_write+0xe8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f88c 	bl	8000c34 <SysTickDelayCount>

	ack = HAL_GPIO_ReadPin(I2C_SDA_GPIO_Port, I2C_SDA_Pin);
 8000b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <I2C_write+0xe4>)
 8000b22:	f000 fdb3 	bl	800168c <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <I2C_write+0xe4>)
 8000b32:	f000 fdc3 	bl	80016bc <HAL_GPIO_WritePin>
	SysTickDelayCount(delay1us);
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <I2C_write+0xe8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f87a 	bl	8000c34 <SysTickDelayCount>

	return ack;
 8000b40:	7afb      	ldrb	r3, [r7, #11]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	20000000 	.word	0x20000000

08000b54 <I2C_read>:

//I2C_read zal 1 byte van de I2C bus lezen en al dan niet een ack of een nack terug sturen
//afhankelijk van het argument dat je meegeeft. (ack is 0, nack is 1)
uint8_t I2C_read(uint8_t ack){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t index = 0; index < 8; index++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e018      	b.n	8000b96 <I2C_read+0x42>
		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <I2C_read+0x54>)
 8000b6c:	f000 fda6 	bl	80016bc <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <I2C_read+0x58>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f85d 	bl	8000c34 <SysTickDelayCount>

		//read bit and shift

		HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <I2C_read+0x54>)
 8000b82:	f000 fd9b 	bl	80016bc <HAL_GPIO_WritePin>
		SysTickDelayCount(delay1us);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <I2C_read+0x58>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f852 	bl	8000c34 <SysTickDelayCount>
	for(uint8_t index = 0; index < 8; index++){
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	d9e3      	bls.n	8000b64 <I2C_read+0x10>

	}
	return 0x00;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	20000000 	.word	0x20000000

08000bb0 <I2C_readMem>:

//I2C_readMem zal eerst de slave adreseren dan het register adres op de bus schrijven en na een repeated start
//het register lezen. De functie returned het aantal gelezen bytes.
uint8_t I2C_readMem(uint8_t slaveAdres, uint8_t memAdres, uint8_t * buffer, uint8_t byteCount){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	603a      	str	r2, [r7, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	717b      	strb	r3, [r7, #5]
	uint8_t input = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
	uint8_t ack = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73bb      	strb	r3, [r7, #14]

	I2C_start();
 8000bce:	f7ff ff0f 	bl	80009f0 <I2C_start>

	ack = I2C_write(slaveAdres);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff47 	bl	8000a68 <I2C_write>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73bb      	strb	r3, [r7, #14]
	SysTickDelayCount(delay1us);
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <I2C_readMem+0x80>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f826 	bl	8000c34 <SysTickDelayCount>
	ack = I2C_write(memAdres);
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff3c 	bl	8000a68 <I2C_write>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73bb      	strb	r3, [r7, #14]
	SysTickDelayCount(delay1us);
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <I2C_readMem+0x80>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f81b 	bl	8000c34 <SysTickDelayCount>
	ack = I2C_write(slaveAdres+1);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff2f 	bl	8000a68 <I2C_write>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73bb      	strb	r3, [r7, #14]
	SysTickDelayCount(delay1us);
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <I2C_readMem+0x80>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f80e 	bl	8000c34 <SysTickDelayCount>

	input = I2C_read(0x00);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff ff9b 	bl	8000b54 <I2C_read>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	73fb      	strb	r3, [r7, #15]

	I2C_stop();
 8000c22:	f7ff ff03 	bl	8000a2c <I2C_stop>

	return input;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000000 	.word	0x20000000

08000c34 <SysTickDelayCount>:

void SysTickDelayCount(uint32_t ulCount){
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SysTickDelayCount+0x48>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <SysTickDelayCount+0x48>)
 8000c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c46:	60d3      	str	r3, [r2, #12]
	DWT->LAR = 0xC5ACCE55;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <SysTickDelayCount+0x4c>)
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <SysTickDelayCount+0x50>)
 8000c4c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <SysTickDelayCount+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SysTickDelayCount+0x4c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <SysTickDelayCount+0x4c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6013      	str	r3, [r2, #0]

	while(DWT->CYCCNT < ulCount);
 8000c62:	bf00      	nop
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <SysTickDelayCount+0x4c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d8fa      	bhi.n	8000c64 <SysTickDelayCount+0x30>
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000edf0 	.word	0xe000edf0
 8000c80:	e0001000 	.word	0xe0001000
 8000c84:	c5acce55 	.word	0xc5acce55

08000c88 <reverse>:


uint8_t reverse(uint8_t b) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	b = (b & 0xF0) >> 4 | (b & 0x0F) << 4;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	091b      	lsrs	r3, r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	71fb      	strb	r3, [r7, #7]
	b = (b & 0xCC) >> 2 | (b & 0x33) << 2;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	109b      	asrs	r3, r3, #2
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8000cb0:	b25a      	sxtb	r2, r3
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	f023 0333 	bic.w	r3, r3, #51	; 0x33
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	71fb      	strb	r3, [r7, #7]
	b = (b & 0xAA) >> 1 | (b & 0x55) << 1;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	105b      	asrs	r3, r3, #1
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	f003 0355 	and.w	r3, r3, #85	; 0x55
 8000cce:	b25a      	sxtb	r2, r3
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	f023 0355 	bic.w	r3, r3, #85	; 0x55
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	71fb      	strb	r3, [r7, #7]
	return b;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d02:	f000 f9f1 	bl	80010e8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000

08000d14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_UART_MspInit+0xb4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d144      	bne.n	8000e14 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000d90:	f043 0310 	orr.w	r3, r3, #16
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_UART_MspInit+0xb8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <HAL_UART_MspInit+0xbc>)
 8000dee:	f000 faa1 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e04:	2307      	movs	r3, #7
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <HAL_UART_MspInit+0xc0>)
 8000e10:	f000 fa90 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	2019      	movs	r0, #25
 8000e42:	f000 fa4d 	bl	80012e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e46:	2019      	movs	r0, #25
 8000e48:	f000 fa66 	bl	8001318 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_InitTick+0xa0>)
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <HAL_InitTick+0xa0>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6453      	str	r3, [r2, #68]	; 0x44
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_InitTick+0xa0>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e64:	f107 0210 	add.w	r2, r7, #16
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 f918 	bl	80020a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e74:	f001 f902 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_InitTick+0xa4>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	0c9b      	lsrs	r3, r3, #18
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_InitTick+0xac>)
 8000e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000eae:	f001 fd1b 	bl	80028e8 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d104      	bne.n	8000ec2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000eba:	f001 fd77 	bl	80029ac <HAL_TIM_Base_Start_IT>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3730      	adds	r7, #48	; 0x30
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	431bde83 	.word	0x431bde83
 8000ed4:	20000120 	.word	0x20000120
 8000ed8:	40010000 	.word	0x40010000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f3a:	f001 fdaf 	bl	8002a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000120 	.word	0x20000120

08000f48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
	}

return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000faa:	605a      	str	r2, [r3, #4]
	return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_isatty>:

int _isatty(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	return 0;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f002 fc22 	bl	8003864 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20050000 	.word	0x20050000
 800104c:	00000400 	.word	0x00000400
 8001050:	20000090 	.word	0x20000090
 8001054:	20000180 	.word	0x20000180

08001058 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f002 fbe1 	bl	8003870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fac5 	bl	800063c <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010c0:	08004854 	.word	0x08004854
  ldr r2, =_sbss
 80010c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010c8:	20000180 	.word	0x20000180

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>

080010ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f000 f8f9 	bl	80012ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d8:	200f      	movs	r0, #15
 80010da:	f7ff fea7 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010de:	f7ff fe1f 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c
 800110c:	2000016c 	.word	0x2000016c

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000016c 	.word	0x2000016c

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000000c 	.word	0x2000000c

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	4313      	orrs	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00
 80011b4:	05fa0000 	.word	0x05fa0000

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff4c 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f2:	f7ff ff61 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 80012f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff ffb1 	bl	8001264 <NVIC_EncodePriority>
 8001302:	4602      	mov	r2, r0
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff80 	bl	8001210 <__NVIC_SetPriority>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff54 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	e175      	b.n	8001640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 8164 	bne.w	800163a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d005      	beq.n	800138a <HAL_GPIO_Init+0x56>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d130      	bne.n	80013ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d017      	beq.n	8001428 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80be 	beq.w	800163a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_GPIO_Init+0x324>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a65      	ldr	r2, [pc, #404]	; (8001658 <HAL_GPIO_Init+0x324>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_GPIO_Init+0x324>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014d6:	4a61      	ldr	r2, [pc, #388]	; (800165c <HAL_GPIO_Init+0x328>)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a58      	ldr	r2, [pc, #352]	; (8001660 <HAL_GPIO_Init+0x32c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d037      	beq.n	8001572 <HAL_GPIO_Init+0x23e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a57      	ldr	r2, [pc, #348]	; (8001664 <HAL_GPIO_Init+0x330>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d031      	beq.n	800156e <HAL_GPIO_Init+0x23a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a56      	ldr	r2, [pc, #344]	; (8001668 <HAL_GPIO_Init+0x334>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02b      	beq.n	800156a <HAL_GPIO_Init+0x236>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a55      	ldr	r2, [pc, #340]	; (800166c <HAL_GPIO_Init+0x338>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d025      	beq.n	8001566 <HAL_GPIO_Init+0x232>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <HAL_GPIO_Init+0x33c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x22e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_GPIO_Init+0x340>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x22a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_GPIO_Init+0x344>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x226>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a51      	ldr	r2, [pc, #324]	; (800167c <HAL_GPIO_Init+0x348>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x222>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a50      	ldr	r2, [pc, #320]	; (8001680 <HAL_GPIO_Init+0x34c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x21e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	; (8001684 <HAL_GPIO_Init+0x350>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x21a>
 800154a:	2309      	movs	r3, #9
 800154c:	e012      	b.n	8001574 <HAL_GPIO_Init+0x240>
 800154e:	230a      	movs	r3, #10
 8001550:	e010      	b.n	8001574 <HAL_GPIO_Init+0x240>
 8001552:	2308      	movs	r3, #8
 8001554:	e00e      	b.n	8001574 <HAL_GPIO_Init+0x240>
 8001556:	2307      	movs	r3, #7
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x240>
 800155a:	2306      	movs	r3, #6
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x240>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x240>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x240>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x240>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x240>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x240>
 8001572:	2300      	movs	r3, #0
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001584:	4935      	ldr	r1, [pc, #212]	; (800165c <HAL_GPIO_Init+0x328>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_GPIO_Init+0x354>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a34      	ldr	r2, [pc, #208]	; (8001688 <HAL_GPIO_Init+0x354>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b32      	ldr	r3, [pc, #200]	; (8001688 <HAL_GPIO_Init+0x354>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a29      	ldr	r2, [pc, #164]	; (8001688 <HAL_GPIO_Init+0x354>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_GPIO_Init+0x354>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_GPIO_Init+0x354>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_GPIO_Init+0x354>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_GPIO_Init+0x354>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f67f ae86 	bls.w	8001354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40021400 	.word	0x40021400
 8001678:	40021800 	.word	0x40021800
 800167c:	40021c00 	.word	0x40021c00
 8001680:	40022000 	.word	0x40022000
 8001684:	40022400 	.word	0x40022400
 8001688:	40013c00 	.word	0x40013c00

0800168c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e001      	b.n	80016ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000

08001710 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800173e:	f7ff fce7 	bl	8001110 <HAL_GetTick>
 8001742:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001744:	e009      	b.n	800175a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001746:	f7ff fce3 	bl	8001110 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001754:	d901      	bls.n	800175a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e022      	b.n	80017a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001766:	d1ee      	bne.n	8001746 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800176e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001772:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff fccc 	bl	8001110 <HAL_GetTick>
 8001778:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800177a:	e009      	b.n	8001790 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800177c:	f7ff fcc8 	bl	8001110 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178a:	d901      	bls.n	8001790 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e007      	b.n	80017a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800179c:	d1ee      	bne.n	800177c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e291      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 8087 	beq.w	80018e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d4:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d00c      	beq.n	80017fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e0:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d112      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
 80017ec:	4b90      	ldr	r3, [pc, #576]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017f8:	d10b      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fa:	4b8d      	ldr	r3, [pc, #564]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d06c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x130>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d168      	bne.n	80018e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e26b      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x7a>
 800181c:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a83      	ldr	r2, [pc, #524]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e02e      	b.n	8001888 <HAL_RCC_OscConfig+0xd8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x9c>
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a7e      	ldr	r2, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	4b7c      	ldr	r3, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7b      	ldr	r2, [pc, #492]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0xd8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0xc0>
 8001856:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a75      	ldr	r2, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a72      	ldr	r2, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0xd8>
 8001870:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b6c      	ldr	r3, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6b      	ldr	r2, [pc, #428]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fc3e 	bl	8001110 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fc3a 	bl	8001110 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e21f      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xe8>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc2a 	bl	8001110 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc26 	bl	8001110 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e20b      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x110>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d069      	beq.n	80019c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b08      	cmp	r3, #8
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x190>
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x17a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1df      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	493d      	ldr	r1, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e040      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d023      	beq.n	8001990 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fbdc 	bl	8001110 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff fbd8 	bl	8001110 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1bd      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4929      	ldr	r1, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fbb8 	bl	8001110 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a4:	f7ff fbb4 	bl	8001110 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e199      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d038      	beq.n	8001a40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb95 	bl	8001110 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fb91 	bl	8001110 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e176      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 80019fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x23a>
 8001a08:	e01a      	b.n	8001a40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_RCC_OscConfig+0x280>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff fb7b 	bl	8001110 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fb77 	bl	8001110 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d903      	bls.n	8001a34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e15c      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
 8001a30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b91      	ldr	r3, [pc, #580]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a4 	beq.w	8001b96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a4e:	4b8b      	ldr	r3, [pc, #556]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10d      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a87      	ldr	r2, [pc, #540]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a82:	4b7f      	ldr	r3, [pc, #508]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7e      	ldr	r2, [pc, #504]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb3f 	bl	8001110 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7ff fb3b 	bl	8001110 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e120      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa8:	4b75      	ldr	r3, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x4d0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x31a>
 8001abc:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	4a6e      	ldr	r2, [pc, #440]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac8:	e02d      	b.n	8001b26 <HAL_RCC_OscConfig+0x376>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x33c>
 8001ad2:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	4a66      	ldr	r2, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aea:	e01c      	b.n	8001b26 <HAL_RCC_OscConfig+0x376>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0x35e>
 8001af4:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a60      	ldr	r2, [pc, #384]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	4b5e      	ldr	r3, [pc, #376]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b04:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0c:	e00b      	b.n	8001b26 <HAL_RCC_OscConfig+0x376>
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a5a      	ldr	r2, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	4a57      	ldr	r2, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d015      	beq.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff faef 	bl	8001110 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff faeb 	bl	8001110 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0ce      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ee      	beq.n	8001b36 <HAL_RCC_OscConfig+0x386>
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fad9 	bl	8001110 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fad5 	bl	8001110 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ee      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d105      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a4 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d06b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d149      	bne.n	8001c48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a30      	ldr	r2, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff faa6 	bl	8001110 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff faa2 	bl	8001110 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e087      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fa76 	bl	8001110 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fa72 	bl	8001110 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e057      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x478>
 8001c46:	e04f      	b.n	8001ce8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fa5c 	bl	8001110 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fa58 	bl	8001110 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e03d      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_RCC_OscConfig+0x4cc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4ac>
 8001c7a:	e035      	b.n	8001ce8 <HAL_RCC_OscConfig+0x538>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_RCC_OscConfig+0x544>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d028      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d121      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d11a      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d111      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0d0      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 020f 	bic.w	r2, r3, #15
 8001d26:	4965      	ldr	r1, [pc, #404]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0b8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	494d      	ldr	r1, [pc, #308]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d040      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e073      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e06b      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4936      	ldr	r1, [pc, #216]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dec:	f7ff f990 	bl	8001110 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7ff f98c 	bl	8001110 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e053      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d210      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 020f 	bic.w	r2, r3, #15
 8001e32:	4922      	ldr	r1, [pc, #136]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e032      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8a:	f000 f821 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	490a      	ldr	r1, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	5ccb      	ldrb	r3, [r1, r3]
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1d4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ffbe 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08004794 	.word	0x08004794
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6079      	str	r1, [r7, #4]
 8001eda:	2100      	movs	r1, #0
 8001edc:	60f9      	str	r1, [r7, #12]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee6:	4952      	ldr	r1, [pc, #328]	; (8002030 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ee8:	6889      	ldr	r1, [r1, #8]
 8001eea:	f001 010c 	and.w	r1, r1, #12
 8001eee:	2908      	cmp	r1, #8
 8001ef0:	d00d      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x3e>
 8001ef2:	2908      	cmp	r1, #8
 8001ef4:	f200 8094 	bhi.w	8002020 <HAL_RCC_GetSysClockFreq+0x150>
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x32>
 8001efc:	2904      	cmp	r1, #4
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x38>
 8001f00:	e08e      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f04:	60bb      	str	r3, [r7, #8]
      break;
 8001f06:	e08e      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f0a:	60bb      	str	r3, [r7, #8]
      break;
 8001f0c:	e08b      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0e:	4948      	ldr	r1, [pc, #288]	; (8002030 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f10:	6849      	ldr	r1, [r1, #4]
 8001f12:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f16:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f18:	4945      	ldr	r1, [pc, #276]	; (8002030 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f1a:	6849      	ldr	r1, [r1, #4]
 8001f1c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f20:	2900      	cmp	r1, #0
 8001f22:	d024      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4942      	ldr	r1, [pc, #264]	; (8002030 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f26:	6849      	ldr	r1, [r1, #4]
 8001f28:	0989      	lsrs	r1, r1, #6
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	f04f 0100 	mov.w	r1, #0
 8001f30:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001f34:	f04f 0500 	mov.w	r5, #0
 8001f38:	ea00 0204 	and.w	r2, r0, r4
 8001f3c:	ea01 0305 	and.w	r3, r1, r5
 8001f40:	493d      	ldr	r1, [pc, #244]	; (8002038 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f42:	fb01 f003 	mul.w	r0, r1, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	fb01 f102 	mul.w	r1, r1, r2
 8001f4c:	1844      	adds	r4, r0, r1
 8001f4e:	493a      	ldr	r1, [pc, #232]	; (8002038 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f50:	fba2 0101 	umull	r0, r1, r2, r1
 8001f54:	1863      	adds	r3, r4, r1
 8001f56:	4619      	mov	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	f7fe f9a6 	bl	80002b0 <__aeabi_uldivmod>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4613      	mov	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e04a      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	461a      	mov	r2, r3
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f7e:	f04f 0100 	mov.w	r1, #0
 8001f82:	ea02 0400 	and.w	r4, r2, r0
 8001f86:	ea03 0501 	and.w	r5, r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	014b      	lsls	r3, r1, #5
 8001f98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f9c:	0142      	lsls	r2, r0, #5
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	1b00      	subs	r0, r0, r4
 8001fa4:	eb61 0105 	sbc.w	r1, r1, r5
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	018b      	lsls	r3, r1, #6
 8001fb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fb6:	0182      	lsls	r2, r0, #6
 8001fb8:	1a12      	subs	r2, r2, r0
 8001fba:	eb63 0301 	sbc.w	r3, r3, r1
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	00d9      	lsls	r1, r3, #3
 8001fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fcc:	00d0      	lsls	r0, r2, #3
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	1912      	adds	r2, r2, r4
 8001fd4:	eb45 0303 	adc.w	r3, r5, r3
 8001fd8:	f04f 0000 	mov.w	r0, #0
 8001fdc:	f04f 0100 	mov.w	r1, #0
 8001fe0:	0299      	lsls	r1, r3, #10
 8001fe2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fe6:	0290      	lsls	r0, r2, #10
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	f7fe f95a 	bl	80002b0 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_GetSysClockFreq+0x160>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	60bb      	str	r3, [r7, #8]
      break;
 800201e:	e002      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_RCC_GetSysClockFreq+0x164>)
 8002022:	60bb      	str	r3, [r7, #8]
      break;
 8002024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002026:	68bb      	ldr	r3, [r7, #8]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bdb0      	pop	{r4, r5, r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	00f42400 	.word	0x00f42400
 8002038:	017d7840 	.word	0x017d7840

0800203c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_RCC_GetHCLKFreq+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000004 	.word	0x20000004

08002054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002058:	f7ff fff0 	bl	800203c <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0a9b      	lsrs	r3, r3, #10
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	080047a4 	.word	0x080047a4

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002080:	f7ff ffdc 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0b5b      	lsrs	r3, r3, #13
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	080047a4 	.word	0x080047a4

080020a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	220f      	movs	r2, #15
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0203 	and.w	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_RCC_GetClockConfig+0x60>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 020f 	and.w	r2, r3, #15
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002130:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002136:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800213a:	6093      	str	r3, [r2, #8]
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	4964      	ldr	r1, [pc, #400]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d017      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002170:	4959      	ldr	r1, [pc, #356]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d017      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800219e:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	494a      	ldr	r1, [pc, #296]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021bc:	d101      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 808b 	beq.w	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002204:	4b35      	ldr	r3, [pc, #212]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a34      	ldr	r2, [pc, #208]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002210:	f7fe ff7e 	bl	8001110 <HAL_GetTick>
 8002214:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe ff7a 	bl	8001110 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e357      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d035      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	d02e      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d114      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe ff42 	bl	8001110 <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7fe ff3e 	bl	8001110 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	; 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e319      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0ee      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022be:	d111      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022ce:	400b      	ands	r3, r1
 80022d0:	4901      	ldr	r1, [pc, #4]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
 80022d6:	e00b      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
 80022e0:	0ffffcff 	.word	0x0ffffcff
 80022e4:	4bb1      	ldr	r3, [pc, #708]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4ab0      	ldr	r2, [pc, #704]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ee:	6093      	str	r3, [r2, #8]
 80022f0:	4bae      	ldr	r3, [pc, #696]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fc:	49ab      	ldr	r1, [pc, #684]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800230e:	4ba7      	ldr	r3, [pc, #668]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002314:	4aa5      	ldr	r2, [pc, #660]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800231e:	4ba3      	ldr	r3, [pc, #652]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002320:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	49a0      	ldr	r1, [pc, #640]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233c:	4b9b      	ldr	r3, [pc, #620]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234a:	4998      	ldr	r1, [pc, #608]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800235e:	4b93      	ldr	r3, [pc, #588]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236c:	498f      	ldr	r1, [pc, #572]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002380:	4b8a      	ldr	r3, [pc, #552]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238e:	4987      	ldr	r1, [pc, #540]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	497e      	ldr	r1, [pc, #504]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	4976      	ldr	r1, [pc, #472]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023e6:	4b71      	ldr	r3, [pc, #452]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f023 020c 	bic.w	r2, r3, #12
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f4:	496d      	ldr	r1, [pc, #436]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002408:	4b68      	ldr	r3, [pc, #416]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	4965      	ldr	r1, [pc, #404]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800242a:	4b60      	ldr	r3, [pc, #384]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002438:	495c      	ldr	r1, [pc, #368]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800244c:	4b57      	ldr	r3, [pc, #348]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	4954      	ldr	r1, [pc, #336]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800246e:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	494b      	ldr	r1, [pc, #300]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	4943      	ldr	r1, [pc, #268]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	493a      	ldr	r1, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024d4:	4b35      	ldr	r3, [pc, #212]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e2:	4932      	ldr	r1, [pc, #200]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024f6:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002504:	4929      	ldr	r1, [pc, #164]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002514:	d101      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	4919      	ldr	r1, [pc, #100]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002568:	4910      	ldr	r1, [pc, #64]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d006      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80d9 	beq.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002590:	f7fe fdbe 	bl	8001110 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002596:	e00b      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002598:	f7fe fdba 	bl	8001110 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d904      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e197      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025b0:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ed      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d021      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11d      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025d0:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d6:	0c1b      	lsrs	r3, r3, #16
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e4:	0e1b      	lsrs	r3, r3, #24
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	019a      	lsls	r2, r3, #6
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	071b      	lsls	r3, r3, #28
 8002604:	4957      	ldr	r1, [pc, #348]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02e      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002636:	d129      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264c:	0f1b      	lsrs	r3, r3, #28
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	019a      	lsls	r2, r3, #6
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	431a      	orrs	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	071b      	lsls	r3, r3, #28
 800266c:	493d      	ldr	r1, [pc, #244]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267a:	f023 021f 	bic.w	r2, r3, #31
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	4937      	ldr	r1, [pc, #220]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01d      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800269a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800269e:	0e1b      	lsrs	r3, r3, #24
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ac:	0f1b      	lsrs	r3, r3, #28
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	019a      	lsls	r2, r3, #6
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	071b      	lsls	r3, r3, #28
 80026cc:	4925      	ldr	r1, [pc, #148]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d011      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	019a      	lsls	r2, r3, #6
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	071b      	lsls	r3, r3, #28
 80026fc:	4919      	ldr	r1, [pc, #100]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800270a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800270e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fcfe 	bl	8001110 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002718:	f7fe fcfa 	bl	8001110 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0d7      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 80cd 	bne.w	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274a:	f7fe fce1 	bl	8001110 <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002752:	f7fe fcdd 	bl	8001110 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d903      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ba      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002764:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002768:	4b5e      	ldr	r3, [pc, #376]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002774:	d0ed      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d12a      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800279e:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	0c1b      	lsrs	r3, r3, #16
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027ac:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	0f1b      	lsrs	r3, r3, #28
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	019a      	lsls	r2, r3, #6
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	061b      	lsls	r3, r3, #24
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	071b      	lsls	r3, r3, #28
 80027d2:	4944      	ldr	r1, [pc, #272]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027da:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	493d      	ldr	r1, [pc, #244]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d022      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002808:	d11d      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	0e1b      	lsrs	r3, r3, #24
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	0f1b      	lsrs	r3, r3, #28
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	019a      	lsls	r2, r3, #6
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	431a      	orrs	r2, r3
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	431a      	orrs	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	4929      	ldr	r1, [pc, #164]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d028      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	0e1b      	lsrs	r3, r3, #24
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	019a      	lsls	r2, r3, #6
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	431a      	orrs	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	071b      	lsls	r3, r3, #28
 8002886:	4917      	ldr	r1, [pc, #92]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	4911      	ldr	r1, [pc, #68]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe fc2e 	bl	8001110 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028b8:	f7fe fc2a 	bl	8001110 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e007      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d6:	d1ef      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e049      	b.n	800298e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f841 	bl	8002996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 fa00 	bl	8002d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d001      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e054      	b.n	8002a6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_TIM_Base_Start_IT+0xd0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d022      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ee:	d01d      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <HAL_TIM_Base_Start_IT+0xd4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d018      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00e      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_TIM_Base_Start_IT+0xe0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d009      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_TIM_Base_Start_IT+0xe4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x80>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_TIM_Base_Start_IT+0xe8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d115      	bne.n	8002a58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_TIM_Base_Start_IT+0xec>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d015      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0xbe>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d011      	beq.n	8002a6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	e008      	b.n	8002a6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e000      	b.n	8002a6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40010400 	.word	0x40010400
 8002a90:	40014000 	.word	0x40014000
 8002a94:	40001800 	.word	0x40001800
 8002a98:	00010007 	.word	0x00010007

08002a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0202 	mvn.w	r2, #2
 8002ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f905 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8f7 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f908 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0204 	mvn.w	r2, #4
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8db 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8cd 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8de 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0208 	mvn.w	r2, #8
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8b1 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8a3 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8b4 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0210 	mvn.w	r2, #16
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f887 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f879 	bl	8002cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f88a 	bl	8002d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0201 	mvn.w	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe f868 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f91a 	bl	8002e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f90d 	bl	8002e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d10e      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d107      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f838 	bl	8002d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d107      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0220 	mvn.w	r2, #32
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8cd 	bl	8002e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <TIM_Base_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4a:	d00f      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	; (8002e44 <TIM_Base_SetConfig+0x118>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3c      	ldr	r2, [pc, #240]	; (8002e48 <TIM_Base_SetConfig+0x11c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d007      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <TIM_Base_SetConfig+0x120>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3a      	ldr	r2, [pc, #232]	; (8002e50 <TIM_Base_SetConfig+0x124>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d108      	bne.n	8002d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <TIM_Base_SetConfig+0x114>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02b      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8c:	d027      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <TIM_Base_SetConfig+0x118>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d023      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <TIM_Base_SetConfig+0x11c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01f      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <TIM_Base_SetConfig+0x120>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01b      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <TIM_Base_SetConfig+0x124>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d017      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a28      	ldr	r2, [pc, #160]	; (8002e54 <TIM_Base_SetConfig+0x128>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <TIM_Base_SetConfig+0x12c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00f      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <TIM_Base_SetConfig+0x130>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <TIM_Base_SetConfig+0x134>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <TIM_Base_SetConfig+0x138>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <TIM_Base_SetConfig+0x13c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d108      	bne.n	8002df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <TIM_Base_SetConfig+0x114>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_Base_SetConfig+0xf8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <TIM_Base_SetConfig+0x124>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d103      	bne.n	8002e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	615a      	str	r2, [r3, #20]
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800
 8002e60:	40001800 	.word	0x40001800
 8002e64:	40001c00 	.word	0x40001c00
 8002e68:	40002000 	.word	0x40002000

08002e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e040      	b.n	8002f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd ff4c 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8c0 	bl	800306c <UART_SetConfig>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e022      	b.n	8002f3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fb16 	bl	8003530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb9d 	bl	8003674 <UART_CheckIdleState>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	f040 8081 	bne.w	8003060 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_UART_Transmit+0x26>
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e079      	b.n	8003062 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Transmit+0x38>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e072      	b.n	8003062 <HAL_UART_Transmit+0x11e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2221      	movs	r2, #33	; 0x21
 8002f90:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f92:	f7fe f8bd 	bl	8001110 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	88fa      	ldrh	r2, [r7, #6]
 8002f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_UART_Transmit+0x80>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002fd4:	e02c      	b.n	8003030 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fb7a 	bl	80036da <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e038      	b.n	8003062 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	3302      	adds	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e007      	b.n	800301e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3301      	adds	r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1cc      	bne.n	8002fd6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	2140      	movs	r1, #64	; 0x40
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb47 	bl	80036da <UART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e005      	b.n	8003062 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4ba7      	ldr	r3, [pc, #668]	; (8003334 <UART_SetConfig+0x2c8>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a95      	ldr	r2, [pc, #596]	; (8003338 <UART_SetConfig+0x2cc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d120      	bne.n	800312a <UART_SetConfig+0xbe>
 80030e8:	4b94      	ldr	r3, [pc, #592]	; (800333c <UART_SetConfig+0x2d0>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d816      	bhi.n	8003124 <UART_SetConfig+0xb8>
 80030f6:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <UART_SetConfig+0x90>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	08003119 	.word	0x08003119
 8003104:	08003113 	.word	0x08003113
 8003108:	0800311f 	.word	0x0800311f
 800310c:	2301      	movs	r3, #1
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e14f      	b.n	80033b2 <UART_SetConfig+0x346>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e14c      	b.n	80033b2 <UART_SetConfig+0x346>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e149      	b.n	80033b2 <UART_SetConfig+0x346>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e146      	b.n	80033b2 <UART_SetConfig+0x346>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e143      	b.n	80033b2 <UART_SetConfig+0x346>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a84      	ldr	r2, [pc, #528]	; (8003340 <UART_SetConfig+0x2d4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d132      	bne.n	800319a <UART_SetConfig+0x12e>
 8003134:	4b81      	ldr	r3, [pc, #516]	; (800333c <UART_SetConfig+0x2d0>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d828      	bhi.n	8003194 <UART_SetConfig+0x128>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0xdc>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003195 	.word	0x08003195
 8003150:	08003195 	.word	0x08003195
 8003154:	08003195 	.word	0x08003195
 8003158:	08003189 	.word	0x08003189
 800315c:	08003195 	.word	0x08003195
 8003160:	08003195 	.word	0x08003195
 8003164:	08003195 	.word	0x08003195
 8003168:	08003183 	.word	0x08003183
 800316c:	08003195 	.word	0x08003195
 8003170:	08003195 	.word	0x08003195
 8003174:	08003195 	.word	0x08003195
 8003178:	0800318f 	.word	0x0800318f
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e117      	b.n	80033b2 <UART_SetConfig+0x346>
 8003182:	2302      	movs	r3, #2
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e114      	b.n	80033b2 <UART_SetConfig+0x346>
 8003188:	2304      	movs	r3, #4
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e111      	b.n	80033b2 <UART_SetConfig+0x346>
 800318e:	2308      	movs	r3, #8
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e10e      	b.n	80033b2 <UART_SetConfig+0x346>
 8003194:	2310      	movs	r3, #16
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e10b      	b.n	80033b2 <UART_SetConfig+0x346>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a69      	ldr	r2, [pc, #420]	; (8003344 <UART_SetConfig+0x2d8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d120      	bne.n	80031e6 <UART_SetConfig+0x17a>
 80031a4:	4b65      	ldr	r3, [pc, #404]	; (800333c <UART_SetConfig+0x2d0>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031ae:	2b30      	cmp	r3, #48	; 0x30
 80031b0:	d013      	beq.n	80031da <UART_SetConfig+0x16e>
 80031b2:	2b30      	cmp	r3, #48	; 0x30
 80031b4:	d814      	bhi.n	80031e0 <UART_SetConfig+0x174>
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d009      	beq.n	80031ce <UART_SetConfig+0x162>
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d810      	bhi.n	80031e0 <UART_SetConfig+0x174>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <UART_SetConfig+0x15c>
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d006      	beq.n	80031d4 <UART_SetConfig+0x168>
 80031c6:	e00b      	b.n	80031e0 <UART_SetConfig+0x174>
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e0f1      	b.n	80033b2 <UART_SetConfig+0x346>
 80031ce:	2302      	movs	r3, #2
 80031d0:	77fb      	strb	r3, [r7, #31]
 80031d2:	e0ee      	b.n	80033b2 <UART_SetConfig+0x346>
 80031d4:	2304      	movs	r3, #4
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e0eb      	b.n	80033b2 <UART_SetConfig+0x346>
 80031da:	2308      	movs	r3, #8
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e0e8      	b.n	80033b2 <UART_SetConfig+0x346>
 80031e0:	2310      	movs	r3, #16
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e0e5      	b.n	80033b2 <UART_SetConfig+0x346>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a57      	ldr	r2, [pc, #348]	; (8003348 <UART_SetConfig+0x2dc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d120      	bne.n	8003232 <UART_SetConfig+0x1c6>
 80031f0:	4b52      	ldr	r3, [pc, #328]	; (800333c <UART_SetConfig+0x2d0>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031fa:	2bc0      	cmp	r3, #192	; 0xc0
 80031fc:	d013      	beq.n	8003226 <UART_SetConfig+0x1ba>
 80031fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003200:	d814      	bhi.n	800322c <UART_SetConfig+0x1c0>
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d009      	beq.n	800321a <UART_SetConfig+0x1ae>
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d810      	bhi.n	800322c <UART_SetConfig+0x1c0>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <UART_SetConfig+0x1a8>
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d006      	beq.n	8003220 <UART_SetConfig+0x1b4>
 8003212:	e00b      	b.n	800322c <UART_SetConfig+0x1c0>
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e0cb      	b.n	80033b2 <UART_SetConfig+0x346>
 800321a:	2302      	movs	r3, #2
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e0c8      	b.n	80033b2 <UART_SetConfig+0x346>
 8003220:	2304      	movs	r3, #4
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e0c5      	b.n	80033b2 <UART_SetConfig+0x346>
 8003226:	2308      	movs	r3, #8
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e0c2      	b.n	80033b2 <UART_SetConfig+0x346>
 800322c:	2310      	movs	r3, #16
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e0bf      	b.n	80033b2 <UART_SetConfig+0x346>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a45      	ldr	r2, [pc, #276]	; (800334c <UART_SetConfig+0x2e0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d125      	bne.n	8003288 <UART_SetConfig+0x21c>
 800323c:	4b3f      	ldr	r3, [pc, #252]	; (800333c <UART_SetConfig+0x2d0>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324a:	d017      	beq.n	800327c <UART_SetConfig+0x210>
 800324c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003250:	d817      	bhi.n	8003282 <UART_SetConfig+0x216>
 8003252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003256:	d00b      	beq.n	8003270 <UART_SetConfig+0x204>
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d811      	bhi.n	8003282 <UART_SetConfig+0x216>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <UART_SetConfig+0x1fe>
 8003262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003266:	d006      	beq.n	8003276 <UART_SetConfig+0x20a>
 8003268:	e00b      	b.n	8003282 <UART_SetConfig+0x216>
 800326a:	2300      	movs	r3, #0
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e0a0      	b.n	80033b2 <UART_SetConfig+0x346>
 8003270:	2302      	movs	r3, #2
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e09d      	b.n	80033b2 <UART_SetConfig+0x346>
 8003276:	2304      	movs	r3, #4
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e09a      	b.n	80033b2 <UART_SetConfig+0x346>
 800327c:	2308      	movs	r3, #8
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e097      	b.n	80033b2 <UART_SetConfig+0x346>
 8003282:	2310      	movs	r3, #16
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e094      	b.n	80033b2 <UART_SetConfig+0x346>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a30      	ldr	r2, [pc, #192]	; (8003350 <UART_SetConfig+0x2e4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d125      	bne.n	80032de <UART_SetConfig+0x272>
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <UART_SetConfig+0x2d0>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800329c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a0:	d017      	beq.n	80032d2 <UART_SetConfig+0x266>
 80032a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a6:	d817      	bhi.n	80032d8 <UART_SetConfig+0x26c>
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ac:	d00b      	beq.n	80032c6 <UART_SetConfig+0x25a>
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b2:	d811      	bhi.n	80032d8 <UART_SetConfig+0x26c>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <UART_SetConfig+0x254>
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d006      	beq.n	80032cc <UART_SetConfig+0x260>
 80032be:	e00b      	b.n	80032d8 <UART_SetConfig+0x26c>
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e075      	b.n	80033b2 <UART_SetConfig+0x346>
 80032c6:	2302      	movs	r3, #2
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e072      	b.n	80033b2 <UART_SetConfig+0x346>
 80032cc:	2304      	movs	r3, #4
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e06f      	b.n	80033b2 <UART_SetConfig+0x346>
 80032d2:	2308      	movs	r3, #8
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e06c      	b.n	80033b2 <UART_SetConfig+0x346>
 80032d8:	2310      	movs	r3, #16
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e069      	b.n	80033b2 <UART_SetConfig+0x346>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <UART_SetConfig+0x2e8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d137      	bne.n	8003358 <UART_SetConfig+0x2ec>
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <UART_SetConfig+0x2d0>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032f6:	d017      	beq.n	8003328 <UART_SetConfig+0x2bc>
 80032f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032fc:	d817      	bhi.n	800332e <UART_SetConfig+0x2c2>
 80032fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003302:	d00b      	beq.n	800331c <UART_SetConfig+0x2b0>
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003308:	d811      	bhi.n	800332e <UART_SetConfig+0x2c2>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <UART_SetConfig+0x2aa>
 800330e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003312:	d006      	beq.n	8003322 <UART_SetConfig+0x2b6>
 8003314:	e00b      	b.n	800332e <UART_SetConfig+0x2c2>
 8003316:	2300      	movs	r3, #0
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e04a      	b.n	80033b2 <UART_SetConfig+0x346>
 800331c:	2302      	movs	r3, #2
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e047      	b.n	80033b2 <UART_SetConfig+0x346>
 8003322:	2304      	movs	r3, #4
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e044      	b.n	80033b2 <UART_SetConfig+0x346>
 8003328:	2308      	movs	r3, #8
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e041      	b.n	80033b2 <UART_SetConfig+0x346>
 800332e:	2310      	movs	r3, #16
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e03e      	b.n	80033b2 <UART_SetConfig+0x346>
 8003334:	efff69f3 	.word	0xefff69f3
 8003338:	40011000 	.word	0x40011000
 800333c:	40023800 	.word	0x40023800
 8003340:	40004400 	.word	0x40004400
 8003344:	40004800 	.word	0x40004800
 8003348:	40004c00 	.word	0x40004c00
 800334c:	40005000 	.word	0x40005000
 8003350:	40011400 	.word	0x40011400
 8003354:	40007800 	.word	0x40007800
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a71      	ldr	r2, [pc, #452]	; (8003524 <UART_SetConfig+0x4b8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d125      	bne.n	80033ae <UART_SetConfig+0x342>
 8003362:	4b71      	ldr	r3, [pc, #452]	; (8003528 <UART_SetConfig+0x4bc>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800336c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003370:	d017      	beq.n	80033a2 <UART_SetConfig+0x336>
 8003372:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003376:	d817      	bhi.n	80033a8 <UART_SetConfig+0x33c>
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d00b      	beq.n	8003396 <UART_SetConfig+0x32a>
 800337e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003382:	d811      	bhi.n	80033a8 <UART_SetConfig+0x33c>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <UART_SetConfig+0x324>
 8003388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800338c:	d006      	beq.n	800339c <UART_SetConfig+0x330>
 800338e:	e00b      	b.n	80033a8 <UART_SetConfig+0x33c>
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e00d      	b.n	80033b2 <UART_SetConfig+0x346>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e00a      	b.n	80033b2 <UART_SetConfig+0x346>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e007      	b.n	80033b2 <UART_SetConfig+0x346>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e004      	b.n	80033b2 <UART_SetConfig+0x346>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e001      	b.n	80033b2 <UART_SetConfig+0x346>
 80033ae:	2310      	movs	r3, #16
 80033b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ba:	d15a      	bne.n	8003472 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80033bc:	7ffb      	ldrb	r3, [r7, #31]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d827      	bhi.n	8003412 <UART_SetConfig+0x3a6>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0x35c>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033fd 	.word	0x080033fd
 80033d4:	08003413 	.word	0x08003413
 80033d8:	08003403 	.word	0x08003403
 80033dc:	08003413 	.word	0x08003413
 80033e0:	08003413 	.word	0x08003413
 80033e4:	08003413 	.word	0x08003413
 80033e8:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7fe fe32 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 80033f0:	61b8      	str	r0, [r7, #24]
        break;
 80033f2:	e013      	b.n	800341c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7fe fe42 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 80033f8:	61b8      	str	r0, [r7, #24]
        break;
 80033fa:	e00f      	b.n	800341c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <UART_SetConfig+0x4c0>)
 80033fe:	61bb      	str	r3, [r7, #24]
        break;
 8003400:	e00c      	b.n	800341c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7fe fd65 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8003406:	61b8      	str	r0, [r7, #24]
        break;
 8003408:	e008      	b.n	800341c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	61bb      	str	r3, [r7, #24]
        break;
 8003410:	e004      	b.n	800341c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	77bb      	strb	r3, [r7, #30]
        break;
 800341a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d074      	beq.n	800350c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	005a      	lsls	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	d916      	bls.n	800346c <UART_SetConfig+0x400>
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d212      	bcs.n	800346c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f023 030f 	bic.w	r3, r3, #15
 800344e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	b29b      	uxth	r3, r3
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	b29a      	uxth	r2, r3
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	4313      	orrs	r3, r2
 8003460:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	89fa      	ldrh	r2, [r7, #14]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	e04f      	b.n	800350c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	77bb      	strb	r3, [r7, #30]
 8003470:	e04c      	b.n	800350c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003472:	7ffb      	ldrb	r3, [r7, #31]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d828      	bhi.n	80034ca <UART_SetConfig+0x45e>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x414>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034ad 	.word	0x080034ad
 8003488:	080034b5 	.word	0x080034b5
 800348c:	080034cb 	.word	0x080034cb
 8003490:	080034bb 	.word	0x080034bb
 8003494:	080034cb 	.word	0x080034cb
 8003498:	080034cb 	.word	0x080034cb
 800349c:	080034cb 	.word	0x080034cb
 80034a0:	080034c3 	.word	0x080034c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a4:	f7fe fdd6 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 80034a8:	61b8      	str	r0, [r7, #24]
        break;
 80034aa:	e013      	b.n	80034d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ac:	f7fe fde6 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 80034b0:	61b8      	str	r0, [r7, #24]
        break;
 80034b2:	e00f      	b.n	80034d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <UART_SetConfig+0x4c0>)
 80034b6:	61bb      	str	r3, [r7, #24]
        break;
 80034b8:	e00c      	b.n	80034d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ba:	f7fe fd09 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 80034be:	61b8      	str	r0, [r7, #24]
        break;
 80034c0:	e008      	b.n	80034d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c6:	61bb      	str	r3, [r7, #24]
        break;
 80034c8:	e004      	b.n	80034d4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	77bb      	strb	r3, [r7, #30]
        break;
 80034d2:	bf00      	nop
    }

    if (pclk != 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	085a      	lsrs	r2, r3, #1
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	441a      	add	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d909      	bls.n	8003508 <UART_SetConfig+0x49c>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d205      	bcs.n	8003508 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e001      	b.n	800350c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003518:	7fbb      	ldrb	r3, [r7, #30]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40007c00 	.word	0x40007c00
 8003528:	40023800 	.word	0x40023800
 800352c:	00f42400 	.word	0x00f42400

08003530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01a      	beq.n	8003646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362e:	d10a      	bne.n	8003646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003684:	f7fd fd44 	bl	8001110 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d10e      	bne.n	80036b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f817 	bl	80036da <UART_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00d      	b.n	80036d2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b09c      	sub	sp, #112	; 0x70
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	e0a5      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	f000 80a1 	beq.w	8003838 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fd fd0b 	bl	8001110 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <UART_WaitOnFlagUntilTimeout+0x32>
 8003706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003708:	2b00      	cmp	r3, #0
 800370a:	d13e      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800371a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003720:	667b      	str	r3, [r7, #100]	; 0x64
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800372a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800372c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e6      	bne.n	800370c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	663b      	str	r3, [r7, #96]	; 0x60
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800375e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e5      	bne.n	800373e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e067      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d04f      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a6:	d147      	bne.n	8003838 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
 80037d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e6      	bne.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	613b      	str	r3, [r7, #16]
   return(result);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003804:	623a      	str	r2, [r7, #32]
 8003806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	61bb      	str	r3, [r7, #24]
   return(result);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e5      	bne.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e010      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	f43f af4a 	beq.w	80036ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3770      	adds	r7, #112	; 0x70
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <__errno>:
 8003864:	4b01      	ldr	r3, [pc, #4]	; (800386c <__errno+0x8>)
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000010 	.word	0x20000010

08003870 <__libc_init_array>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	4d0d      	ldr	r5, [pc, #52]	; (80038a8 <__libc_init_array+0x38>)
 8003874:	4c0d      	ldr	r4, [pc, #52]	; (80038ac <__libc_init_array+0x3c>)
 8003876:	1b64      	subs	r4, r4, r5
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	2600      	movs	r6, #0
 800387c:	42a6      	cmp	r6, r4
 800387e:	d109      	bne.n	8003894 <__libc_init_array+0x24>
 8003880:	4d0b      	ldr	r5, [pc, #44]	; (80038b0 <__libc_init_array+0x40>)
 8003882:	4c0c      	ldr	r4, [pc, #48]	; (80038b4 <__libc_init_array+0x44>)
 8003884:	f000 ff76 	bl	8004774 <_init>
 8003888:	1b64      	subs	r4, r4, r5
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	2600      	movs	r6, #0
 800388e:	42a6      	cmp	r6, r4
 8003890:	d105      	bne.n	800389e <__libc_init_array+0x2e>
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	f855 3b04 	ldr.w	r3, [r5], #4
 8003898:	4798      	blx	r3
 800389a:	3601      	adds	r6, #1
 800389c:	e7ee      	b.n	800387c <__libc_init_array+0xc>
 800389e:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a2:	4798      	blx	r3
 80038a4:	3601      	adds	r6, #1
 80038a6:	e7f2      	b.n	800388e <__libc_init_array+0x1e>
 80038a8:	0800484c 	.word	0x0800484c
 80038ac:	0800484c 	.word	0x0800484c
 80038b0:	0800484c 	.word	0x0800484c
 80038b4:	08004850 	.word	0x08004850

080038b8 <memset>:
 80038b8:	4402      	add	r2, r0
 80038ba:	4603      	mov	r3, r0
 80038bc:	4293      	cmp	r3, r2
 80038be:	d100      	bne.n	80038c2 <memset+0xa>
 80038c0:	4770      	bx	lr
 80038c2:	f803 1b01 	strb.w	r1, [r3], #1
 80038c6:	e7f9      	b.n	80038bc <memset+0x4>

080038c8 <iprintf>:
 80038c8:	b40f      	push	{r0, r1, r2, r3}
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <iprintf+0x2c>)
 80038cc:	b513      	push	{r0, r1, r4, lr}
 80038ce:	681c      	ldr	r4, [r3, #0]
 80038d0:	b124      	cbz	r4, 80038dc <iprintf+0x14>
 80038d2:	69a3      	ldr	r3, [r4, #24]
 80038d4:	b913      	cbnz	r3, 80038dc <iprintf+0x14>
 80038d6:	4620      	mov	r0, r4
 80038d8:	f000 f866 	bl	80039a8 <__sinit>
 80038dc:	ab05      	add	r3, sp, #20
 80038de:	9a04      	ldr	r2, [sp, #16]
 80038e0:	68a1      	ldr	r1, [r4, #8]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	4620      	mov	r0, r4
 80038e6:	f000 f983 	bl	8003bf0 <_vfiprintf_r>
 80038ea:	b002      	add	sp, #8
 80038ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f0:	b004      	add	sp, #16
 80038f2:	4770      	bx	lr
 80038f4:	20000010 	.word	0x20000010

080038f8 <std>:
 80038f8:	2300      	movs	r3, #0
 80038fa:	b510      	push	{r4, lr}
 80038fc:	4604      	mov	r4, r0
 80038fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003906:	6083      	str	r3, [r0, #8]
 8003908:	8181      	strh	r1, [r0, #12]
 800390a:	6643      	str	r3, [r0, #100]	; 0x64
 800390c:	81c2      	strh	r2, [r0, #14]
 800390e:	6183      	str	r3, [r0, #24]
 8003910:	4619      	mov	r1, r3
 8003912:	2208      	movs	r2, #8
 8003914:	305c      	adds	r0, #92	; 0x5c
 8003916:	f7ff ffcf 	bl	80038b8 <memset>
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <std+0x38>)
 800391c:	6263      	str	r3, [r4, #36]	; 0x24
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <std+0x3c>)
 8003920:	62a3      	str	r3, [r4, #40]	; 0x28
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <std+0x40>)
 8003924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x44>)
 8003928:	6224      	str	r4, [r4, #32]
 800392a:	6323      	str	r3, [r4, #48]	; 0x30
 800392c:	bd10      	pop	{r4, pc}
 800392e:	bf00      	nop
 8003930:	08004199 	.word	0x08004199
 8003934:	080041bb 	.word	0x080041bb
 8003938:	080041f3 	.word	0x080041f3
 800393c:	08004217 	.word	0x08004217

08003940 <_cleanup_r>:
 8003940:	4901      	ldr	r1, [pc, #4]	; (8003948 <_cleanup_r+0x8>)
 8003942:	f000 b8af 	b.w	8003aa4 <_fwalk_reent>
 8003946:	bf00      	nop
 8003948:	080044f1 	.word	0x080044f1

0800394c <__sfmoreglue>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	1e4a      	subs	r2, r1, #1
 8003950:	2568      	movs	r5, #104	; 0x68
 8003952:	4355      	muls	r5, r2
 8003954:	460e      	mov	r6, r1
 8003956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800395a:	f000 f8c5 	bl	8003ae8 <_malloc_r>
 800395e:	4604      	mov	r4, r0
 8003960:	b140      	cbz	r0, 8003974 <__sfmoreglue+0x28>
 8003962:	2100      	movs	r1, #0
 8003964:	e9c0 1600 	strd	r1, r6, [r0]
 8003968:	300c      	adds	r0, #12
 800396a:	60a0      	str	r0, [r4, #8]
 800396c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003970:	f7ff ffa2 	bl	80038b8 <memset>
 8003974:	4620      	mov	r0, r4
 8003976:	bd70      	pop	{r4, r5, r6, pc}

08003978 <__sfp_lock_acquire>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__sfp_lock_acquire+0x8>)
 800397a:	f000 b8b3 	b.w	8003ae4 <__retarget_lock_acquire_recursive>
 800397e:	bf00      	nop
 8003980:	20000178 	.word	0x20000178

08003984 <__sfp_lock_release>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__sfp_lock_release+0x8>)
 8003986:	f000 b8ae 	b.w	8003ae6 <__retarget_lock_release_recursive>
 800398a:	bf00      	nop
 800398c:	20000178 	.word	0x20000178

08003990 <__sinit_lock_acquire>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__sinit_lock_acquire+0x8>)
 8003992:	f000 b8a7 	b.w	8003ae4 <__retarget_lock_acquire_recursive>
 8003996:	bf00      	nop
 8003998:	20000173 	.word	0x20000173

0800399c <__sinit_lock_release>:
 800399c:	4801      	ldr	r0, [pc, #4]	; (80039a4 <__sinit_lock_release+0x8>)
 800399e:	f000 b8a2 	b.w	8003ae6 <__retarget_lock_release_recursive>
 80039a2:	bf00      	nop
 80039a4:	20000173 	.word	0x20000173

080039a8 <__sinit>:
 80039a8:	b510      	push	{r4, lr}
 80039aa:	4604      	mov	r4, r0
 80039ac:	f7ff fff0 	bl	8003990 <__sinit_lock_acquire>
 80039b0:	69a3      	ldr	r3, [r4, #24]
 80039b2:	b11b      	cbz	r3, 80039bc <__sinit+0x14>
 80039b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b8:	f7ff bff0 	b.w	800399c <__sinit_lock_release>
 80039bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039c0:	6523      	str	r3, [r4, #80]	; 0x50
 80039c2:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <__sinit+0x68>)
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <__sinit+0x6c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	bf04      	itt	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	61a3      	streq	r3, [r4, #24]
 80039d2:	4620      	mov	r0, r4
 80039d4:	f000 f820 	bl	8003a18 <__sfp>
 80039d8:	6060      	str	r0, [r4, #4]
 80039da:	4620      	mov	r0, r4
 80039dc:	f000 f81c 	bl	8003a18 <__sfp>
 80039e0:	60a0      	str	r0, [r4, #8]
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 f818 	bl	8003a18 <__sfp>
 80039e8:	2200      	movs	r2, #0
 80039ea:	60e0      	str	r0, [r4, #12]
 80039ec:	2104      	movs	r1, #4
 80039ee:	6860      	ldr	r0, [r4, #4]
 80039f0:	f7ff ff82 	bl	80038f8 <std>
 80039f4:	68a0      	ldr	r0, [r4, #8]
 80039f6:	2201      	movs	r2, #1
 80039f8:	2109      	movs	r1, #9
 80039fa:	f7ff ff7d 	bl	80038f8 <std>
 80039fe:	68e0      	ldr	r0, [r4, #12]
 8003a00:	2202      	movs	r2, #2
 8003a02:	2112      	movs	r1, #18
 8003a04:	f7ff ff78 	bl	80038f8 <std>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	61a3      	str	r3, [r4, #24]
 8003a0c:	e7d2      	b.n	80039b4 <__sinit+0xc>
 8003a0e:	bf00      	nop
 8003a10:	080047ac 	.word	0x080047ac
 8003a14:	08003941 	.word	0x08003941

08003a18 <__sfp>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	4607      	mov	r7, r0
 8003a1c:	f7ff ffac 	bl	8003978 <__sfp_lock_acquire>
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <__sfp+0x84>)
 8003a22:	681e      	ldr	r6, [r3, #0]
 8003a24:	69b3      	ldr	r3, [r6, #24]
 8003a26:	b913      	cbnz	r3, 8003a2e <__sfp+0x16>
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7ff ffbd 	bl	80039a8 <__sinit>
 8003a2e:	3648      	adds	r6, #72	; 0x48
 8003a30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	d503      	bpl.n	8003a40 <__sfp+0x28>
 8003a38:	6833      	ldr	r3, [r6, #0]
 8003a3a:	b30b      	cbz	r3, 8003a80 <__sfp+0x68>
 8003a3c:	6836      	ldr	r6, [r6, #0]
 8003a3e:	e7f7      	b.n	8003a30 <__sfp+0x18>
 8003a40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a44:	b9d5      	cbnz	r5, 8003a7c <__sfp+0x64>
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <__sfp+0x88>)
 8003a48:	60e3      	str	r3, [r4, #12]
 8003a4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a4e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a50:	f000 f847 	bl	8003ae2 <__retarget_lock_init_recursive>
 8003a54:	f7ff ff96 	bl	8003984 <__sfp_lock_release>
 8003a58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a60:	6025      	str	r5, [r4, #0]
 8003a62:	61a5      	str	r5, [r4, #24]
 8003a64:	2208      	movs	r2, #8
 8003a66:	4629      	mov	r1, r5
 8003a68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a6c:	f7ff ff24 	bl	80038b8 <memset>
 8003a70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a78:	4620      	mov	r0, r4
 8003a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7c:	3468      	adds	r4, #104	; 0x68
 8003a7e:	e7d9      	b.n	8003a34 <__sfp+0x1c>
 8003a80:	2104      	movs	r1, #4
 8003a82:	4638      	mov	r0, r7
 8003a84:	f7ff ff62 	bl	800394c <__sfmoreglue>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	6030      	str	r0, [r6, #0]
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d1d5      	bne.n	8003a3c <__sfp+0x24>
 8003a90:	f7ff ff78 	bl	8003984 <__sfp_lock_release>
 8003a94:	230c      	movs	r3, #12
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	e7ee      	b.n	8003a78 <__sfp+0x60>
 8003a9a:	bf00      	nop
 8003a9c:	080047ac 	.word	0x080047ac
 8003aa0:	ffff0001 	.word	0xffff0001

08003aa4 <_fwalk_reent>:
 8003aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aa8:	4606      	mov	r6, r0
 8003aaa:	4688      	mov	r8, r1
 8003aac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ab0:	2700      	movs	r7, #0
 8003ab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ab6:	f1b9 0901 	subs.w	r9, r9, #1
 8003aba:	d505      	bpl.n	8003ac8 <_fwalk_reent+0x24>
 8003abc:	6824      	ldr	r4, [r4, #0]
 8003abe:	2c00      	cmp	r4, #0
 8003ac0:	d1f7      	bne.n	8003ab2 <_fwalk_reent+0xe>
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ac8:	89ab      	ldrh	r3, [r5, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d907      	bls.n	8003ade <_fwalk_reent+0x3a>
 8003ace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	d003      	beq.n	8003ade <_fwalk_reent+0x3a>
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4630      	mov	r0, r6
 8003ada:	47c0      	blx	r8
 8003adc:	4307      	orrs	r7, r0
 8003ade:	3568      	adds	r5, #104	; 0x68
 8003ae0:	e7e9      	b.n	8003ab6 <_fwalk_reent+0x12>

08003ae2 <__retarget_lock_init_recursive>:
 8003ae2:	4770      	bx	lr

08003ae4 <__retarget_lock_acquire_recursive>:
 8003ae4:	4770      	bx	lr

08003ae6 <__retarget_lock_release_recursive>:
 8003ae6:	4770      	bx	lr

08003ae8 <_malloc_r>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	1ccd      	adds	r5, r1, #3
 8003aec:	f025 0503 	bic.w	r5, r5, #3
 8003af0:	3508      	adds	r5, #8
 8003af2:	2d0c      	cmp	r5, #12
 8003af4:	bf38      	it	cc
 8003af6:	250c      	movcc	r5, #12
 8003af8:	2d00      	cmp	r5, #0
 8003afa:	4606      	mov	r6, r0
 8003afc:	db01      	blt.n	8003b02 <_malloc_r+0x1a>
 8003afe:	42a9      	cmp	r1, r5
 8003b00:	d903      	bls.n	8003b0a <_malloc_r+0x22>
 8003b02:	230c      	movs	r3, #12
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	2000      	movs	r0, #0
 8003b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0a:	f000 fda3 	bl	8004654 <__malloc_lock>
 8003b0e:	4921      	ldr	r1, [pc, #132]	; (8003b94 <_malloc_r+0xac>)
 8003b10:	680a      	ldr	r2, [r1, #0]
 8003b12:	4614      	mov	r4, r2
 8003b14:	b99c      	cbnz	r4, 8003b3e <_malloc_r+0x56>
 8003b16:	4f20      	ldr	r7, [pc, #128]	; (8003b98 <_malloc_r+0xb0>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b923      	cbnz	r3, 8003b26 <_malloc_r+0x3e>
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f000 fb2a 	bl	8004178 <_sbrk_r>
 8003b24:	6038      	str	r0, [r7, #0]
 8003b26:	4629      	mov	r1, r5
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 fb25 	bl	8004178 <_sbrk_r>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d123      	bne.n	8003b7a <_malloc_r+0x92>
 8003b32:	230c      	movs	r3, #12
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 fd92 	bl	8004660 <__malloc_unlock>
 8003b3c:	e7e3      	b.n	8003b06 <_malloc_r+0x1e>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	1b5b      	subs	r3, r3, r5
 8003b42:	d417      	bmi.n	8003b74 <_malloc_r+0x8c>
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	d903      	bls.n	8003b50 <_malloc_r+0x68>
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	441c      	add	r4, r3
 8003b4c:	6025      	str	r5, [r4, #0]
 8003b4e:	e004      	b.n	8003b5a <_malloc_r+0x72>
 8003b50:	6863      	ldr	r3, [r4, #4]
 8003b52:	42a2      	cmp	r2, r4
 8003b54:	bf0c      	ite	eq
 8003b56:	600b      	streq	r3, [r1, #0]
 8003b58:	6053      	strne	r3, [r2, #4]
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 fd80 	bl	8004660 <__malloc_unlock>
 8003b60:	f104 000b 	add.w	r0, r4, #11
 8003b64:	1d23      	adds	r3, r4, #4
 8003b66:	f020 0007 	bic.w	r0, r0, #7
 8003b6a:	1ac2      	subs	r2, r0, r3
 8003b6c:	d0cc      	beq.n	8003b08 <_malloc_r+0x20>
 8003b6e:	1a1b      	subs	r3, r3, r0
 8003b70:	50a3      	str	r3, [r4, r2]
 8003b72:	e7c9      	b.n	8003b08 <_malloc_r+0x20>
 8003b74:	4622      	mov	r2, r4
 8003b76:	6864      	ldr	r4, [r4, #4]
 8003b78:	e7cc      	b.n	8003b14 <_malloc_r+0x2c>
 8003b7a:	1cc4      	adds	r4, r0, #3
 8003b7c:	f024 0403 	bic.w	r4, r4, #3
 8003b80:	42a0      	cmp	r0, r4
 8003b82:	d0e3      	beq.n	8003b4c <_malloc_r+0x64>
 8003b84:	1a21      	subs	r1, r4, r0
 8003b86:	4630      	mov	r0, r6
 8003b88:	f000 faf6 	bl	8004178 <_sbrk_r>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x64>
 8003b90:	e7cf      	b.n	8003b32 <_malloc_r+0x4a>
 8003b92:	bf00      	nop
 8003b94:	20000094 	.word	0x20000094
 8003b98:	20000098 	.word	0x20000098

08003b9c <__sfputc_r>:
 8003b9c:	6893      	ldr	r3, [r2, #8]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	b410      	push	{r4}
 8003ba4:	6093      	str	r3, [r2, #8]
 8003ba6:	da08      	bge.n	8003bba <__sfputc_r+0x1e>
 8003ba8:	6994      	ldr	r4, [r2, #24]
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	db01      	blt.n	8003bb2 <__sfputc_r+0x16>
 8003bae:	290a      	cmp	r1, #10
 8003bb0:	d103      	bne.n	8003bba <__sfputc_r+0x1e>
 8003bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bb6:	f000 bb33 	b.w	8004220 <__swbuf_r>
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	1c58      	adds	r0, r3, #1
 8003bbe:	6010      	str	r0, [r2, #0]
 8003bc0:	7019      	strb	r1, [r3, #0]
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <__sfputs_r>:
 8003bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bcc:	4606      	mov	r6, r0
 8003bce:	460f      	mov	r7, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	18d5      	adds	r5, r2, r3
 8003bd4:	42ac      	cmp	r4, r5
 8003bd6:	d101      	bne.n	8003bdc <__sfputs_r+0x12>
 8003bd8:	2000      	movs	r0, #0
 8003bda:	e007      	b.n	8003bec <__sfputs_r+0x22>
 8003bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be0:	463a      	mov	r2, r7
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff ffda 	bl	8003b9c <__sfputc_r>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d1f3      	bne.n	8003bd4 <__sfputs_r+0xa>
 8003bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bf0 <_vfiprintf_r>:
 8003bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	b09d      	sub	sp, #116	; 0x74
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	4698      	mov	r8, r3
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	b118      	cbz	r0, 8003c08 <_vfiprintf_r+0x18>
 8003c00:	6983      	ldr	r3, [r0, #24]
 8003c02:	b90b      	cbnz	r3, 8003c08 <_vfiprintf_r+0x18>
 8003c04:	f7ff fed0 	bl	80039a8 <__sinit>
 8003c08:	4b89      	ldr	r3, [pc, #548]	; (8003e30 <_vfiprintf_r+0x240>)
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	d11b      	bne.n	8003c46 <_vfiprintf_r+0x56>
 8003c0e:	6875      	ldr	r5, [r6, #4]
 8003c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c12:	07d9      	lsls	r1, r3, #31
 8003c14:	d405      	bmi.n	8003c22 <_vfiprintf_r+0x32>
 8003c16:	89ab      	ldrh	r3, [r5, #12]
 8003c18:	059a      	lsls	r2, r3, #22
 8003c1a:	d402      	bmi.n	8003c22 <_vfiprintf_r+0x32>
 8003c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c1e:	f7ff ff61 	bl	8003ae4 <__retarget_lock_acquire_recursive>
 8003c22:	89ab      	ldrh	r3, [r5, #12]
 8003c24:	071b      	lsls	r3, r3, #28
 8003c26:	d501      	bpl.n	8003c2c <_vfiprintf_r+0x3c>
 8003c28:	692b      	ldr	r3, [r5, #16]
 8003c2a:	b9eb      	cbnz	r3, 8003c68 <_vfiprintf_r+0x78>
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	4630      	mov	r0, r6
 8003c30:	f000 fb5a 	bl	80042e8 <__swsetup_r>
 8003c34:	b1c0      	cbz	r0, 8003c68 <_vfiprintf_r+0x78>
 8003c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c38:	07dc      	lsls	r4, r3, #31
 8003c3a:	d50e      	bpl.n	8003c5a <_vfiprintf_r+0x6a>
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	b01d      	add	sp, #116	; 0x74
 8003c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c46:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <_vfiprintf_r+0x244>)
 8003c48:	429d      	cmp	r5, r3
 8003c4a:	d101      	bne.n	8003c50 <_vfiprintf_r+0x60>
 8003c4c:	68b5      	ldr	r5, [r6, #8]
 8003c4e:	e7df      	b.n	8003c10 <_vfiprintf_r+0x20>
 8003c50:	4b79      	ldr	r3, [pc, #484]	; (8003e38 <_vfiprintf_r+0x248>)
 8003c52:	429d      	cmp	r5, r3
 8003c54:	bf08      	it	eq
 8003c56:	68f5      	ldreq	r5, [r6, #12]
 8003c58:	e7da      	b.n	8003c10 <_vfiprintf_r+0x20>
 8003c5a:	89ab      	ldrh	r3, [r5, #12]
 8003c5c:	0598      	lsls	r0, r3, #22
 8003c5e:	d4ed      	bmi.n	8003c3c <_vfiprintf_r+0x4c>
 8003c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c62:	f7ff ff40 	bl	8003ae6 <__retarget_lock_release_recursive>
 8003c66:	e7e9      	b.n	8003c3c <_vfiprintf_r+0x4c>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6c:	2320      	movs	r3, #32
 8003c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c76:	2330      	movs	r3, #48	; 0x30
 8003c78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e3c <_vfiprintf_r+0x24c>
 8003c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c80:	f04f 0901 	mov.w	r9, #1
 8003c84:	4623      	mov	r3, r4
 8003c86:	469a      	mov	sl, r3
 8003c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c8c:	b10a      	cbz	r2, 8003c92 <_vfiprintf_r+0xa2>
 8003c8e:	2a25      	cmp	r2, #37	; 0x25
 8003c90:	d1f9      	bne.n	8003c86 <_vfiprintf_r+0x96>
 8003c92:	ebba 0b04 	subs.w	fp, sl, r4
 8003c96:	d00b      	beq.n	8003cb0 <_vfiprintf_r+0xc0>
 8003c98:	465b      	mov	r3, fp
 8003c9a:	4622      	mov	r2, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f7ff ff93 	bl	8003bca <__sfputs_r>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	f000 80aa 	beq.w	8003dfe <_vfiprintf_r+0x20e>
 8003caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cac:	445a      	add	r2, fp
 8003cae:	9209      	str	r2, [sp, #36]	; 0x24
 8003cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80a2 	beq.w	8003dfe <_vfiprintf_r+0x20e>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc4:	f10a 0a01 	add.w	sl, sl, #1
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	9307      	str	r3, [sp, #28]
 8003ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd2:	4654      	mov	r4, sl
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cda:	4858      	ldr	r0, [pc, #352]	; (8003e3c <_vfiprintf_r+0x24c>)
 8003cdc:	f7fc fa98 	bl	8000210 <memchr>
 8003ce0:	9a04      	ldr	r2, [sp, #16]
 8003ce2:	b9d8      	cbnz	r0, 8003d1c <_vfiprintf_r+0x12c>
 8003ce4:	06d1      	lsls	r1, r2, #27
 8003ce6:	bf44      	itt	mi
 8003ce8:	2320      	movmi	r3, #32
 8003cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cee:	0713      	lsls	r3, r2, #28
 8003cf0:	bf44      	itt	mi
 8003cf2:	232b      	movmi	r3, #43	; 0x2b
 8003cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfe:	d015      	beq.n	8003d2c <_vfiprintf_r+0x13c>
 8003d00:	9a07      	ldr	r2, [sp, #28]
 8003d02:	4654      	mov	r4, sl
 8003d04:	2000      	movs	r0, #0
 8003d06:	f04f 0c0a 	mov.w	ip, #10
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d10:	3b30      	subs	r3, #48	; 0x30
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d94e      	bls.n	8003db4 <_vfiprintf_r+0x1c4>
 8003d16:	b1b0      	cbz	r0, 8003d46 <_vfiprintf_r+0x156>
 8003d18:	9207      	str	r2, [sp, #28]
 8003d1a:	e014      	b.n	8003d46 <_vfiprintf_r+0x156>
 8003d1c:	eba0 0308 	sub.w	r3, r0, r8
 8003d20:	fa09 f303 	lsl.w	r3, r9, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	9304      	str	r3, [sp, #16]
 8003d28:	46a2      	mov	sl, r4
 8003d2a:	e7d2      	b.n	8003cd2 <_vfiprintf_r+0xe2>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	1d19      	adds	r1, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	9103      	str	r1, [sp, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfbb      	ittet	lt
 8003d38:	425b      	neglt	r3, r3
 8003d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d3e:	9307      	strge	r3, [sp, #28]
 8003d40:	9307      	strlt	r3, [sp, #28]
 8003d42:	bfb8      	it	lt
 8003d44:	9204      	strlt	r2, [sp, #16]
 8003d46:	7823      	ldrb	r3, [r4, #0]
 8003d48:	2b2e      	cmp	r3, #46	; 0x2e
 8003d4a:	d10c      	bne.n	8003d66 <_vfiprintf_r+0x176>
 8003d4c:	7863      	ldrb	r3, [r4, #1]
 8003d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d50:	d135      	bne.n	8003dbe <_vfiprintf_r+0x1ce>
 8003d52:	9b03      	ldr	r3, [sp, #12]
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9203      	str	r2, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfb8      	it	lt
 8003d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d62:	3402      	adds	r4, #2
 8003d64:	9305      	str	r3, [sp, #20]
 8003d66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e4c <_vfiprintf_r+0x25c>
 8003d6a:	7821      	ldrb	r1, [r4, #0]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4650      	mov	r0, sl
 8003d70:	f7fc fa4e 	bl	8000210 <memchr>
 8003d74:	b140      	cbz	r0, 8003d88 <_vfiprintf_r+0x198>
 8003d76:	2340      	movs	r3, #64	; 0x40
 8003d78:	eba0 000a 	sub.w	r0, r0, sl
 8003d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8003d80:	9b04      	ldr	r3, [sp, #16]
 8003d82:	4303      	orrs	r3, r0
 8003d84:	3401      	adds	r4, #1
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d8c:	482c      	ldr	r0, [pc, #176]	; (8003e40 <_vfiprintf_r+0x250>)
 8003d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d92:	2206      	movs	r2, #6
 8003d94:	f7fc fa3c 	bl	8000210 <memchr>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d03f      	beq.n	8003e1c <_vfiprintf_r+0x22c>
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <_vfiprintf_r+0x254>)
 8003d9e:	bb1b      	cbnz	r3, 8003de8 <_vfiprintf_r+0x1f8>
 8003da0:	9b03      	ldr	r3, [sp, #12]
 8003da2:	3307      	adds	r3, #7
 8003da4:	f023 0307 	bic.w	r3, r3, #7
 8003da8:	3308      	adds	r3, #8
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dae:	443b      	add	r3, r7
 8003db0:	9309      	str	r3, [sp, #36]	; 0x24
 8003db2:	e767      	b.n	8003c84 <_vfiprintf_r+0x94>
 8003db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db8:	460c      	mov	r4, r1
 8003dba:	2001      	movs	r0, #1
 8003dbc:	e7a5      	b.n	8003d0a <_vfiprintf_r+0x11a>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	3401      	adds	r4, #1
 8003dc2:	9305      	str	r3, [sp, #20]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f04f 0c0a 	mov.w	ip, #10
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dd0:	3a30      	subs	r2, #48	; 0x30
 8003dd2:	2a09      	cmp	r2, #9
 8003dd4:	d903      	bls.n	8003dde <_vfiprintf_r+0x1ee>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0c5      	beq.n	8003d66 <_vfiprintf_r+0x176>
 8003dda:	9105      	str	r1, [sp, #20]
 8003ddc:	e7c3      	b.n	8003d66 <_vfiprintf_r+0x176>
 8003dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de2:	4604      	mov	r4, r0
 8003de4:	2301      	movs	r3, #1
 8003de6:	e7f0      	b.n	8003dca <_vfiprintf_r+0x1da>
 8003de8:	ab03      	add	r3, sp, #12
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	462a      	mov	r2, r5
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <_vfiprintf_r+0x258>)
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	4630      	mov	r0, r6
 8003df4:	f3af 8000 	nop.w
 8003df8:	4607      	mov	r7, r0
 8003dfa:	1c78      	adds	r0, r7, #1
 8003dfc:	d1d6      	bne.n	8003dac <_vfiprintf_r+0x1bc>
 8003dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e00:	07d9      	lsls	r1, r3, #31
 8003e02:	d405      	bmi.n	8003e10 <_vfiprintf_r+0x220>
 8003e04:	89ab      	ldrh	r3, [r5, #12]
 8003e06:	059a      	lsls	r2, r3, #22
 8003e08:	d402      	bmi.n	8003e10 <_vfiprintf_r+0x220>
 8003e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e0c:	f7ff fe6b 	bl	8003ae6 <__retarget_lock_release_recursive>
 8003e10:	89ab      	ldrh	r3, [r5, #12]
 8003e12:	065b      	lsls	r3, r3, #25
 8003e14:	f53f af12 	bmi.w	8003c3c <_vfiprintf_r+0x4c>
 8003e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e1a:	e711      	b.n	8003c40 <_vfiprintf_r+0x50>
 8003e1c:	ab03      	add	r3, sp, #12
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	462a      	mov	r2, r5
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <_vfiprintf_r+0x258>)
 8003e24:	a904      	add	r1, sp, #16
 8003e26:	4630      	mov	r0, r6
 8003e28:	f000 f880 	bl	8003f2c <_printf_i>
 8003e2c:	e7e4      	b.n	8003df8 <_vfiprintf_r+0x208>
 8003e2e:	bf00      	nop
 8003e30:	080047d0 	.word	0x080047d0
 8003e34:	080047f0 	.word	0x080047f0
 8003e38:	080047b0 	.word	0x080047b0
 8003e3c:	08004810 	.word	0x08004810
 8003e40:	0800481a 	.word	0x0800481a
 8003e44:	00000000 	.word	0x00000000
 8003e48:	08003bcb 	.word	0x08003bcb
 8003e4c:	08004816 	.word	0x08004816

08003e50 <_printf_common>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	4616      	mov	r6, r2
 8003e56:	4699      	mov	r9, r3
 8003e58:	688a      	ldr	r2, [r1, #8]
 8003e5a:	690b      	ldr	r3, [r1, #16]
 8003e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bfb8      	it	lt
 8003e64:	4613      	movlt	r3, r2
 8003e66:	6033      	str	r3, [r6, #0]
 8003e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	b10a      	cbz	r2, 8003e76 <_printf_common+0x26>
 8003e72:	3301      	adds	r3, #1
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	0699      	lsls	r1, r3, #26
 8003e7a:	bf42      	ittt	mi
 8003e7c:	6833      	ldrmi	r3, [r6, #0]
 8003e7e:	3302      	addmi	r3, #2
 8003e80:	6033      	strmi	r3, [r6, #0]
 8003e82:	6825      	ldr	r5, [r4, #0]
 8003e84:	f015 0506 	ands.w	r5, r5, #6
 8003e88:	d106      	bne.n	8003e98 <_printf_common+0x48>
 8003e8a:	f104 0a19 	add.w	sl, r4, #25
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	6832      	ldr	r2, [r6, #0]
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	42ab      	cmp	r3, r5
 8003e96:	dc26      	bgt.n	8003ee6 <_printf_common+0x96>
 8003e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e9c:	1e13      	subs	r3, r2, #0
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	bf18      	it	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	0692      	lsls	r2, r2, #26
 8003ea6:	d42b      	bmi.n	8003f00 <_printf_common+0xb0>
 8003ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eac:	4649      	mov	r1, r9
 8003eae:	4638      	mov	r0, r7
 8003eb0:	47c0      	blx	r8
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d01e      	beq.n	8003ef4 <_printf_common+0xa4>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	68e5      	ldr	r5, [r4, #12]
 8003eba:	6832      	ldr	r2, [r6, #0]
 8003ebc:	f003 0306 	and.w	r3, r3, #6
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	bf08      	it	eq
 8003ec4:	1aad      	subeq	r5, r5, r2
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	6922      	ldr	r2, [r4, #16]
 8003eca:	bf0c      	ite	eq
 8003ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed0:	2500      	movne	r5, #0
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	bfc4      	itt	gt
 8003ed6:	1a9b      	subgt	r3, r3, r2
 8003ed8:	18ed      	addgt	r5, r5, r3
 8003eda:	2600      	movs	r6, #0
 8003edc:	341a      	adds	r4, #26
 8003ede:	42b5      	cmp	r5, r6
 8003ee0:	d11a      	bne.n	8003f18 <_printf_common+0xc8>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	e008      	b.n	8003ef8 <_printf_common+0xa8>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4652      	mov	r2, sl
 8003eea:	4649      	mov	r1, r9
 8003eec:	4638      	mov	r0, r7
 8003eee:	47c0      	blx	r8
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d103      	bne.n	8003efc <_printf_common+0xac>
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efc:	3501      	adds	r5, #1
 8003efe:	e7c6      	b.n	8003e8e <_printf_common+0x3e>
 8003f00:	18e1      	adds	r1, r4, r3
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	2030      	movs	r0, #48	; 0x30
 8003f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f0a:	4422      	add	r2, r4
 8003f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f14:	3302      	adds	r3, #2
 8003f16:	e7c7      	b.n	8003ea8 <_printf_common+0x58>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4638      	mov	r0, r7
 8003f20:	47c0      	blx	r8
 8003f22:	3001      	adds	r0, #1
 8003f24:	d0e6      	beq.n	8003ef4 <_printf_common+0xa4>
 8003f26:	3601      	adds	r6, #1
 8003f28:	e7d9      	b.n	8003ede <_printf_common+0x8e>
	...

08003f2c <_printf_i>:
 8003f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	4691      	mov	r9, r2
 8003f34:	7e27      	ldrb	r7, [r4, #24]
 8003f36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f38:	2f78      	cmp	r7, #120	; 0x78
 8003f3a:	4680      	mov	r8, r0
 8003f3c:	469a      	mov	sl, r3
 8003f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f42:	d807      	bhi.n	8003f54 <_printf_i+0x28>
 8003f44:	2f62      	cmp	r7, #98	; 0x62
 8003f46:	d80a      	bhi.n	8003f5e <_printf_i+0x32>
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	f000 80d8 	beq.w	80040fe <_printf_i+0x1d2>
 8003f4e:	2f58      	cmp	r7, #88	; 0x58
 8003f50:	f000 80a3 	beq.w	800409a <_printf_i+0x16e>
 8003f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f5c:	e03a      	b.n	8003fd4 <_printf_i+0xa8>
 8003f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f62:	2b15      	cmp	r3, #21
 8003f64:	d8f6      	bhi.n	8003f54 <_printf_i+0x28>
 8003f66:	a001      	add	r0, pc, #4	; (adr r0, 8003f6c <_printf_i+0x40>)
 8003f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003f55 	.word	0x08003f55
 8003f78:	08003f55 	.word	0x08003f55
 8003f7c:	08003f55 	.word	0x08003f55
 8003f80:	08003f55 	.word	0x08003f55
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003f55 	.word	0x08003f55
 8003f8c:	08003f55 	.word	0x08003f55
 8003f90:	08003f55 	.word	0x08003f55
 8003f94:	08003f55 	.word	0x08003f55
 8003f98:	080040e5 	.word	0x080040e5
 8003f9c:	08004009 	.word	0x08004009
 8003fa0:	080040c7 	.word	0x080040c7
 8003fa4:	08003f55 	.word	0x08003f55
 8003fa8:	08003f55 	.word	0x08003f55
 8003fac:	08004107 	.word	0x08004107
 8003fb0:	08003f55 	.word	0x08003f55
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08003f55 	.word	0x08003f55
 8003fbc:	08003f55 	.word	0x08003f55
 8003fc0:	080040cf 	.word	0x080040cf
 8003fc4:	680b      	ldr	r3, [r1, #0]
 8003fc6:	1d1a      	adds	r2, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	600a      	str	r2, [r1, #0]
 8003fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0a3      	b.n	8004120 <_printf_i+0x1f4>
 8003fd8:	6825      	ldr	r5, [r4, #0]
 8003fda:	6808      	ldr	r0, [r1, #0]
 8003fdc:	062e      	lsls	r6, r5, #24
 8003fde:	f100 0304 	add.w	r3, r0, #4
 8003fe2:	d50a      	bpl.n	8003ffa <_printf_i+0xce>
 8003fe4:	6805      	ldr	r5, [r0, #0]
 8003fe6:	600b      	str	r3, [r1, #0]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	da03      	bge.n	8003ff4 <_printf_i+0xc8>
 8003fec:	232d      	movs	r3, #45	; 0x2d
 8003fee:	426d      	negs	r5, r5
 8003ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff4:	485e      	ldr	r0, [pc, #376]	; (8004170 <_printf_i+0x244>)
 8003ff6:	230a      	movs	r3, #10
 8003ff8:	e019      	b.n	800402e <_printf_i+0x102>
 8003ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ffe:	6805      	ldr	r5, [r0, #0]
 8004000:	600b      	str	r3, [r1, #0]
 8004002:	bf18      	it	ne
 8004004:	b22d      	sxthne	r5, r5
 8004006:	e7ef      	b.n	8003fe8 <_printf_i+0xbc>
 8004008:	680b      	ldr	r3, [r1, #0]
 800400a:	6825      	ldr	r5, [r4, #0]
 800400c:	1d18      	adds	r0, r3, #4
 800400e:	6008      	str	r0, [r1, #0]
 8004010:	0628      	lsls	r0, r5, #24
 8004012:	d501      	bpl.n	8004018 <_printf_i+0xec>
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	e002      	b.n	800401e <_printf_i+0xf2>
 8004018:	0669      	lsls	r1, r5, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0xe8>
 800401c:	881d      	ldrh	r5, [r3, #0]
 800401e:	4854      	ldr	r0, [pc, #336]	; (8004170 <_printf_i+0x244>)
 8004020:	2f6f      	cmp	r7, #111	; 0x6f
 8004022:	bf0c      	ite	eq
 8004024:	2308      	moveq	r3, #8
 8004026:	230a      	movne	r3, #10
 8004028:	2100      	movs	r1, #0
 800402a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800402e:	6866      	ldr	r6, [r4, #4]
 8004030:	60a6      	str	r6, [r4, #8]
 8004032:	2e00      	cmp	r6, #0
 8004034:	bfa2      	ittt	ge
 8004036:	6821      	ldrge	r1, [r4, #0]
 8004038:	f021 0104 	bicge.w	r1, r1, #4
 800403c:	6021      	strge	r1, [r4, #0]
 800403e:	b90d      	cbnz	r5, 8004044 <_printf_i+0x118>
 8004040:	2e00      	cmp	r6, #0
 8004042:	d04d      	beq.n	80040e0 <_printf_i+0x1b4>
 8004044:	4616      	mov	r6, r2
 8004046:	fbb5 f1f3 	udiv	r1, r5, r3
 800404a:	fb03 5711 	mls	r7, r3, r1, r5
 800404e:	5dc7      	ldrb	r7, [r0, r7]
 8004050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004054:	462f      	mov	r7, r5
 8004056:	42bb      	cmp	r3, r7
 8004058:	460d      	mov	r5, r1
 800405a:	d9f4      	bls.n	8004046 <_printf_i+0x11a>
 800405c:	2b08      	cmp	r3, #8
 800405e:	d10b      	bne.n	8004078 <_printf_i+0x14c>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	07df      	lsls	r7, r3, #31
 8004064:	d508      	bpl.n	8004078 <_printf_i+0x14c>
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	6861      	ldr	r1, [r4, #4]
 800406a:	4299      	cmp	r1, r3
 800406c:	bfde      	ittt	le
 800406e:	2330      	movle	r3, #48	; 0x30
 8004070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004074:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004078:	1b92      	subs	r2, r2, r6
 800407a:	6122      	str	r2, [r4, #16]
 800407c:	f8cd a000 	str.w	sl, [sp]
 8004080:	464b      	mov	r3, r9
 8004082:	aa03      	add	r2, sp, #12
 8004084:	4621      	mov	r1, r4
 8004086:	4640      	mov	r0, r8
 8004088:	f7ff fee2 	bl	8003e50 <_printf_common>
 800408c:	3001      	adds	r0, #1
 800408e:	d14c      	bne.n	800412a <_printf_i+0x1fe>
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	b004      	add	sp, #16
 8004096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409a:	4835      	ldr	r0, [pc, #212]	; (8004170 <_printf_i+0x244>)
 800409c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	680e      	ldr	r6, [r1, #0]
 80040a4:	061f      	lsls	r7, r3, #24
 80040a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80040aa:	600e      	str	r6, [r1, #0]
 80040ac:	d514      	bpl.n	80040d8 <_printf_i+0x1ac>
 80040ae:	07d9      	lsls	r1, r3, #31
 80040b0:	bf44      	itt	mi
 80040b2:	f043 0320 	orrmi.w	r3, r3, #32
 80040b6:	6023      	strmi	r3, [r4, #0]
 80040b8:	b91d      	cbnz	r5, 80040c2 <_printf_i+0x196>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f023 0320 	bic.w	r3, r3, #32
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	2310      	movs	r3, #16
 80040c4:	e7b0      	b.n	8004028 <_printf_i+0xfc>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f043 0320 	orr.w	r3, r3, #32
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	2378      	movs	r3, #120	; 0x78
 80040d0:	4828      	ldr	r0, [pc, #160]	; (8004174 <_printf_i+0x248>)
 80040d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040d6:	e7e3      	b.n	80040a0 <_printf_i+0x174>
 80040d8:	065e      	lsls	r6, r3, #25
 80040da:	bf48      	it	mi
 80040dc:	b2ad      	uxthmi	r5, r5
 80040de:	e7e6      	b.n	80040ae <_printf_i+0x182>
 80040e0:	4616      	mov	r6, r2
 80040e2:	e7bb      	b.n	800405c <_printf_i+0x130>
 80040e4:	680b      	ldr	r3, [r1, #0]
 80040e6:	6826      	ldr	r6, [r4, #0]
 80040e8:	6960      	ldr	r0, [r4, #20]
 80040ea:	1d1d      	adds	r5, r3, #4
 80040ec:	600d      	str	r5, [r1, #0]
 80040ee:	0635      	lsls	r5, r6, #24
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	d501      	bpl.n	80040f8 <_printf_i+0x1cc>
 80040f4:	6018      	str	r0, [r3, #0]
 80040f6:	e002      	b.n	80040fe <_printf_i+0x1d2>
 80040f8:	0671      	lsls	r1, r6, #25
 80040fa:	d5fb      	bpl.n	80040f4 <_printf_i+0x1c8>
 80040fc:	8018      	strh	r0, [r3, #0]
 80040fe:	2300      	movs	r3, #0
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	4616      	mov	r6, r2
 8004104:	e7ba      	b.n	800407c <_printf_i+0x150>
 8004106:	680b      	ldr	r3, [r1, #0]
 8004108:	1d1a      	adds	r2, r3, #4
 800410a:	600a      	str	r2, [r1, #0]
 800410c:	681e      	ldr	r6, [r3, #0]
 800410e:	6862      	ldr	r2, [r4, #4]
 8004110:	2100      	movs	r1, #0
 8004112:	4630      	mov	r0, r6
 8004114:	f7fc f87c 	bl	8000210 <memchr>
 8004118:	b108      	cbz	r0, 800411e <_printf_i+0x1f2>
 800411a:	1b80      	subs	r0, r0, r6
 800411c:	6060      	str	r0, [r4, #4]
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	6123      	str	r3, [r4, #16]
 8004122:	2300      	movs	r3, #0
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004128:	e7a8      	b.n	800407c <_printf_i+0x150>
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	4632      	mov	r2, r6
 800412e:	4649      	mov	r1, r9
 8004130:	4640      	mov	r0, r8
 8004132:	47d0      	blx	sl
 8004134:	3001      	adds	r0, #1
 8004136:	d0ab      	beq.n	8004090 <_printf_i+0x164>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	079b      	lsls	r3, r3, #30
 800413c:	d413      	bmi.n	8004166 <_printf_i+0x23a>
 800413e:	68e0      	ldr	r0, [r4, #12]
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	4298      	cmp	r0, r3
 8004144:	bfb8      	it	lt
 8004146:	4618      	movlt	r0, r3
 8004148:	e7a4      	b.n	8004094 <_printf_i+0x168>
 800414a:	2301      	movs	r3, #1
 800414c:	4632      	mov	r2, r6
 800414e:	4649      	mov	r1, r9
 8004150:	4640      	mov	r0, r8
 8004152:	47d0      	blx	sl
 8004154:	3001      	adds	r0, #1
 8004156:	d09b      	beq.n	8004090 <_printf_i+0x164>
 8004158:	3501      	adds	r5, #1
 800415a:	68e3      	ldr	r3, [r4, #12]
 800415c:	9903      	ldr	r1, [sp, #12]
 800415e:	1a5b      	subs	r3, r3, r1
 8004160:	42ab      	cmp	r3, r5
 8004162:	dcf2      	bgt.n	800414a <_printf_i+0x21e>
 8004164:	e7eb      	b.n	800413e <_printf_i+0x212>
 8004166:	2500      	movs	r5, #0
 8004168:	f104 0619 	add.w	r6, r4, #25
 800416c:	e7f5      	b.n	800415a <_printf_i+0x22e>
 800416e:	bf00      	nop
 8004170:	08004821 	.word	0x08004821
 8004174:	08004832 	.word	0x08004832

08004178 <_sbrk_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	4d06      	ldr	r5, [pc, #24]	; (8004194 <_sbrk_r+0x1c>)
 800417c:	2300      	movs	r3, #0
 800417e:	4604      	mov	r4, r0
 8004180:	4608      	mov	r0, r1
 8004182:	602b      	str	r3, [r5, #0]
 8004184:	f7fc ff32 	bl	8000fec <_sbrk>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d102      	bne.n	8004192 <_sbrk_r+0x1a>
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	b103      	cbz	r3, 8004192 <_sbrk_r+0x1a>
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	2000017c 	.word	0x2000017c

08004198 <__sread>:
 8004198:	b510      	push	{r4, lr}
 800419a:	460c      	mov	r4, r1
 800419c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a0:	f000 fab4 	bl	800470c <_read_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	bfab      	itete	ge
 80041a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041aa:	89a3      	ldrhlt	r3, [r4, #12]
 80041ac:	181b      	addge	r3, r3, r0
 80041ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041b2:	bfac      	ite	ge
 80041b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80041b6:	81a3      	strhlt	r3, [r4, #12]
 80041b8:	bd10      	pop	{r4, pc}

080041ba <__swrite>:
 80041ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041be:	461f      	mov	r7, r3
 80041c0:	898b      	ldrh	r3, [r1, #12]
 80041c2:	05db      	lsls	r3, r3, #23
 80041c4:	4605      	mov	r5, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	4616      	mov	r6, r2
 80041ca:	d505      	bpl.n	80041d8 <__swrite+0x1e>
 80041cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d0:	2302      	movs	r3, #2
 80041d2:	2200      	movs	r2, #0
 80041d4:	f000 f9c8 	bl	8004568 <_lseek_r>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e2:	81a3      	strh	r3, [r4, #12]
 80041e4:	4632      	mov	r2, r6
 80041e6:	463b      	mov	r3, r7
 80041e8:	4628      	mov	r0, r5
 80041ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ee:	f000 b869 	b.w	80042c4 <_write_r>

080041f2 <__sseek>:
 80041f2:	b510      	push	{r4, lr}
 80041f4:	460c      	mov	r4, r1
 80041f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041fa:	f000 f9b5 	bl	8004568 <_lseek_r>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	bf15      	itete	ne
 8004204:	6560      	strne	r0, [r4, #84]	; 0x54
 8004206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800420a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800420e:	81a3      	strheq	r3, [r4, #12]
 8004210:	bf18      	it	ne
 8004212:	81a3      	strhne	r3, [r4, #12]
 8004214:	bd10      	pop	{r4, pc}

08004216 <__sclose>:
 8004216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421a:	f000 b8d3 	b.w	80043c4 <_close_r>
	...

08004220 <__swbuf_r>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	460e      	mov	r6, r1
 8004224:	4614      	mov	r4, r2
 8004226:	4605      	mov	r5, r0
 8004228:	b118      	cbz	r0, 8004232 <__swbuf_r+0x12>
 800422a:	6983      	ldr	r3, [r0, #24]
 800422c:	b90b      	cbnz	r3, 8004232 <__swbuf_r+0x12>
 800422e:	f7ff fbbb 	bl	80039a8 <__sinit>
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <__swbuf_r+0x98>)
 8004234:	429c      	cmp	r4, r3
 8004236:	d12b      	bne.n	8004290 <__swbuf_r+0x70>
 8004238:	686c      	ldr	r4, [r5, #4]
 800423a:	69a3      	ldr	r3, [r4, #24]
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	071a      	lsls	r2, r3, #28
 8004242:	d52f      	bpl.n	80042a4 <__swbuf_r+0x84>
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	b36b      	cbz	r3, 80042a4 <__swbuf_r+0x84>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1ac0      	subs	r0, r0, r3
 800424e:	6963      	ldr	r3, [r4, #20]
 8004250:	b2f6      	uxtb	r6, r6
 8004252:	4283      	cmp	r3, r0
 8004254:	4637      	mov	r7, r6
 8004256:	dc04      	bgt.n	8004262 <__swbuf_r+0x42>
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f948 	bl	80044f0 <_fflush_r>
 8004260:	bb30      	cbnz	r0, 80042b0 <__swbuf_r+0x90>
 8004262:	68a3      	ldr	r3, [r4, #8]
 8004264:	3b01      	subs	r3, #1
 8004266:	60a3      	str	r3, [r4, #8]
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	6022      	str	r2, [r4, #0]
 800426e:	701e      	strb	r6, [r3, #0]
 8004270:	6963      	ldr	r3, [r4, #20]
 8004272:	3001      	adds	r0, #1
 8004274:	4283      	cmp	r3, r0
 8004276:	d004      	beq.n	8004282 <__swbuf_r+0x62>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	07db      	lsls	r3, r3, #31
 800427c:	d506      	bpl.n	800428c <__swbuf_r+0x6c>
 800427e:	2e0a      	cmp	r6, #10
 8004280:	d104      	bne.n	800428c <__swbuf_r+0x6c>
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 f933 	bl	80044f0 <_fflush_r>
 800428a:	b988      	cbnz	r0, 80042b0 <__swbuf_r+0x90>
 800428c:	4638      	mov	r0, r7
 800428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <__swbuf_r+0x9c>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d101      	bne.n	800429a <__swbuf_r+0x7a>
 8004296:	68ac      	ldr	r4, [r5, #8]
 8004298:	e7cf      	b.n	800423a <__swbuf_r+0x1a>
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <__swbuf_r+0xa0>)
 800429c:	429c      	cmp	r4, r3
 800429e:	bf08      	it	eq
 80042a0:	68ec      	ldreq	r4, [r5, #12]
 80042a2:	e7ca      	b.n	800423a <__swbuf_r+0x1a>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f81e 	bl	80042e8 <__swsetup_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d0cb      	beq.n	8004248 <__swbuf_r+0x28>
 80042b0:	f04f 37ff 	mov.w	r7, #4294967295
 80042b4:	e7ea      	b.n	800428c <__swbuf_r+0x6c>
 80042b6:	bf00      	nop
 80042b8:	080047d0 	.word	0x080047d0
 80042bc:	080047f0 	.word	0x080047f0
 80042c0:	080047b0 	.word	0x080047b0

080042c4 <_write_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4d07      	ldr	r5, [pc, #28]	; (80042e4 <_write_r+0x20>)
 80042c8:	4604      	mov	r4, r0
 80042ca:	4608      	mov	r0, r1
 80042cc:	4611      	mov	r1, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	602a      	str	r2, [r5, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fc f968 	bl	80005a8 <_write>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_write_r+0x1e>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_write_r+0x1e>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	2000017c 	.word	0x2000017c

080042e8 <__swsetup_r>:
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <__swsetup_r+0xcc>)
 80042ea:	b570      	push	{r4, r5, r6, lr}
 80042ec:	681d      	ldr	r5, [r3, #0]
 80042ee:	4606      	mov	r6, r0
 80042f0:	460c      	mov	r4, r1
 80042f2:	b125      	cbz	r5, 80042fe <__swsetup_r+0x16>
 80042f4:	69ab      	ldr	r3, [r5, #24]
 80042f6:	b913      	cbnz	r3, 80042fe <__swsetup_r+0x16>
 80042f8:	4628      	mov	r0, r5
 80042fa:	f7ff fb55 	bl	80039a8 <__sinit>
 80042fe:	4b2e      	ldr	r3, [pc, #184]	; (80043b8 <__swsetup_r+0xd0>)
 8004300:	429c      	cmp	r4, r3
 8004302:	d10f      	bne.n	8004324 <__swsetup_r+0x3c>
 8004304:	686c      	ldr	r4, [r5, #4]
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800430c:	0719      	lsls	r1, r3, #28
 800430e:	d42c      	bmi.n	800436a <__swsetup_r+0x82>
 8004310:	06dd      	lsls	r5, r3, #27
 8004312:	d411      	bmi.n	8004338 <__swsetup_r+0x50>
 8004314:	2309      	movs	r3, #9
 8004316:	6033      	str	r3, [r6, #0]
 8004318:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	f04f 30ff 	mov.w	r0, #4294967295
 8004322:	e03e      	b.n	80043a2 <__swsetup_r+0xba>
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <__swsetup_r+0xd4>)
 8004326:	429c      	cmp	r4, r3
 8004328:	d101      	bne.n	800432e <__swsetup_r+0x46>
 800432a:	68ac      	ldr	r4, [r5, #8]
 800432c:	e7eb      	b.n	8004306 <__swsetup_r+0x1e>
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <__swsetup_r+0xd8>)
 8004330:	429c      	cmp	r4, r3
 8004332:	bf08      	it	eq
 8004334:	68ec      	ldreq	r4, [r5, #12]
 8004336:	e7e6      	b.n	8004306 <__swsetup_r+0x1e>
 8004338:	0758      	lsls	r0, r3, #29
 800433a:	d512      	bpl.n	8004362 <__swsetup_r+0x7a>
 800433c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800433e:	b141      	cbz	r1, 8004352 <__swsetup_r+0x6a>
 8004340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004344:	4299      	cmp	r1, r3
 8004346:	d002      	beq.n	800434e <__swsetup_r+0x66>
 8004348:	4630      	mov	r0, r6
 800434a:	f000 f98f 	bl	800466c <_free_r>
 800434e:	2300      	movs	r3, #0
 8004350:	6363      	str	r3, [r4, #52]	; 0x34
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	2300      	movs	r3, #0
 800435c:	6063      	str	r3, [r4, #4]
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	81a3      	strh	r3, [r4, #12]
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	b94b      	cbnz	r3, 8004382 <__swsetup_r+0x9a>
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d003      	beq.n	8004382 <__swsetup_r+0x9a>
 800437a:	4621      	mov	r1, r4
 800437c:	4630      	mov	r0, r6
 800437e:	f000 f929 	bl	80045d4 <__smakebuf_r>
 8004382:	89a0      	ldrh	r0, [r4, #12]
 8004384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004388:	f010 0301 	ands.w	r3, r0, #1
 800438c:	d00a      	beq.n	80043a4 <__swsetup_r+0xbc>
 800438e:	2300      	movs	r3, #0
 8004390:	60a3      	str	r3, [r4, #8]
 8004392:	6963      	ldr	r3, [r4, #20]
 8004394:	425b      	negs	r3, r3
 8004396:	61a3      	str	r3, [r4, #24]
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	b943      	cbnz	r3, 80043ae <__swsetup_r+0xc6>
 800439c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a0:	d1ba      	bne.n	8004318 <__swsetup_r+0x30>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	0781      	lsls	r1, r0, #30
 80043a6:	bf58      	it	pl
 80043a8:	6963      	ldrpl	r3, [r4, #20]
 80043aa:	60a3      	str	r3, [r4, #8]
 80043ac:	e7f4      	b.n	8004398 <__swsetup_r+0xb0>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e7f7      	b.n	80043a2 <__swsetup_r+0xba>
 80043b2:	bf00      	nop
 80043b4:	20000010 	.word	0x20000010
 80043b8:	080047d0 	.word	0x080047d0
 80043bc:	080047f0 	.word	0x080047f0
 80043c0:	080047b0 	.word	0x080047b0

080043c4 <_close_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d06      	ldr	r5, [pc, #24]	; (80043e0 <_close_r+0x1c>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fc fdd7 	bl	8000f82 <_close>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_close_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_close_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	2000017c 	.word	0x2000017c

080043e4 <__sflush_r>:
 80043e4:	898a      	ldrh	r2, [r1, #12]
 80043e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	0710      	lsls	r0, r2, #28
 80043ee:	460c      	mov	r4, r1
 80043f0:	d458      	bmi.n	80044a4 <__sflush_r+0xc0>
 80043f2:	684b      	ldr	r3, [r1, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	dc05      	bgt.n	8004404 <__sflush_r+0x20>
 80043f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	dc02      	bgt.n	8004404 <__sflush_r+0x20>
 80043fe:	2000      	movs	r0, #0
 8004400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004406:	2e00      	cmp	r6, #0
 8004408:	d0f9      	beq.n	80043fe <__sflush_r+0x1a>
 800440a:	2300      	movs	r3, #0
 800440c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004410:	682f      	ldr	r7, [r5, #0]
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	d032      	beq.n	800447c <__sflush_r+0x98>
 8004416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	075a      	lsls	r2, r3, #29
 800441c:	d505      	bpl.n	800442a <__sflush_r+0x46>
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	1ac0      	subs	r0, r0, r3
 8004422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004424:	b10b      	cbz	r3, 800442a <__sflush_r+0x46>
 8004426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004428:	1ac0      	subs	r0, r0, r3
 800442a:	2300      	movs	r3, #0
 800442c:	4602      	mov	r2, r0
 800442e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004430:	6a21      	ldr	r1, [r4, #32]
 8004432:	4628      	mov	r0, r5
 8004434:	47b0      	blx	r6
 8004436:	1c43      	adds	r3, r0, #1
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	d106      	bne.n	800444a <__sflush_r+0x66>
 800443c:	6829      	ldr	r1, [r5, #0]
 800443e:	291d      	cmp	r1, #29
 8004440:	d82c      	bhi.n	800449c <__sflush_r+0xb8>
 8004442:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <__sflush_r+0x108>)
 8004444:	40ca      	lsrs	r2, r1
 8004446:	07d6      	lsls	r6, r2, #31
 8004448:	d528      	bpl.n	800449c <__sflush_r+0xb8>
 800444a:	2200      	movs	r2, #0
 800444c:	6062      	str	r2, [r4, #4]
 800444e:	04d9      	lsls	r1, r3, #19
 8004450:	6922      	ldr	r2, [r4, #16]
 8004452:	6022      	str	r2, [r4, #0]
 8004454:	d504      	bpl.n	8004460 <__sflush_r+0x7c>
 8004456:	1c42      	adds	r2, r0, #1
 8004458:	d101      	bne.n	800445e <__sflush_r+0x7a>
 800445a:	682b      	ldr	r3, [r5, #0]
 800445c:	b903      	cbnz	r3, 8004460 <__sflush_r+0x7c>
 800445e:	6560      	str	r0, [r4, #84]	; 0x54
 8004460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004462:	602f      	str	r7, [r5, #0]
 8004464:	2900      	cmp	r1, #0
 8004466:	d0ca      	beq.n	80043fe <__sflush_r+0x1a>
 8004468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800446c:	4299      	cmp	r1, r3
 800446e:	d002      	beq.n	8004476 <__sflush_r+0x92>
 8004470:	4628      	mov	r0, r5
 8004472:	f000 f8fb 	bl	800466c <_free_r>
 8004476:	2000      	movs	r0, #0
 8004478:	6360      	str	r0, [r4, #52]	; 0x34
 800447a:	e7c1      	b.n	8004400 <__sflush_r+0x1c>
 800447c:	6a21      	ldr	r1, [r4, #32]
 800447e:	2301      	movs	r3, #1
 8004480:	4628      	mov	r0, r5
 8004482:	47b0      	blx	r6
 8004484:	1c41      	adds	r1, r0, #1
 8004486:	d1c7      	bne.n	8004418 <__sflush_r+0x34>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0c4      	beq.n	8004418 <__sflush_r+0x34>
 800448e:	2b1d      	cmp	r3, #29
 8004490:	d001      	beq.n	8004496 <__sflush_r+0xb2>
 8004492:	2b16      	cmp	r3, #22
 8004494:	d101      	bne.n	800449a <__sflush_r+0xb6>
 8004496:	602f      	str	r7, [r5, #0]
 8004498:	e7b1      	b.n	80043fe <__sflush_r+0x1a>
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	e7ad      	b.n	8004400 <__sflush_r+0x1c>
 80044a4:	690f      	ldr	r7, [r1, #16]
 80044a6:	2f00      	cmp	r7, #0
 80044a8:	d0a9      	beq.n	80043fe <__sflush_r+0x1a>
 80044aa:	0793      	lsls	r3, r2, #30
 80044ac:	680e      	ldr	r6, [r1, #0]
 80044ae:	bf08      	it	eq
 80044b0:	694b      	ldreq	r3, [r1, #20]
 80044b2:	600f      	str	r7, [r1, #0]
 80044b4:	bf18      	it	ne
 80044b6:	2300      	movne	r3, #0
 80044b8:	eba6 0807 	sub.w	r8, r6, r7
 80044bc:	608b      	str	r3, [r1, #8]
 80044be:	f1b8 0f00 	cmp.w	r8, #0
 80044c2:	dd9c      	ble.n	80043fe <__sflush_r+0x1a>
 80044c4:	6a21      	ldr	r1, [r4, #32]
 80044c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044c8:	4643      	mov	r3, r8
 80044ca:	463a      	mov	r2, r7
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b0      	blx	r6
 80044d0:	2800      	cmp	r0, #0
 80044d2:	dc06      	bgt.n	80044e2 <__sflush_r+0xfe>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044da:	81a3      	strh	r3, [r4, #12]
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	e78e      	b.n	8004400 <__sflush_r+0x1c>
 80044e2:	4407      	add	r7, r0
 80044e4:	eba8 0800 	sub.w	r8, r8, r0
 80044e8:	e7e9      	b.n	80044be <__sflush_r+0xda>
 80044ea:	bf00      	nop
 80044ec:	20400001 	.word	0x20400001

080044f0 <_fflush_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	690b      	ldr	r3, [r1, #16]
 80044f4:	4605      	mov	r5, r0
 80044f6:	460c      	mov	r4, r1
 80044f8:	b913      	cbnz	r3, 8004500 <_fflush_r+0x10>
 80044fa:	2500      	movs	r5, #0
 80044fc:	4628      	mov	r0, r5
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	b118      	cbz	r0, 800450a <_fflush_r+0x1a>
 8004502:	6983      	ldr	r3, [r0, #24]
 8004504:	b90b      	cbnz	r3, 800450a <_fflush_r+0x1a>
 8004506:	f7ff fa4f 	bl	80039a8 <__sinit>
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <_fflush_r+0x6c>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d11b      	bne.n	8004548 <_fflush_r+0x58>
 8004510:	686c      	ldr	r4, [r5, #4]
 8004512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ef      	beq.n	80044fa <_fflush_r+0xa>
 800451a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800451c:	07d0      	lsls	r0, r2, #31
 800451e:	d404      	bmi.n	800452a <_fflush_r+0x3a>
 8004520:	0599      	lsls	r1, r3, #22
 8004522:	d402      	bmi.n	800452a <_fflush_r+0x3a>
 8004524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004526:	f7ff fadd 	bl	8003ae4 <__retarget_lock_acquire_recursive>
 800452a:	4628      	mov	r0, r5
 800452c:	4621      	mov	r1, r4
 800452e:	f7ff ff59 	bl	80043e4 <__sflush_r>
 8004532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004534:	07da      	lsls	r2, r3, #31
 8004536:	4605      	mov	r5, r0
 8004538:	d4e0      	bmi.n	80044fc <_fflush_r+0xc>
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	059b      	lsls	r3, r3, #22
 800453e:	d4dd      	bmi.n	80044fc <_fflush_r+0xc>
 8004540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004542:	f7ff fad0 	bl	8003ae6 <__retarget_lock_release_recursive>
 8004546:	e7d9      	b.n	80044fc <_fflush_r+0xc>
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <_fflush_r+0x70>)
 800454a:	429c      	cmp	r4, r3
 800454c:	d101      	bne.n	8004552 <_fflush_r+0x62>
 800454e:	68ac      	ldr	r4, [r5, #8]
 8004550:	e7df      	b.n	8004512 <_fflush_r+0x22>
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <_fflush_r+0x74>)
 8004554:	429c      	cmp	r4, r3
 8004556:	bf08      	it	eq
 8004558:	68ec      	ldreq	r4, [r5, #12]
 800455a:	e7da      	b.n	8004512 <_fflush_r+0x22>
 800455c:	080047d0 	.word	0x080047d0
 8004560:	080047f0 	.word	0x080047f0
 8004564:	080047b0 	.word	0x080047b0

08004568 <_lseek_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d07      	ldr	r5, [pc, #28]	; (8004588 <_lseek_r+0x20>)
 800456c:	4604      	mov	r4, r0
 800456e:	4608      	mov	r0, r1
 8004570:	4611      	mov	r1, r2
 8004572:	2200      	movs	r2, #0
 8004574:	602a      	str	r2, [r5, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f7fc fd2a 	bl	8000fd0 <_lseek>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_lseek_r+0x1e>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_lseek_r+0x1e>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	2000017c 	.word	0x2000017c

0800458c <__swhatbuf_r>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	460e      	mov	r6, r1
 8004590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004594:	2900      	cmp	r1, #0
 8004596:	b096      	sub	sp, #88	; 0x58
 8004598:	4614      	mov	r4, r2
 800459a:	461d      	mov	r5, r3
 800459c:	da07      	bge.n	80045ae <__swhatbuf_r+0x22>
 800459e:	2300      	movs	r3, #0
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	89b3      	ldrh	r3, [r6, #12]
 80045a4:	061a      	lsls	r2, r3, #24
 80045a6:	d410      	bmi.n	80045ca <__swhatbuf_r+0x3e>
 80045a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ac:	e00e      	b.n	80045cc <__swhatbuf_r+0x40>
 80045ae:	466a      	mov	r2, sp
 80045b0:	f000 f8be 	bl	8004730 <_fstat_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	dbf2      	blt.n	800459e <__swhatbuf_r+0x12>
 80045b8:	9a01      	ldr	r2, [sp, #4]
 80045ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045c2:	425a      	negs	r2, r3
 80045c4:	415a      	adcs	r2, r3
 80045c6:	602a      	str	r2, [r5, #0]
 80045c8:	e7ee      	b.n	80045a8 <__swhatbuf_r+0x1c>
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	2000      	movs	r0, #0
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	b016      	add	sp, #88	; 0x58
 80045d2:	bd70      	pop	{r4, r5, r6, pc}

080045d4 <__smakebuf_r>:
 80045d4:	898b      	ldrh	r3, [r1, #12]
 80045d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045d8:	079d      	lsls	r5, r3, #30
 80045da:	4606      	mov	r6, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	d507      	bpl.n	80045f0 <__smakebuf_r+0x1c>
 80045e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	6123      	str	r3, [r4, #16]
 80045e8:	2301      	movs	r3, #1
 80045ea:	6163      	str	r3, [r4, #20]
 80045ec:	b002      	add	sp, #8
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	ab01      	add	r3, sp, #4
 80045f2:	466a      	mov	r2, sp
 80045f4:	f7ff ffca 	bl	800458c <__swhatbuf_r>
 80045f8:	9900      	ldr	r1, [sp, #0]
 80045fa:	4605      	mov	r5, r0
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff fa73 	bl	8003ae8 <_malloc_r>
 8004602:	b948      	cbnz	r0, 8004618 <__smakebuf_r+0x44>
 8004604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004608:	059a      	lsls	r2, r3, #22
 800460a:	d4ef      	bmi.n	80045ec <__smakebuf_r+0x18>
 800460c:	f023 0303 	bic.w	r3, r3, #3
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	81a3      	strh	r3, [r4, #12]
 8004616:	e7e3      	b.n	80045e0 <__smakebuf_r+0xc>
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <__smakebuf_r+0x7c>)
 800461a:	62b3      	str	r3, [r6, #40]	; 0x28
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	6020      	str	r0, [r4, #0]
 8004620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	9b00      	ldr	r3, [sp, #0]
 8004628:	6163      	str	r3, [r4, #20]
 800462a:	9b01      	ldr	r3, [sp, #4]
 800462c:	6120      	str	r0, [r4, #16]
 800462e:	b15b      	cbz	r3, 8004648 <__smakebuf_r+0x74>
 8004630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f88d 	bl	8004754 <_isatty_r>
 800463a:	b128      	cbz	r0, 8004648 <__smakebuf_r+0x74>
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	89a0      	ldrh	r0, [r4, #12]
 800464a:	4305      	orrs	r5, r0
 800464c:	81a5      	strh	r5, [r4, #12]
 800464e:	e7cd      	b.n	80045ec <__smakebuf_r+0x18>
 8004650:	08003941 	.word	0x08003941

08004654 <__malloc_lock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_lock+0x8>)
 8004656:	f7ff ba45 	b.w	8003ae4 <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20000174 	.word	0x20000174

08004660 <__malloc_unlock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_unlock+0x8>)
 8004662:	f7ff ba40 	b.w	8003ae6 <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20000174 	.word	0x20000174

0800466c <_free_r>:
 800466c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800466e:	2900      	cmp	r1, #0
 8004670:	d048      	beq.n	8004704 <_free_r+0x98>
 8004672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004676:	9001      	str	r0, [sp, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f1a1 0404 	sub.w	r4, r1, #4
 800467e:	bfb8      	it	lt
 8004680:	18e4      	addlt	r4, r4, r3
 8004682:	f7ff ffe7 	bl	8004654 <__malloc_lock>
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <_free_r+0x9c>)
 8004688:	9801      	ldr	r0, [sp, #4]
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	4615      	mov	r5, r2
 800468e:	b933      	cbnz	r3, 800469e <_free_r+0x32>
 8004690:	6063      	str	r3, [r4, #4]
 8004692:	6014      	str	r4, [r2, #0]
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800469a:	f7ff bfe1 	b.w	8004660 <__malloc_unlock>
 800469e:	42a3      	cmp	r3, r4
 80046a0:	d90b      	bls.n	80046ba <_free_r+0x4e>
 80046a2:	6821      	ldr	r1, [r4, #0]
 80046a4:	1862      	adds	r2, r4, r1
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf04      	itt	eq
 80046aa:	681a      	ldreq	r2, [r3, #0]
 80046ac:	685b      	ldreq	r3, [r3, #4]
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	bf04      	itt	eq
 80046b2:	1852      	addeq	r2, r2, r1
 80046b4:	6022      	streq	r2, [r4, #0]
 80046b6:	602c      	str	r4, [r5, #0]
 80046b8:	e7ec      	b.n	8004694 <_free_r+0x28>
 80046ba:	461a      	mov	r2, r3
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b10b      	cbz	r3, 80046c4 <_free_r+0x58>
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d9fa      	bls.n	80046ba <_free_r+0x4e>
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	1855      	adds	r5, r2, r1
 80046c8:	42a5      	cmp	r5, r4
 80046ca:	d10b      	bne.n	80046e4 <_free_r+0x78>
 80046cc:	6824      	ldr	r4, [r4, #0]
 80046ce:	4421      	add	r1, r4
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	d1dd      	bne.n	8004694 <_free_r+0x28>
 80046d8:	681c      	ldr	r4, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	6053      	str	r3, [r2, #4]
 80046de:	4421      	add	r1, r4
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	e7d7      	b.n	8004694 <_free_r+0x28>
 80046e4:	d902      	bls.n	80046ec <_free_r+0x80>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6003      	str	r3, [r0, #0]
 80046ea:	e7d3      	b.n	8004694 <_free_r+0x28>
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	1961      	adds	r1, r4, r5
 80046f0:	428b      	cmp	r3, r1
 80046f2:	bf04      	itt	eq
 80046f4:	6819      	ldreq	r1, [r3, #0]
 80046f6:	685b      	ldreq	r3, [r3, #4]
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	bf04      	itt	eq
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	6054      	str	r4, [r2, #4]
 8004702:	e7c7      	b.n	8004694 <_free_r+0x28>
 8004704:	b003      	add	sp, #12
 8004706:	bd30      	pop	{r4, r5, pc}
 8004708:	20000094 	.word	0x20000094

0800470c <_read_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d07      	ldr	r5, [pc, #28]	; (800472c <_read_r+0x20>)
 8004710:	4604      	mov	r4, r0
 8004712:	4608      	mov	r0, r1
 8004714:	4611      	mov	r1, r2
 8004716:	2200      	movs	r2, #0
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fc fc14 	bl	8000f48 <_read>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_read_r+0x1e>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_read_r+0x1e>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	2000017c 	.word	0x2000017c

08004730 <_fstat_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	; (8004750 <_fstat_r+0x20>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	f7fc fc2c 	bl	8000f9a <_fstat>
 8004742:	1c43      	adds	r3, r0, #1
 8004744:	d102      	bne.n	800474c <_fstat_r+0x1c>
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	b103      	cbz	r3, 800474c <_fstat_r+0x1c>
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	bd38      	pop	{r3, r4, r5, pc}
 800474e:	bf00      	nop
 8004750:	2000017c 	.word	0x2000017c

08004754 <_isatty_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d06      	ldr	r5, [pc, #24]	; (8004770 <_isatty_r+0x1c>)
 8004758:	2300      	movs	r3, #0
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	f7fc fc2b 	bl	8000fba <_isatty>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_isatty_r+0x1a>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_isatty_r+0x1a>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	2000017c 	.word	0x2000017c

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
