
LAB6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005014  08005014  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800501c  0800501c  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  08005024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000288  080052ac  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  080052ac  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b5f  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ae  00000000  00000000  00032e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000350c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00035eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002758c  00000000  00000000  00036bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001274f  00000000  00000000  0005e15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2728  00000000  00000000  000708ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162fd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  00163028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e68 	.word	0x08004e68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08004e68 	.word	0x08004e68

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <_write>:
//-------------------------------------------------------------							write
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef xStatus;
	switch (file) {
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d003      	beq.n	80005c2 <_write+0x1a>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d015      	beq.n	80005ec <_write+0x44>
 80005c0:	e029      	b.n	8000616 <_write+0x6e>
	case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	68b9      	ldr	r1, [r7, #8]
 80005cc:	481a      	ldr	r0, [pc, #104]	; (8000638 <_write+0x90>)
 80005ce:	f002 ffbd 	bl	800354c <HAL_UART_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d024      	beq.n	8000626 <_write+0x7e>
			errno = EIO;
 80005dc:	f003 fc46 	bl	8003e6c <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2205      	movs	r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
			return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e020      	b.n	800062e <_write+0x86>
		}
		break;
	case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	4810      	ldr	r0, [pc, #64]	; (8000638 <_write+0x90>)
 80005f8:	f002 ffa8 	bl	800354c <HAL_UART_Transmit>
 80005fc:	4603      	mov	r3, r0
 80005fe:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d011      	beq.n	800062a <_write+0x82>
			errno = EIO;
 8000606:	f003 fc31 	bl	8003e6c <__errno>
 800060a:	4603      	mov	r3, r0
 800060c:	2205      	movs	r2, #5
 800060e:	601a      	str	r2, [r3, #0]
			return -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	e00b      	b.n	800062e <_write+0x86>
		}
		break;
	default:
		errno = EBADF;
 8000616:	f003 fc29 	bl	8003e6c <__errno>
 800061a:	4603      	mov	r3, r0
 800061c:	2209      	movs	r2, #9
 800061e:	601a      	str	r2, [r3, #0]
		return -1;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	e003      	b.n	800062e <_write+0x86>
		break;
 8000626:	bf00      	nop
 8000628:	e000      	b.n	800062c <_write+0x84>
		break;
 800062a:	bf00      	nop
	}
	return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000354 	.word	0x20000354

0800063c <initial_state>:
//Deze globale variabele houd de status bij van het fsm
fsm_states_t fsm_current_state = INITIAL_STATE;

// Hieronder komen de state handlers. Elke functie neemt 1 state voor zijn rekening.
void initial_state(void *arg)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	//fflush(stdout);
	//scanf("%c%*c",&c);
	//if(c == 'w'){
	// Als de gebruiker het juiste karakter ingeeft (w) gaan we naar de volgende state
	//printf("   u gaf het juiste karakter in\r\n");
	fsm_current_state = IDLE_STATE;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <initial_state+0x1c>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
	//}else{
	// Anders blijven we in deze state
	//printf("   Sorry dat was niet het juiste karakter\r\n");
	//}
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200002ad 	.word	0x200002ad

0800065c <idle_state>:

void idle_state(void *arg)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	printf(" Entered idle_state\r\n");
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <idle_state+0x44>)
 8000666:	f003 fcb9 	bl	8003fdc <puts>
	uint8_t recbit = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <idle_state+0x48>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	f003 0320 	and.w	r3, r3, #32
 8000674:	2b20      	cmp	r3, #32
 8000676:	bf0c      	ite	eq
 8000678:	2301      	moveq	r3, #1
 800067a:	2300      	movne	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	73fb      	strb	r3, [r7, #15]
	if(recbit){
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <idle_state+0x3c>
		//start timer 1,5
		HAL_TIM_Base_Start_IT(&htim3);
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <idle_state+0x4c>)
 8000688:	f002 fa74 	bl	8002b74 <HAL_TIM_Base_Start_IT>
		//start timer 3,5
		HAL_TIM_Base_Start_IT(&htim4);
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <idle_state+0x50>)
 800068e:	f002 fa71 	bl	8002b74 <HAL_TIM_Base_Start_IT>
		//change state
		fsm_current_state = RECEPTION_STATE;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <idle_state+0x54>)
 8000694:	2203      	movs	r2, #3
 8000696:	701a      	strb	r2, [r3, #0]
	}
	//fsm_current_state = RECEPTION_STATE;
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	08004e80 	.word	0x08004e80
 80006a4:	20000354 	.word	0x20000354
 80006a8:	20000308 	.word	0x20000308
 80006ac:	200002bc 	.word	0x200002bc
 80006b0:	200002ad 	.word	0x200002ad

080006b4 <reception_state>:

void reception_state(void *arg)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	static uint8_t byteCounter = 0;

	printf(" Entered reception_state\r\n");
 80006bc:	481a      	ldr	r0, [pc, #104]	; (8000728 <reception_state+0x74>)
 80006be:	f003 fc8d 	bl	8003fdc <puts>

	//received bit set
	uint8_t recbit = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE);
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <reception_state+0x78>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 0320 	and.w	r3, r3, #32
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	bf0c      	ite	eq
 80006d0:	2301      	moveq	r3, #1
 80006d2:	2300      	movne	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
	//received bytes
	uartReceived = huart1.Instance->RDR;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <reception_state+0x78>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <reception_state+0x7c>)
 80006e2:	701a      	strb	r2, [r3, #0]

	if(recbit){
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d01a      	beq.n	8000720 <reception_state+0x6c>
		message[byteCounter] = uartReceived;
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <reception_state+0x80>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <reception_state+0x7c>)
 80006f2:	7819      	ldrb	r1, [r3, #0]
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <reception_state+0x84>)
 80006f6:	5499      	strb	r1, [r3, r2]
		HAL_TIM_Base_Start_IT(&htim3);
 80006f8:	4810      	ldr	r0, [pc, #64]	; (800073c <reception_state+0x88>)
 80006fa:	f002 fa3b 	bl	8002b74 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <reception_state+0x8c>)
 8000700:	f002 fa38 	bl	8002b74 <HAL_TIM_Base_Start_IT>

		if(byteCounter == 6){
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <reception_state+0x80>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b06      	cmp	r3, #6
 800070a:	d103      	bne.n	8000714 <reception_state+0x60>
			byteCounter = 0;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <reception_state+0x80>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
		}
		else{
			byteCounter++;
		}
	}
}
 8000712:	e005      	b.n	8000720 <reception_state+0x6c>
			byteCounter++;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <reception_state+0x80>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	3301      	adds	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <reception_state+0x80>)
 800071e:	701a      	strb	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08004e98 	.word	0x08004e98
 800072c:	20000354 	.word	0x20000354
 8000730:	200002ac 	.word	0x200002ac
 8000734:	200002ae 	.word	0x200002ae
 8000738:	200002a4 	.word	0x200002a4
 800073c:	20000308 	.word	0x20000308
 8000740:	200002bc 	.word	0x200002bc

08000744 <control_and_wait_state>:

void control_and_wait_state(void *arg)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	printf(" Entered control_and_wait_state\r\n");
 800074c:	4820      	ldr	r0, [pc, #128]	; (80007d0 <control_and_wait_state+0x8c>)
 800074e:	f003 fc45 	bl	8003fdc <puts>
	uint16_t recCRC = 0x0000;
 8000752:	2300      	movs	r3, #0
 8000754:	817b      	strh	r3, [r7, #10]

	recCRC = message[4];
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <control_and_wait_state+0x90>)
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	817b      	strh	r3, [r7, #10]
	recCRC = (recCRC << 8);
 800075c:	897b      	ldrh	r3, [r7, #10]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	817b      	strh	r3, [r7, #10]

	crcRegister = CRC16(message, (6*sizeof(uint8_t)));
 8000762:	2106      	movs	r1, #6
 8000764:	481b      	ldr	r0, [pc, #108]	; (80007d4 <control_and_wait_state+0x90>)
 8000766:	f000 faf7 	bl	8000d58 <CRC16>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <control_and_wait_state+0x94>)
 8000770:	801a      	strh	r2, [r3, #0]

	//crcRegister = fliperoo(crcRegister);
	printf("data = ");
 8000772:	481a      	ldr	r0, [pc, #104]	; (80007dc <control_and_wait_state+0x98>)
 8000774:	f003 fbac 	bl	8003ed0 <iprintf>
	for(int i = 0; i < 6;i++){
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00a      	b.n	8000794 <control_and_wait_state+0x50>
		printf(" %x ", message[i]);
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <control_and_wait_state+0x90>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4815      	ldr	r0, [pc, #84]	; (80007e0 <control_and_wait_state+0x9c>)
 800078a:	f003 fba1 	bl	8003ed0 <iprintf>
	for(int i = 0; i < 6;i++){
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	2b05      	cmp	r3, #5
 8000798:	ddf1      	ble.n	800077e <control_and_wait_state+0x3a>
	}
	printf("\n\r");
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <control_and_wait_state+0xa0>)
 800079c:	f003 fb98 	bl	8003ed0 <iprintf>
	printf("message CRC %x %x \n\r", message[4], message[5]);
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <control_and_wait_state+0x90>)
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <control_and_wait_state+0x90>)
 80007a8:	795b      	ldrb	r3, [r3, #5]
 80007aa:	461a      	mov	r2, r3
 80007ac:	480e      	ldr	r0, [pc, #56]	; (80007e8 <control_and_wait_state+0xa4>)
 80007ae:	f003 fb8f 	bl	8003ed0 <iprintf>
	printf("CRC = %x \n\r", crcRegister);
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <control_and_wait_state+0x94>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <control_and_wait_state+0xa8>)
 80007ba:	f003 fb89 	bl	8003ed0 <iprintf>

	HAL_Delay(5000);
 80007be:	f241 3088 	movw	r0, #5000	; 0x1388
 80007c2:	f000 fdc7 	bl	8001354 <HAL_Delay>
	//fsm_current_state = EMISSION_STATE;
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08004eb4 	.word	0x08004eb4
 80007d4:	200002a4 	.word	0x200002a4
 80007d8:	200002aa 	.word	0x200002aa
 80007dc:	08004ed8 	.word	0x08004ed8
 80007e0:	08004ee0 	.word	0x08004ee0
 80007e4:	08004ee8 	.word	0x08004ee8
 80007e8:	08004eec 	.word	0x08004eec
 80007ec:	08004f04 	.word	0x08004f04

080007f0 <emission_state>:

void emission_state(void *arg)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	printf(" Entered emission_state\r\n");
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <emission_state+0x1c>)
 80007fa:	f003 fbef 	bl	8003fdc <puts>
	fsm_current_state = EXIT;
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <emission_state+0x20>)
 8000800:	2205      	movs	r2, #5
 8000802:	701a      	strb	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08004f10 	.word	0x08004f10
 8000810:	200002ad 	.word	0x200002ad

08000814 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000818:	f000 fd6f 	bl	80012fa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800081c:	f000 f828 	bl	8000870 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000820:	f000 f9d2 	bl	8000bc8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000824:	f000 f9a0 	bl	8000b68 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000828:	f000 f8b2 	bl	8000990 <MX_TIM2_Init>
	MX_TIM3_Init();
 800082c:	f000 f8fe 	bl	8000a2c <MX_TIM3_Init>
	MX_TIM4_Init();
 8000830:	f000 f94a 	bl	8000ac8 <MX_TIM4_Init>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//HAL_UART_Transmit(&huart1, "BAM\r\n", strlen("BAM\r\n"), HAL_MAX_DELAY);

		while(fsm_current_state !=  EXIT){
 8000834:	e007      	b.n	8000846 <main+0x32>
			call_handler[fsm_current_state](NULL);
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <main+0x50>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <main+0x54>)
 800083e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000842:	2000      	movs	r0, #0
 8000844:	4798      	blx	r3
		while(fsm_current_state !=  EXIT){
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <main+0x50>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b05      	cmp	r3, #5
 800084c:	d1f3      	bne.n	8000836 <main+0x22>
		}


		printf("\n*** Oops de FSM is gestopt ***\n");
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <main+0x58>)
 8000850:	f003 fbc4 	bl	8003fdc <puts>
		HAL_Delay(1000);
 8000854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000858:	f000 fd7c 	bl	8001354 <HAL_Delay>
		return 0;
 800085c:	2300      	movs	r3, #0



	}
	/* USER CODE END 3 */
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200002ad 	.word	0x200002ad
 8000868:	20000000 	.word	0x20000000
 800086c:	08004f2c 	.word	0x08004f2c

08000870 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0b4      	sub	sp, #208	; 0xd0
 8000874:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fb1e 	bl	8003ec0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2284      	movs	r2, #132	; 0x84
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fb0f 	bl	8003ec0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <SystemClock_Config+0x118>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a38      	ldr	r2, [pc, #224]	; (8000988 <SystemClock_Config+0x118>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <SystemClock_Config+0x118>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ba:	4b34      	ldr	r3, [pc, #208]	; (800098c <SystemClock_Config+0x11c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <SystemClock_Config+0x11c>)
 80008c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <SystemClock_Config+0x11c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008de:	2310      	movs	r3, #16
 80008e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 200;
 80008f6:	23c8      	movs	r3, #200	; 0xc8
 80008f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f83d 	bl	800198c <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xac>
	{
		Error_Handler();
 8000918:	f000 fa98 	bl	8000e4c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800091c:	f000 ffe6 	bl	80018ec <HAL_PWREx_EnableOverDrive>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xba>
	{
		Error_Handler();
 8000926:	f000 fa91 	bl	8000e4c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800094c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000950:	2106      	movs	r1, #6
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fabe 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 800095e:	f000 fa75 	bl	8000e4c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000966:	2300      	movs	r3, #0
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fcb8 	bl	80022e4 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x10e>
	{
		Error_Handler();
 800097a:	f000 fa67 	bl	8000e4c <Error_Handler>
	}
}
 800097e:	bf00      	nop
 8000980:	37d0      	adds	r7, #208	; 0xd0
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10000;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80009bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80009ca:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009da:	f002 f873 	bl	8002ac4 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 80009e4:	f000 fa32 	bl	8000e4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009f6:	f002 fa83 	bl	8002f00 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8000a00:	f000 fa24 	bl	8000e4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_TIM2_Init+0x98>)
 8000a12:	f002 fca1 	bl	8003358 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000a1c:	f000 fa16 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200003d8 	.word	0x200003d8

08000a2c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <MX_TIM3_Init+0x98>)
 8000a4e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1000;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a56:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 150;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a60:	2296      	movs	r2, #150	; 0x96
 8000a62:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a72:	f002 f827 	bl	8002ac4 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000a7c:	f000 f9e6 	bl	8000e4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000a8e:	f002 fa37 	bl	8002f00 <HAL_TIM_ConfigClockSource>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000a98:	f000 f9d8 	bl	8000e4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_TIM3_Init+0x94>)
 8000aaa:	f002 fc55 	bl	8003358 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000ab4:	f000 f9ca 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000308 	.word	0x20000308
 8000ac4:	40000400 	.word	0x40000400

08000ac8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <MX_TIM4_Init+0x9c>)
 8000aea:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1000;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000af6:	2210      	movs	r2, #16
 8000af8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 350;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000afc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000b00:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000b10:	f001 ffd8 	bl	8002ac4 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM4_Init+0x56>
	{
		Error_Handler();
 8000b1a:	f000 f997 	bl	8000e4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000b2c:	f002 f9e8 	bl	8002f00 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0x72>
	{
		Error_Handler();
 8000b36:	f000 f989 	bl	8000e4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_TIM4_Init+0x98>)
 8000b48:	f002 fc06 	bl	8003358 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM4_Init+0x8e>
	{
		Error_Handler();
 8000b52:	f000 f97b 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002bc 	.word	0x200002bc
 8000b64:	40000800 	.word	0x40000800

08000b68 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_USART1_UART_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART1_UART_Init+0x58>)
 8000bac:	f002 fc80 	bl	80034b0 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000bb6:	f000 f949 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000354 	.word	0x20000354
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a58      	ldr	r2, [pc, #352]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a52      	ldr	r2, [pc, #328]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b50      	ldr	r3, [pc, #320]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000c0e:	4b4d      	ldr	r3, [pc, #308]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a4c      	ldr	r2, [pc, #304]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c26:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a46      	ldr	r2, [pc, #280]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x17c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, I2C_SCL_Pin|I2C_SDA_Pin|SPI_MOSI_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000c44:	4840      	ldr	r0, [pc, #256]	; (8000d48 <MX_GPIO_Init+0x180>)
 8000c46:	f000 fe37 	bl	80018b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_SCK_GPIO_Port, SPI_SCK_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	483f      	ldr	r0, [pc, #252]	; (8000d4c <MX_GPIO_Init+0x184>)
 8000c50:	f000 fe32 	bl	80018b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	483d      	ldr	r0, [pc, #244]	; (8000d50 <MX_GPIO_Init+0x188>)
 8000c5c:	f000 fe2c 	bl	80018b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : I2C_SCL_Pin I2C_SDA_Pin */
	GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c66:	2311      	movs	r3, #17
 8000c68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4833      	ldr	r0, [pc, #204]	; (8000d48 <MX_GPIO_Init+0x180>)
 8000c7a:	f000 fc71 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pins : INT_RTC_Pin SPI_MISO_Pin */
	GPIO_InitStruct.Pin = INT_RTC_Pin|SPI_MISO_Pin;
 8000c7e:	f244 0310 	movw	r3, #16400	; 0x4010
 8000c82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	482d      	ldr	r0, [pc, #180]	; (8000d48 <MX_GPIO_Init+0x180>)
 8000c94:	f000 fc64 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_TEMP_Pin */
	GPIO_InitStruct.Pin = INT_TEMP_Pin;
 8000c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <MX_GPIO_Init+0x188>)
 8000cae:	f000 fc57 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_SCK_Pin */
	GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <MX_GPIO_Init+0x184>)
 8000cca:	f000 fc49 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_MMA1_Pin */
	GPIO_InitStruct.Pin = INT_MMA1_Pin;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_MMA1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481a      	ldr	r0, [pc, #104]	; (8000d4c <MX_GPIO_Init+0x184>)
 8000ce2:	f000 fc3d 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4814      	ldr	r0, [pc, #80]	; (8000d50 <MX_GPIO_Init+0x188>)
 8000d00:	f000 fc2e 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : INT_MMA2_Pin */
	GPIO_InitStruct.Pin = INT_MMA2_Pin;
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT_MMA2_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <MX_GPIO_Init+0x18c>)
 8000d18:	f000 fc22 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8000d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_GPIO_Init+0x180>)
 8000d36:	f000 fc13 	bl	8001560 <HAL_GPIO_Init>

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40021800 	.word	0x40021800

08000d58 <CRC16>:
		0x40
};


unsigned short CRC16 (unsigned char * puchMsg, uint8_t usDataLen) /* The function returns the CRC as a unsigned short type */
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
	char uchCRCHi = 0xFF; /* high byte of CRC initialized */
 8000d64:	23ff      	movs	r3, #255	; 0xff
 8000d66:	73fb      	strb	r3, [r7, #15]
	char uchCRCLo = 0xFF; /* low byte of CRC initialized */
 8000d68:	23ff      	movs	r3, #255	; 0xff
 8000d6a:	73bb      	strb	r3, [r7, #14]
	uint8_t uIndex; /* will index into CRC lookup table */

	while (usDataLen--) /* pass through message buffer */
 8000d6c:	e010      	b.n	8000d90 <CRC16+0x38>
	{
		uIndex = uchCRCLo ^ *puchMsg++; /* calculate the CRC */
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	4053      	eors	r3, r2
 8000d7a:	737b      	strb	r3, [r7, #13]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <CRC16+0x60>)
 8000d80:	5cd2      	ldrb	r2, [r2, r3]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	4053      	eors	r3, r2
 8000d86:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex];
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <CRC16+0x64>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	70fa      	strb	r2, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1e9      	bne.n	8000d6e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b29b      	uxth	r3, r3
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000018 	.word	0x20000018
 8000dbc:	20000118 	.word	0x20000118

08000dc0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d101      	bne.n	8000dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000dd2:	f000 fa9f 	bl	8001314 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dde:	d102      	bne.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0x26>
		//printf("after 500ms CRC = %x\r\n", crcRegister);
		HAL_TIM_Base_Stop_IT(&htim2);
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000de2:	f001 ff3f 	bl	8002c64 <HAL_TIM_Base_Stop_IT>
	}
	if (htim->Instance == TIM3) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d108      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x42>
		fsm_current_state = CONTROL_AND_WAIT_STATE;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000df2:	2204      	movs	r2, #4
 8000df4:	701a      	strb	r2, [r3, #0]
		printf("\r\n 1.5 \r\n");
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000df8:	f003 f8f0 	bl	8003fdc <puts>
		HAL_TIM_Base_Stop_IT(&htim3);
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000dfe:	f001 ff31 	bl	8002c64 <HAL_TIM_Base_Stop_IT>
	}
	if (htim->Instance == TIM5) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d108      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x5e>
		fsm_current_state = IDLE_STATE;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
		printf("\r\n 3.5 \r\n");
 8000e12:	480c      	ldr	r0, [pc, #48]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e14:	f003 f8e2 	bl	8003fdc <puts>
		HAL_TIM_Base_Stop_IT(&htim4);
 8000e18:	480b      	ldr	r0, [pc, #44]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e1a:	f001 ff23 	bl	8002c64 <HAL_TIM_Base_Stop_IT>
	}


	/* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	200003d8 	.word	0x200003d8
 8000e30:	40000400 	.word	0x40000400
 8000e34:	200002ad 	.word	0x200002ad
 8000e38:	08004f4c 	.word	0x08004f4c
 8000e3c:	20000308 	.word	0x20000308
 8000e40:	40000c00 	.word	0x40000c00
 8000e44:	08004f58 	.word	0x08004f58
 8000e48:	200002bc 	.word	0x200002bc

08000e4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x44>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x44>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x44>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x44>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x44>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x44>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d114      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a25      	ldr	r2, [pc, #148]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 fb1c 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed4:	201c      	movs	r0, #28
 8000ed6:	f000 fb35 	bl	8001544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eda:	e032      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <HAL_TIM_Base_MspInit+0xb0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d114      	bne.n	8000f10 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	201d      	movs	r0, #29
 8000f04:	f000 fb02 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f08:	201d      	movs	r0, #29
 8000f0a:	f000 fb1b 	bl	8001544 <HAL_NVIC_EnableIRQ>
}
 8000f0e:	e018      	b.n	8000f42 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_TIM_Base_MspInit+0xb4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d113      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_TIM_Base_MspInit+0xac>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201e      	movs	r0, #30
 8000f38:	f000 fae8 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f3c:	201e      	movs	r0, #30
 8000f3e:	f000 fb01 	bl	8001544 <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40000800 	.word	0x40000800

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a25      	ldr	r2, [pc, #148]	; (800100c <HAL_UART_MspInit+0xb4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d144      	bne.n	8001004 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_UART_MspInit+0xb8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <HAL_UART_MspInit+0xbc>)
 8000fde:	f000 fabf 	bl	8001560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <HAL_UART_MspInit+0xc0>)
 8001000:	f000 faae 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40011000 	.word	0x40011000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2019      	movs	r0, #25
 8001032:	f000 fa6b 	bl	800150c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001036:	2019      	movs	r0, #25
 8001038:	f000 fa84 	bl	8001544 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <HAL_InitTick+0xa0>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_InitTick+0xa0>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6453      	str	r3, [r2, #68]	; 0x44
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_InitTick+0xa0>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001054:	f107 0210 	add.w	r2, r7, #16
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f001 f90e 	bl	8002280 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001064:	f001 f8f8 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <HAL_InitTick+0xa4>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	3b01      	subs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_InitTick+0xa8>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_InitTick+0xac>)
 8001080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_InitTick+0xa8>)
 8001084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001088:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_InitTick+0xa8>)
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_InitTick+0xa8>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_InitTick+0xa8>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_InitTick+0xa8>)
 800109e:	f001 fd11 	bl	8002ac4 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d104      	bne.n	80010b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <HAL_InitTick+0xa8>)
 80010aa:	f001 fd63 	bl	8002b74 <HAL_TIM_Base_Start_IT>
 80010ae:	4603      	mov	r3, r0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	20000424 	.word	0x20000424
 80010c8:	40010000 	.word	0x40010000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800112a:	f001 fdca 	bl	8002cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000424 	.word	0x20000424

08001138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM2_IRQHandler+0x10>)
 800113e:	f001 fdc0 	bl	8002cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200003d8 	.word	0x200003d8

0800114c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <TIM3_IRQHandler+0x10>)
 8001152:	f001 fdb6 	bl	8002cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000308 	.word	0x20000308

08001160 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM4_IRQHandler+0x10>)
 8001166:	f001 fdac 	bl	8002cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002bc 	.word	0x200002bc

08001174 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e00a      	b.n	800119c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001186:	f3af 8000 	nop.w
 800118a:	4601      	mov	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <_read+0x12>
	}

return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	return -1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d6:	605a      	str	r2, [r3, #4]
	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_isatty>:

int _isatty(int file)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	return 1;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <_sbrk+0x5c>)
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <_sbrk+0x60>)
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <_sbrk+0x64>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <_sbrk+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d207      	bcs.n	8001258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001248:	f002 fe10 	bl	8003e6c <__errno>
 800124c:	4603      	mov	r3, r0
 800124e:	220c      	movs	r2, #12
 8001250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	e009      	b.n	800126c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <_sbrk+0x64>)
 8001268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20050000 	.word	0x20050000
 8001278:	00000400 	.word	0x00000400
 800127c:	200002b0 	.word	0x200002b0
 8001280:	20000488 	.word	0x20000488

08001284 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <SystemInit+0x20>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <SystemInit+0x20>)
 8001290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ae:	490e      	ldr	r1, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c4:	4c0b      	ldr	r4, [pc, #44]	; (80012f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d2:	f7ff ffd7 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f002 fdcf 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fa9b 	bl	8000814 <main>
  bx  lr    
 80012de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 80012ec:	08005024 	.word	0x08005024
  ldr r2, =_sbss
 80012f0:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80012f4:	20000484 	.word	0x20000484

080012f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC_IRQHandler>

080012fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
 8001300:	f000 f8f9 	bl	80014f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001304:	200f      	movs	r0, #15
 8001306:	f7ff fe89 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fda5 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000220 	.word	0x20000220
 8001338:	20000470 	.word	0x20000470

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000470 	.word	0x20000470

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff ffee 	bl	800133c <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_Delay+0x44>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffde 	bl	800133c <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000220 	.word	0x20000220

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff4c 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151e:	f7ff ff61 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001522:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	6978      	ldr	r0, [r7, #20]
 800152a:	f7ff ffb1 	bl	8001490 <NVIC_EncodePriority>
 800152e:	4602      	mov	r2, r0
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff80 	bl	800143c <__NVIC_SetPriority>
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff54 	bl	8001400 <__NVIC_EnableIRQ>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e175      	b.n	800186c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8164 	bne.w	8001866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x56>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80be 	beq.w	8001866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_GPIO_Init+0x324>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001702:	4a61      	ldr	r2, [pc, #388]	; (8001888 <HAL_GPIO_Init+0x328>)
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	220f      	movs	r2, #15
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_GPIO_Init+0x32c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d037      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_GPIO_Init+0x330>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_GPIO_Init+0x334>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a55      	ldr	r2, [pc, #340]	; (8001898 <HAL_GPIO_Init+0x338>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x33c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a53      	ldr	r2, [pc, #332]	; (80018a0 <HAL_GPIO_Init+0x340>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x22a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x344>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x226>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <HAL_GPIO_Init+0x348>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x222>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a50      	ldr	r2, [pc, #320]	; (80018ac <HAL_GPIO_Init+0x34c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x21e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	; (80018b0 <HAL_GPIO_Init+0x350>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x21a>
 8001776:	2309      	movs	r3, #9
 8001778:	e012      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800177a:	230a      	movs	r3, #10
 800177c:	e010      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800177e:	2308      	movs	r3, #8
 8001780:	e00e      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001782:	2307      	movs	r3, #7
 8001784:	e00c      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x240>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017b0:	4935      	ldr	r1, [pc, #212]	; (8001888 <HAL_GPIO_Init+0x328>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_GPIO_Init+0x354>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a29      	ldr	r2, [pc, #164]	; (80018b4 <HAL_GPIO_Init+0x354>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_GPIO_Init+0x354>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x354>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f ae86 	bls.w	8001580 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	; 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40021c00 	.word	0x40021c00
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40022400 	.word	0x40022400
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_PWREx_EnableOverDrive+0x98>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a22      	ldr	r2, [pc, #136]	; (8001984 <HAL_PWREx_EnableOverDrive+0x98>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_PWREx_EnableOverDrive+0x98>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191a:	f7ff fd0f 	bl	800133c <HAL_GetTick>
 800191e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001920:	e009      	b.n	8001936 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001922:	f7ff fd0b 	bl	800133c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001930:	d901      	bls.n	8001936 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e022      	b.n	800197c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d1ee      	bne.n	8001922 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001950:	f7ff fcf4 	bl	800133c <HAL_GetTick>
 8001954:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001956:	e009      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001958:	f7ff fcf0 	bl	800133c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001966:	d901      	bls.n	800196c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e007      	b.n	800197c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_PWREx_EnableOverDrive+0x9c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001978:	d1ee      	bne.n	8001958 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000

0800198c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e291      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8087 	beq.w	8001abe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b0:	4b96      	ldr	r3, [pc, #600]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d00c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019bc:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d112      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
 80019c8:	4b90      	ldr	r3, [pc, #576]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d4:	d10b      	bne.n	80019ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d6:	4b8d      	ldr	r3, [pc, #564]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d06c      	beq.n	8001abc <HAL_RCC_OscConfig+0x130>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d168      	bne.n	8001abc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e26b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x7a>
 80019f8:	4b84      	ldr	r3, [pc, #528]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a83      	ldr	r2, [pc, #524]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e02e      	b.n	8001a64 <HAL_RCC_OscConfig+0xd8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x9c>
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7b      	ldr	r2, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e01d      	b.n	8001a64 <HAL_RCC_OscConfig+0xd8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a72      	ldr	r2, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0xd8>
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6b      	ldr	r2, [pc, #428]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fc66 	bl	800133c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fc62 	bl	800133c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e21f      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e014      	b.n	8001abe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc52 	bl	800133c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fc4e 	bl	800133c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	; 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e20b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	4b57      	ldr	r3, [pc, #348]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x110>
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d069      	beq.n	8001b9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aca:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b4d      	ldr	r3, [pc, #308]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d11c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x190>
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d116      	bne.n	8001b1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x17a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e1df      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	493d      	ldr	r1, [pc, #244]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e040      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d023      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fc04 	bl	800133c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc00 	bl	800133c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1bd      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4929      	ldr	r1, [pc, #164]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
 8001b6a:	e018      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6c:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fbe0 	bl	800133c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fbdc 	bl	800133c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e199      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d038      	beq.n	8001c1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d019      	beq.n	8001be6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fbbd 	bl	800133c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fbb9 	bl	800133c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e176      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x23a>
 8001be4:	e01a      	b.n	8001c1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <HAL_RCC_OscConfig+0x280>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fba3 	bl	800133c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fb9f 	bl	800133c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d903      	bls.n	8001c10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e15c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
 8001c0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b91      	ldr	r3, [pc, #580]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ee      	bne.n	8001bfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a4 	beq.w	8001d72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a87      	ldr	r2, [pc, #540]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b85      	ldr	r3, [pc, #532]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c5e:	4b7f      	ldr	r3, [pc, #508]	; (8001e5c <HAL_RCC_OscConfig+0x4d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7e      	ldr	r2, [pc, #504]	; (8001e5c <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fb67 	bl	800133c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7ff fb63 	bl	800133c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	; 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e120      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x4d0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x31a>
 8001c98:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	e02d      	b.n	8001d02 <HAL_RCC_OscConfig+0x376>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x33c>
 8001cae:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a69      	ldr	r2, [pc, #420]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	e01c      	b.n	8001d02 <HAL_RCC_OscConfig+0x376>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x35e>
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	4a60      	ldr	r2, [pc, #384]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6713      	str	r3, [r2, #112]	; 0x70
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a5d      	ldr	r2, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCC_OscConfig+0x376>
 8001cea:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fb17 	bl	800133c <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fb13 	bl	800133c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ce      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ee      	beq.n	8001d12 <HAL_RCC_OscConfig+0x386>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb01 	bl	800133c <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7ff fafd 	bl	800133c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ee      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d105      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a4 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d06b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d149      	bne.n	8001e24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d90:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff face 	bl	800133c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff faca 	bl	800133c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e087      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4313      	orrs	r3, r2
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001dea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa9e 	bl	800133c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff fa9a 	bl	800133c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e057      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x478>
 8001e22:	e04f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa84 	bl	800133c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa80 	bl	800133c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e03d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4ac>
 8001e56:	e035      	b.n	8001ec4 <HAL_RCC_OscConfig+0x538>
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x544>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d028      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d121      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d11a      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d111      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d0      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d910      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 020f 	bic.w	r2, r3, #15
 8001f02:	4965      	ldr	r1, [pc, #404]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b63      	ldr	r3, [pc, #396]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b8      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a58      	ldr	r2, [pc, #352]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a52      	ldr	r2, [pc, #328]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	494d      	ldr	r1, [pc, #308]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d040      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d115      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07f      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e073      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06b      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4936      	ldr	r1, [pc, #216]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f9b8 	bl	800133c <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7ff f9b4 	bl	800133c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e053      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d210      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 020f 	bic.w	r2, r3, #15
 800200e:	4922      	ldr	r1, [pc, #136]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e032      	b.n	800208e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4916      	ldr	r1, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	490e      	ldr	r1, [pc, #56]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002066:	f000 f821 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800206a:	4602      	mov	r2, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	490a      	ldr	r1, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe ffc8 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023c00 	.word	0x40023c00
 800209c:	40023800 	.word	0x40023800
 80020a0:	08004f64 	.word	0x08004f64
 80020a4:	20000218 	.word	0x20000218
 80020a8:	2000021c 	.word	0x2000021c

080020ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020b2:	2100      	movs	r1, #0
 80020b4:	6079      	str	r1, [r7, #4]
 80020b6:	2100      	movs	r1, #0
 80020b8:	60f9      	str	r1, [r7, #12]
 80020ba:	2100      	movs	r1, #0
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020be:	2100      	movs	r1, #0
 80020c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c2:	4952      	ldr	r1, [pc, #328]	; (800220c <HAL_RCC_GetSysClockFreq+0x160>)
 80020c4:	6889      	ldr	r1, [r1, #8]
 80020c6:	f001 010c 	and.w	r1, r1, #12
 80020ca:	2908      	cmp	r1, #8
 80020cc:	d00d      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x3e>
 80020ce:	2908      	cmp	r1, #8
 80020d0:	f200 8094 	bhi.w	80021fc <HAL_RCC_GetSysClockFreq+0x150>
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d002      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x32>
 80020d8:	2904      	cmp	r1, #4
 80020da:	d003      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x38>
 80020dc:	e08e      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <HAL_RCC_GetSysClockFreq+0x164>)
 80020e0:	60bb      	str	r3, [r7, #8]
      break;
 80020e2:	e08e      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_GetSysClockFreq+0x168>)
 80020e6:	60bb      	str	r3, [r7, #8]
      break;
 80020e8:	e08b      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ea:	4948      	ldr	r1, [pc, #288]	; (800220c <HAL_RCC_GetSysClockFreq+0x160>)
 80020ec:	6849      	ldr	r1, [r1, #4]
 80020ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80020f2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020f4:	4945      	ldr	r1, [pc, #276]	; (800220c <HAL_RCC_GetSysClockFreq+0x160>)
 80020f6:	6849      	ldr	r1, [r1, #4]
 80020f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80020fc:	2900      	cmp	r1, #0
 80020fe:	d024      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002100:	4942      	ldr	r1, [pc, #264]	; (800220c <HAL_RCC_GetSysClockFreq+0x160>)
 8002102:	6849      	ldr	r1, [r1, #4]
 8002104:	0989      	lsrs	r1, r1, #6
 8002106:	4608      	mov	r0, r1
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002110:	f04f 0500 	mov.w	r5, #0
 8002114:	ea00 0204 	and.w	r2, r0, r4
 8002118:	ea01 0305 	and.w	r3, r1, r5
 800211c:	493d      	ldr	r1, [pc, #244]	; (8002214 <HAL_RCC_GetSysClockFreq+0x168>)
 800211e:	fb01 f003 	mul.w	r0, r1, r3
 8002122:	2100      	movs	r1, #0
 8002124:	fb01 f102 	mul.w	r1, r1, r2
 8002128:	1844      	adds	r4, r0, r1
 800212a:	493a      	ldr	r1, [pc, #232]	; (8002214 <HAL_RCC_GetSysClockFreq+0x168>)
 800212c:	fba2 0101 	umull	r0, r1, r2, r1
 8002130:	1863      	adds	r3, r4, r1
 8002132:	4619      	mov	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	f7fe f8b8 	bl	80002b0 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4613      	mov	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e04a      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCC_GetSysClockFreq+0x160>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	461a      	mov	r2, r3
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800215a:	f04f 0100 	mov.w	r1, #0
 800215e:	ea02 0400 	and.w	r4, r2, r0
 8002162:	ea03 0501 	and.w	r5, r3, r1
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	014b      	lsls	r3, r1, #5
 8002174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002178:	0142      	lsls	r2, r0, #5
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	1b00      	subs	r0, r0, r4
 8002180:	eb61 0105 	sbc.w	r1, r1, r5
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	018b      	lsls	r3, r1, #6
 800218e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002192:	0182      	lsls	r2, r0, #6
 8002194:	1a12      	subs	r2, r2, r0
 8002196:	eb63 0301 	sbc.w	r3, r3, r1
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	00d9      	lsls	r1, r3, #3
 80021a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a8:	00d0      	lsls	r0, r2, #3
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	1912      	adds	r2, r2, r4
 80021b0:	eb45 0303 	adc.w	r3, r5, r3
 80021b4:	f04f 0000 	mov.w	r0, #0
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	0299      	lsls	r1, r3, #10
 80021be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021c2:	0290      	lsls	r0, r2, #10
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	f7fe f86c 	bl	80002b0 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_GetSysClockFreq+0x160>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	60bb      	str	r3, [r7, #8]
      break;
 80021fa:	e002      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCC_GetSysClockFreq+0x164>)
 80021fe:	60bb      	str	r3, [r7, #8]
      break;
 8002200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002202:	68bb      	ldr	r3, [r7, #8]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bdb0      	pop	{r4, r5, r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	00f42400 	.word	0x00f42400
 8002214:	017d7840 	.word	0x017d7840

08002218 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000218 	.word	0x20000218

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	08004f74 	.word	0x08004f74

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffdc 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08004f74 	.word	0x08004f74

08002280 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	220f      	movs	r2, #15
 800228e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_RCC_GetClockConfig+0x5c>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCC_GetClockConfig+0x5c>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCC_GetClockConfig+0x5c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_GetClockConfig+0x5c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	08db      	lsrs	r3, r3, #3
 80022ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCC_GetClockConfig+0x60>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 020f 	and.w	r2, r3, #15
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	601a      	str	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a68      	ldr	r2, [pc, #416]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002316:	6093      	str	r3, [r2, #8]
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	4964      	ldr	r1, [pc, #400]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800232e:	2301      	movs	r3, #1
 8002330:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d017      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800233e:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	4959      	ldr	r1, [pc, #356]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800235c:	d101      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d017      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800237a:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002380:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	494a      	ldr	r1, [pc, #296]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 808b 	beq.w	80024de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6413      	str	r3, [r2, #64]	; 0x40
 80023d4:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe ffa6 	bl	800133c <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f4:	f7fe ffa2 	bl	800133c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e357      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d035      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d02e      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002450:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d114      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe ff6a 	bl	800133c <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	e00a      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe ff66 	bl	800133c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e319      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ee      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800249a:	d111      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	4901      	ldr	r1, [pc, #4]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
 80024b2:	e00b      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40007000 	.word	0x40007000
 80024bc:	0ffffcff 	.word	0x0ffffcff
 80024c0:	4bb1      	ldr	r3, [pc, #708]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4ab0      	ldr	r2, [pc, #704]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024ca:	6093      	str	r3, [r2, #8]
 80024cc:	4bae      	ldr	r3, [pc, #696]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	49ab      	ldr	r1, [pc, #684]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d010      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ea:	4ba7      	ldr	r3, [pc, #668]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f0:	4aa5      	ldr	r2, [pc, #660]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024fa:	4ba3      	ldr	r3, [pc, #652]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	49a0      	ldr	r1, [pc, #640]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002518:	4b9b      	ldr	r3, [pc, #620]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002526:	4998      	ldr	r1, [pc, #608]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800253a:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002548:	498f      	ldr	r1, [pc, #572]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800255c:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256a:	4987      	ldr	r1, [pc, #540]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800257e:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	497e      	ldr	r1, [pc, #504]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a0:	4b79      	ldr	r3, [pc, #484]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4976      	ldr	r1, [pc, #472]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f023 020c 	bic.w	r2, r3, #12
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d0:	496d      	ldr	r1, [pc, #436]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	4965      	ldr	r1, [pc, #404]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002614:	495c      	ldr	r1, [pc, #368]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002628:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	4954      	ldr	r1, [pc, #336]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800264a:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002650:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	494b      	ldr	r1, [pc, #300]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	4943      	ldr	r1, [pc, #268]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	493a      	ldr	r1, [pc, #232]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026b0:	4b35      	ldr	r3, [pc, #212]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026be:	4932      	ldr	r1, [pc, #200]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d011      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e0:	4929      	ldr	r1, [pc, #164]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f0:	d101      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002720:	4919      	ldr	r1, [pc, #100]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002744:	4910      	ldr	r1, [pc, #64]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d006      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80d9 	beq.w	8002912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fde6 	bl	800133c <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002772:	e00b      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002774:	f7fe fde2 	bl	800133c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d904      	bls.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e197      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800278c:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ed      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11d      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027ac:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c0:	0e1b      	lsrs	r3, r3, #24
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	019a      	lsls	r2, r3, #6
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	071b      	lsls	r3, r3, #28
 80027e0:	4957      	ldr	r1, [pc, #348]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02e      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002812:	d129      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002814:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002828:	0f1b      	lsrs	r3, r3, #28
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	019a      	lsls	r2, r3, #6
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	431a      	orrs	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	071b      	lsls	r3, r3, #28
 8002848:	493d      	ldr	r1, [pc, #244]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002856:	f023 021f 	bic.w	r2, r3, #31
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	3b01      	subs	r3, #1
 8002860:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01d      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800287a:	0e1b      	lsrs	r3, r3, #24
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002888:	0f1b      	lsrs	r3, r3, #28
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	019a      	lsls	r2, r3, #6
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	431a      	orrs	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	431a      	orrs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	071b      	lsls	r3, r3, #28
 80028a8:	4925      	ldr	r1, [pc, #148]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d011      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	019a      	lsls	r2, r3, #6
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	071b      	lsls	r3, r3, #28
 80028d8:	4919      	ldr	r1, [pc, #100]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fd26 	bl	800133c <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028f4:	f7fe fd22 	bl	800133c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0d7      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 80cd 	bne.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002926:	f7fe fd09 	bl	800133c <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800292e:	f7fe fd05 	bl	800133c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d903      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0ba      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002940:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002944:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800294c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002950:	d0ed      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02e      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12a      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800297a:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002988:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	0f1b      	lsrs	r3, r3, #28
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	019a      	lsls	r2, r3, #6
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	061b      	lsls	r3, r3, #24
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	071b      	lsls	r3, r3, #28
 80029ae:	4944      	ldr	r1, [pc, #272]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029b6:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	493d      	ldr	r1, [pc, #244]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d022      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e4:	d11d      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	0e1b      	lsrs	r3, r3, #24
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	0f1b      	lsrs	r3, r3, #28
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	019a      	lsls	r2, r3, #6
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	4929      	ldr	r1, [pc, #164]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d028      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	0e1b      	lsrs	r3, r3, #24
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	019a      	lsls	r2, r3, #6
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	431a      	orrs	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	071b      	lsls	r3, r3, #28
 8002a62:	4917      	ldr	r1, [pc, #92]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	4911      	ldr	r1, [pc, #68]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fc56 	bl	800133c <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a94:	f7fe fc52 	bl	800133c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e007      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab2:	d1ef      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e049      	b.n	8002b6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe f9d8 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f000 faee 	bl	80030e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e054      	b.n	8002c36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d022      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d01d      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d018      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <HAL_TIM_Base_Start_IT+0xe0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d009      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_TIM_Base_Start_IT+0xe4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_TIM_Base_Start_IT+0x80>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_TIM_Base_Start_IT+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d115      	bne.n	8002c20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_TIM_Base_Start_IT+0xec>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d015      	beq.n	8002c32 <HAL_TIM_Base_Start_IT+0xbe>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d011      	beq.n	8002c32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	e008      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e000      	b.n	8002c34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	40000c00 	.word	0x40000c00
 8002c54:	40010400 	.word	0x40010400
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40001800 	.word	0x40001800
 8002c60:	00010007 	.word	0x00010007

08002c64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_TIM_Base_Stop_IT+0x48>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	f240 4344 	movw	r3, #1092	; 0x444
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_Base_Stop_IT+0x48>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d122      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d11b      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0202 	mvn.w	r2, #2
 8002cee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9cf 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002d0a:	e005      	b.n	8002d18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f9c1 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f9d2 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d122      	bne.n	8002d72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d11b      	bne.n	8002d72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0204 	mvn.w	r2, #4
 8002d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9a5 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002d5e:	e005      	b.n	8002d6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f997 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9a8 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d122      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11b      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0208 	mvn.w	r2, #8
 8002d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f97b 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002db2:	e005      	b.n	8002dc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f96d 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f97e 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d122      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d11b      	bne.n	8002e1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f06f 0210 	mvn.w	r2, #16
 8002dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2208      	movs	r2, #8
 8002df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f951 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002e06:	e005      	b.n	8002e14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f943 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f954 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10e      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f06f 0201 	mvn.w	r2, #1
 8002e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fd ffbd 	bl	8000dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d10e      	bne.n	8002e72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d107      	bne.n	8002e72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb0b 	bl	8003488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fafe 	bl	800349c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f902 	bl	80030d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0220 	mvn.w	r2, #32
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fabe 	bl	8003474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_ConfigClockSource+0x1c>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0b4      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x186>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	4b56      	ldr	r3, [pc, #344]	; (8003090 <HAL_TIM_ConfigClockSource+0x190>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f54:	d03e      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5a:	f200 8087 	bhi.w	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	f000 8086 	beq.w	8003072 <HAL_TIM_ConfigClockSource+0x172>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	d87f      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b70      	cmp	r3, #112	; 0x70
 8002f6e:	d01a      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8002f70:	2b70      	cmp	r3, #112	; 0x70
 8002f72:	d87b      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b60      	cmp	r3, #96	; 0x60
 8002f76:	d050      	beq.n	800301a <HAL_TIM_ConfigClockSource+0x11a>
 8002f78:	2b60      	cmp	r3, #96	; 0x60
 8002f7a:	d877      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b50      	cmp	r3, #80	; 0x50
 8002f7e:	d03c      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0xfa>
 8002f80:	2b50      	cmp	r3, #80	; 0x50
 8002f82:	d873      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d058      	beq.n	800303a <HAL_TIM_ConfigClockSource+0x13a>
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d86f      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b30      	cmp	r3, #48	; 0x30
 8002f8e:	d064      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x15a>
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	d86b      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d060      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d867      	bhi.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05c      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d05a      	beq.n	800305a <HAL_TIM_ConfigClockSource+0x15a>
 8002fa4:	e062      	b.n	800306c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f000 f9af 	bl	8003318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	609a      	str	r2, [r3, #8]
      break;
 8002fd2:	e04f      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6899      	ldr	r1, [r3, #8]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f000 f998 	bl	8003318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ff6:	609a      	str	r2, [r3, #8]
      break;
 8002ff8:	e03c      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6859      	ldr	r1, [r3, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	461a      	mov	r2, r3
 8003008:	f000 f90c 	bl	8003224 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2150      	movs	r1, #80	; 0x50
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f965 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 8003018:	e02c      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	461a      	mov	r2, r3
 8003028:	f000 f92b 	bl	8003282 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2160      	movs	r1, #96	; 0x60
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f955 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 8003038:	e01c      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	461a      	mov	r2, r3
 8003048:	f000 f8ec 	bl	8003224 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2140      	movs	r1, #64	; 0x40
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f945 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 8003058:	e00c      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f000 f93c 	bl	80032e2 <TIM_ITRx_SetConfig>
      break;
 800306a:	e003      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      break;
 8003070:	e000      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	fffeff88 	.word	0xfffeff88

08003094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d00f      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <TIM_Base_SetConfig+0x118>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <TIM_Base_SetConfig+0x120>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x40>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d027      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <TIM_Base_SetConfig+0x118>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d023      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a2b      	ldr	r2, [pc, #172]	; (8003200 <TIM_Base_SetConfig+0x11c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <TIM_Base_SetConfig+0x120>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d01b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <TIM_Base_SetConfig+0x124>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d017      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_Base_SetConfig+0x128>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <TIM_Base_SetConfig+0x12c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00f      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <TIM_Base_SetConfig+0x130>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0x134>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <TIM_Base_SetConfig+0x138>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a23      	ldr	r2, [pc, #140]	; (8003220 <TIM_Base_SetConfig+0x13c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0xf8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <TIM_Base_SetConfig+0x124>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d103      	bne.n	80031e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	615a      	str	r2, [r3, #20]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40010400 	.word	0x40010400
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	40001800 	.word	0x40001800
 800321c:	40001c00 	.word	0x40001c00
 8003220:	40002000 	.word	0x40002000

08003224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 030a 	bic.w	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003282:	b480      	push	{r7}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0210 	bic.w	r2, r3, #16
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	f043 0307 	orr.w	r3, r3, #7
 8003304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	431a      	orrs	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800336c:	2302      	movs	r3, #2
 800336e:	e06d      	b.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a30      	ldr	r2, [pc, #192]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d108      	bne.n	80033b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a20      	ldr	r2, [pc, #128]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d022      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d01d      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d018      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d013      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00e      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d009      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d004      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10c      	bne.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003426:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	4313      	orrs	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40014000 	.word	0x40014000
 8003470:	40001800 	.word	0x40001800

08003474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e040      	b.n	8003544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fd40 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8c0 	bl	8003674 <UART_SetConfig>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e022      	b.n	8003544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fb16 	bl	8003b38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb9d 	bl	8003c7c <UART_CheckIdleState>
 8003542:	4603      	mov	r3, r0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003560:	2b20      	cmp	r3, #32
 8003562:	f040 8081 	bne.w	8003668 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_UART_Transmit+0x26>
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e079      	b.n	800366a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_UART_Transmit+0x38>
 8003580:	2302      	movs	r3, #2
 8003582:	e072      	b.n	800366a <HAL_UART_Transmit+0x11e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2221      	movs	r2, #33	; 0x21
 8003598:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359a:	f7fd fecf 	bl	800133c <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d108      	bne.n	80035cc <HAL_UART_Transmit+0x80>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80035dc:	e02c      	b.n	8003638 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fb7a 	bl	8003ce2 <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e038      	b.n	800366a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3302      	adds	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e007      	b.n	8003626 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1cc      	bne.n	80035de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2200      	movs	r2, #0
 800364c:	2140      	movs	r1, #64	; 0x40
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb47 	bl	8003ce2 <UART_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e005      	b.n	800366a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4ba7      	ldr	r3, [pc, #668]	; (800393c <UART_SetConfig+0x2c8>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a95      	ldr	r2, [pc, #596]	; (8003940 <UART_SetConfig+0x2cc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d120      	bne.n	8003732 <UART_SetConfig+0xbe>
 80036f0:	4b94      	ldr	r3, [pc, #592]	; (8003944 <UART_SetConfig+0x2d0>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d816      	bhi.n	800372c <UART_SetConfig+0xb8>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0x90>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003715 	.word	0x08003715
 8003708:	08003721 	.word	0x08003721
 800370c:	0800371b 	.word	0x0800371b
 8003710:	08003727 	.word	0x08003727
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e14f      	b.n	80039ba <UART_SetConfig+0x346>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e14c      	b.n	80039ba <UART_SetConfig+0x346>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e149      	b.n	80039ba <UART_SetConfig+0x346>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e146      	b.n	80039ba <UART_SetConfig+0x346>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e143      	b.n	80039ba <UART_SetConfig+0x346>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a84      	ldr	r2, [pc, #528]	; (8003948 <UART_SetConfig+0x2d4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d132      	bne.n	80037a2 <UART_SetConfig+0x12e>
 800373c:	4b81      	ldr	r3, [pc, #516]	; (8003944 <UART_SetConfig+0x2d0>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d828      	bhi.n	800379c <UART_SetConfig+0x128>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <UART_SetConfig+0xdc>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003785 	.word	0x08003785
 8003754:	0800379d 	.word	0x0800379d
 8003758:	0800379d 	.word	0x0800379d
 800375c:	0800379d 	.word	0x0800379d
 8003760:	08003791 	.word	0x08003791
 8003764:	0800379d 	.word	0x0800379d
 8003768:	0800379d 	.word	0x0800379d
 800376c:	0800379d 	.word	0x0800379d
 8003770:	0800378b 	.word	0x0800378b
 8003774:	0800379d 	.word	0x0800379d
 8003778:	0800379d 	.word	0x0800379d
 800377c:	0800379d 	.word	0x0800379d
 8003780:	08003797 	.word	0x08003797
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e117      	b.n	80039ba <UART_SetConfig+0x346>
 800378a:	2302      	movs	r3, #2
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e114      	b.n	80039ba <UART_SetConfig+0x346>
 8003790:	2304      	movs	r3, #4
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e111      	b.n	80039ba <UART_SetConfig+0x346>
 8003796:	2308      	movs	r3, #8
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e10e      	b.n	80039ba <UART_SetConfig+0x346>
 800379c:	2310      	movs	r3, #16
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e10b      	b.n	80039ba <UART_SetConfig+0x346>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a69      	ldr	r2, [pc, #420]	; (800394c <UART_SetConfig+0x2d8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d120      	bne.n	80037ee <UART_SetConfig+0x17a>
 80037ac:	4b65      	ldr	r3, [pc, #404]	; (8003944 <UART_SetConfig+0x2d0>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037b6:	2b30      	cmp	r3, #48	; 0x30
 80037b8:	d013      	beq.n	80037e2 <UART_SetConfig+0x16e>
 80037ba:	2b30      	cmp	r3, #48	; 0x30
 80037bc:	d814      	bhi.n	80037e8 <UART_SetConfig+0x174>
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d009      	beq.n	80037d6 <UART_SetConfig+0x162>
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d810      	bhi.n	80037e8 <UART_SetConfig+0x174>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <UART_SetConfig+0x15c>
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d006      	beq.n	80037dc <UART_SetConfig+0x168>
 80037ce:	e00b      	b.n	80037e8 <UART_SetConfig+0x174>
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e0f1      	b.n	80039ba <UART_SetConfig+0x346>
 80037d6:	2302      	movs	r3, #2
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e0ee      	b.n	80039ba <UART_SetConfig+0x346>
 80037dc:	2304      	movs	r3, #4
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0eb      	b.n	80039ba <UART_SetConfig+0x346>
 80037e2:	2308      	movs	r3, #8
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e0e8      	b.n	80039ba <UART_SetConfig+0x346>
 80037e8:	2310      	movs	r3, #16
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e0e5      	b.n	80039ba <UART_SetConfig+0x346>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a57      	ldr	r2, [pc, #348]	; (8003950 <UART_SetConfig+0x2dc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d120      	bne.n	800383a <UART_SetConfig+0x1c6>
 80037f8:	4b52      	ldr	r3, [pc, #328]	; (8003944 <UART_SetConfig+0x2d0>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003802:	2bc0      	cmp	r3, #192	; 0xc0
 8003804:	d013      	beq.n	800382e <UART_SetConfig+0x1ba>
 8003806:	2bc0      	cmp	r3, #192	; 0xc0
 8003808:	d814      	bhi.n	8003834 <UART_SetConfig+0x1c0>
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d009      	beq.n	8003822 <UART_SetConfig+0x1ae>
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d810      	bhi.n	8003834 <UART_SetConfig+0x1c0>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <UART_SetConfig+0x1a8>
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d006      	beq.n	8003828 <UART_SetConfig+0x1b4>
 800381a:	e00b      	b.n	8003834 <UART_SetConfig+0x1c0>
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e0cb      	b.n	80039ba <UART_SetConfig+0x346>
 8003822:	2302      	movs	r3, #2
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e0c8      	b.n	80039ba <UART_SetConfig+0x346>
 8003828:	2304      	movs	r3, #4
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0c5      	b.n	80039ba <UART_SetConfig+0x346>
 800382e:	2308      	movs	r3, #8
 8003830:	77fb      	strb	r3, [r7, #31]
 8003832:	e0c2      	b.n	80039ba <UART_SetConfig+0x346>
 8003834:	2310      	movs	r3, #16
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e0bf      	b.n	80039ba <UART_SetConfig+0x346>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a45      	ldr	r2, [pc, #276]	; (8003954 <UART_SetConfig+0x2e0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d125      	bne.n	8003890 <UART_SetConfig+0x21c>
 8003844:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <UART_SetConfig+0x2d0>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003852:	d017      	beq.n	8003884 <UART_SetConfig+0x210>
 8003854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003858:	d817      	bhi.n	800388a <UART_SetConfig+0x216>
 800385a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385e:	d00b      	beq.n	8003878 <UART_SetConfig+0x204>
 8003860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003864:	d811      	bhi.n	800388a <UART_SetConfig+0x216>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <UART_SetConfig+0x1fe>
 800386a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386e:	d006      	beq.n	800387e <UART_SetConfig+0x20a>
 8003870:	e00b      	b.n	800388a <UART_SetConfig+0x216>
 8003872:	2300      	movs	r3, #0
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e0a0      	b.n	80039ba <UART_SetConfig+0x346>
 8003878:	2302      	movs	r3, #2
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e09d      	b.n	80039ba <UART_SetConfig+0x346>
 800387e:	2304      	movs	r3, #4
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e09a      	b.n	80039ba <UART_SetConfig+0x346>
 8003884:	2308      	movs	r3, #8
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e097      	b.n	80039ba <UART_SetConfig+0x346>
 800388a:	2310      	movs	r3, #16
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e094      	b.n	80039ba <UART_SetConfig+0x346>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <UART_SetConfig+0x2e4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d125      	bne.n	80038e6 <UART_SetConfig+0x272>
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <UART_SetConfig+0x2d0>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a8:	d017      	beq.n	80038da <UART_SetConfig+0x266>
 80038aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ae:	d817      	bhi.n	80038e0 <UART_SetConfig+0x26c>
 80038b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b4:	d00b      	beq.n	80038ce <UART_SetConfig+0x25a>
 80038b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ba:	d811      	bhi.n	80038e0 <UART_SetConfig+0x26c>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <UART_SetConfig+0x254>
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c4:	d006      	beq.n	80038d4 <UART_SetConfig+0x260>
 80038c6:	e00b      	b.n	80038e0 <UART_SetConfig+0x26c>
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e075      	b.n	80039ba <UART_SetConfig+0x346>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e072      	b.n	80039ba <UART_SetConfig+0x346>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e06f      	b.n	80039ba <UART_SetConfig+0x346>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e06c      	b.n	80039ba <UART_SetConfig+0x346>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e069      	b.n	80039ba <UART_SetConfig+0x346>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <UART_SetConfig+0x2e8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d137      	bne.n	8003960 <UART_SetConfig+0x2ec>
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <UART_SetConfig+0x2d0>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038fe:	d017      	beq.n	8003930 <UART_SetConfig+0x2bc>
 8003900:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003904:	d817      	bhi.n	8003936 <UART_SetConfig+0x2c2>
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390a:	d00b      	beq.n	8003924 <UART_SetConfig+0x2b0>
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	d811      	bhi.n	8003936 <UART_SetConfig+0x2c2>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <UART_SetConfig+0x2aa>
 8003916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391a:	d006      	beq.n	800392a <UART_SetConfig+0x2b6>
 800391c:	e00b      	b.n	8003936 <UART_SetConfig+0x2c2>
 800391e:	2300      	movs	r3, #0
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e04a      	b.n	80039ba <UART_SetConfig+0x346>
 8003924:	2302      	movs	r3, #2
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e047      	b.n	80039ba <UART_SetConfig+0x346>
 800392a:	2304      	movs	r3, #4
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e044      	b.n	80039ba <UART_SetConfig+0x346>
 8003930:	2308      	movs	r3, #8
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e041      	b.n	80039ba <UART_SetConfig+0x346>
 8003936:	2310      	movs	r3, #16
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e03e      	b.n	80039ba <UART_SetConfig+0x346>
 800393c:	efff69f3 	.word	0xefff69f3
 8003940:	40011000 	.word	0x40011000
 8003944:	40023800 	.word	0x40023800
 8003948:	40004400 	.word	0x40004400
 800394c:	40004800 	.word	0x40004800
 8003950:	40004c00 	.word	0x40004c00
 8003954:	40005000 	.word	0x40005000
 8003958:	40011400 	.word	0x40011400
 800395c:	40007800 	.word	0x40007800
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a71      	ldr	r2, [pc, #452]	; (8003b2c <UART_SetConfig+0x4b8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d125      	bne.n	80039b6 <UART_SetConfig+0x342>
 800396a:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <UART_SetConfig+0x4bc>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003974:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003978:	d017      	beq.n	80039aa <UART_SetConfig+0x336>
 800397a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800397e:	d817      	bhi.n	80039b0 <UART_SetConfig+0x33c>
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003984:	d00b      	beq.n	800399e <UART_SetConfig+0x32a>
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398a:	d811      	bhi.n	80039b0 <UART_SetConfig+0x33c>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0x324>
 8003990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x330>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x33c>
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x346>
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e00a      	b.n	80039ba <UART_SetConfig+0x346>
 80039a4:	2304      	movs	r3, #4
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e007      	b.n	80039ba <UART_SetConfig+0x346>
 80039aa:	2308      	movs	r3, #8
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e004      	b.n	80039ba <UART_SetConfig+0x346>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e001      	b.n	80039ba <UART_SetConfig+0x346>
 80039b6:	2310      	movs	r3, #16
 80039b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d15a      	bne.n	8003a7a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d827      	bhi.n	8003a1a <UART_SetConfig+0x3a6>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x35c>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a1b 	.word	0x08003a1b
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a1b 	.word	0x08003a1b
 80039ec:	08003a1b 	.word	0x08003a1b
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe fc1c 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e013      	b.n	8003a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fc2c 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003a00:	61b8      	str	r0, [r7, #24]
        break;
 8003a02:	e00f      	b.n	8003a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b4b      	ldr	r3, [pc, #300]	; (8003b34 <UART_SetConfig+0x4c0>)
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e00c      	b.n	8003a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7fe fb4f 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8003a0e:	61b8      	str	r0, [r7, #24]
        break;
 8003a10:	e008      	b.n	8003a24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e004      	b.n	8003a24 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	77bb      	strb	r3, [r7, #30]
        break;
 8003a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d074      	beq.n	8003b14 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	005a      	lsls	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d916      	bls.n	8003a74 <UART_SetConfig+0x400>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d212      	bcs.n	8003a74 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f023 030f 	bic.w	r3, r3, #15
 8003a56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	89fa      	ldrh	r2, [r7, #14]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	e04f      	b.n	8003b14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	77bb      	strb	r3, [r7, #30]
 8003a78:	e04c      	b.n	8003b14 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d828      	bhi.n	8003ad2 <UART_SetConfig+0x45e>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <UART_SetConfig+0x414>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003ac3 	.word	0x08003ac3
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ad3 	.word	0x08003ad3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe fbc0 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003ab0:	61b8      	str	r0, [r7, #24]
        break;
 8003ab2:	e013      	b.n	8003adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fbd0 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	61b8      	str	r0, [r7, #24]
        break;
 8003aba:	e00f      	b.n	8003adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <UART_SetConfig+0x4c0>)
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e00c      	b.n	8003adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe faf3 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8003ac6:	61b8      	str	r0, [r7, #24]
        break;
 8003ac8:	e008      	b.n	8003adc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e004      	b.n	8003adc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8003ada:	bf00      	nop
    }

    if (pclk != 0U)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085a      	lsrs	r2, r3, #1
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	2b0f      	cmp	r3, #15
 8003afa:	d909      	bls.n	8003b10 <UART_SetConfig+0x49c>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d205      	bcs.n	8003b10 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	e001      	b.n	8003b14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40007c00 	.word	0x40007c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	00f42400 	.word	0x00f42400

08003b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d10a      	bne.n	8003c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c8c:	f7fd fb56 	bl	800133c <HAL_GetTick>
 8003c90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d10e      	bne.n	8003cbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f817 	bl	8003ce2 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e00d      	b.n	8003cda <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b09c      	sub	sp, #112	; 0x70
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	e0a5      	b.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	f000 80a1 	beq.w	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fd fb1d 	bl	800133c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d13e      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d28:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e6      	bne.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3308      	adds	r3, #8
 8003d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d66:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e067      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04f      	beq.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d147      	bne.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e6      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3308      	adds	r3, #8
 8003df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e0c:	623a      	str	r2, [r7, #32]
 8003e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	69f9      	ldr	r1, [r7, #28]
 8003e12:	6a3a      	ldr	r2, [r7, #32]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e010      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	f43f af4a 	beq.w	8003cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3770      	adds	r7, #112	; 0x70
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <__errno>:
 8003e6c:	4b01      	ldr	r3, [pc, #4]	; (8003e74 <__errno+0x8>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000224 	.word	0x20000224

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4d0d      	ldr	r5, [pc, #52]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7c:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	2600      	movs	r6, #0
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	4d0b      	ldr	r5, [pc, #44]	; (8003eb8 <__libc_init_array+0x40>)
 8003e8a:	4c0c      	ldr	r4, [pc, #48]	; (8003ebc <__libc_init_array+0x44>)
 8003e8c:	f000 ffec 	bl	8004e68 <_init>
 8003e90:	1b64      	subs	r4, r4, r5
 8003e92:	10a4      	asrs	r4, r4, #2
 8003e94:	2600      	movs	r6, #0
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	0800501c 	.word	0x0800501c
 8003eb4:	0800501c 	.word	0x0800501c
 8003eb8:	0800501c 	.word	0x0800501c
 8003ebc:	08005020 	.word	0x08005020

08003ec0 <memset>:
 8003ec0:	4402      	add	r2, r0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <iprintf>:
 8003ed0:	b40f      	push	{r0, r1, r2, r3}
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <iprintf+0x2c>)
 8003ed4:	b513      	push	{r0, r1, r4, lr}
 8003ed6:	681c      	ldr	r4, [r3, #0]
 8003ed8:	b124      	cbz	r4, 8003ee4 <iprintf+0x14>
 8003eda:	69a3      	ldr	r3, [r4, #24]
 8003edc:	b913      	cbnz	r3, 8003ee4 <iprintf+0x14>
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f000 fa5e 	bl	80043a0 <__sinit>
 8003ee4:	ab05      	add	r3, sp, #20
 8003ee6:	9a04      	ldr	r2, [sp, #16]
 8003ee8:	68a1      	ldr	r1, [r4, #8]
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	4620      	mov	r0, r4
 8003eee:	f000 fc2f 	bl	8004750 <_vfiprintf_r>
 8003ef2:	b002      	add	sp, #8
 8003ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef8:	b004      	add	sp, #16
 8003efa:	4770      	bx	lr
 8003efc:	20000224 	.word	0x20000224

08003f00 <_puts_r>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	460e      	mov	r6, r1
 8003f04:	4605      	mov	r5, r0
 8003f06:	b118      	cbz	r0, 8003f10 <_puts_r+0x10>
 8003f08:	6983      	ldr	r3, [r0, #24]
 8003f0a:	b90b      	cbnz	r3, 8003f10 <_puts_r+0x10>
 8003f0c:	f000 fa48 	bl	80043a0 <__sinit>
 8003f10:	69ab      	ldr	r3, [r5, #24]
 8003f12:	68ac      	ldr	r4, [r5, #8]
 8003f14:	b913      	cbnz	r3, 8003f1c <_puts_r+0x1c>
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 fa42 	bl	80043a0 <__sinit>
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <_puts_r+0xd0>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d120      	bne.n	8003f64 <_puts_r+0x64>
 8003f22:	686c      	ldr	r4, [r5, #4]
 8003f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f26:	07db      	lsls	r3, r3, #31
 8003f28:	d405      	bmi.n	8003f36 <_puts_r+0x36>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	0598      	lsls	r0, r3, #22
 8003f2e:	d402      	bmi.n	8003f36 <_puts_r+0x36>
 8003f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f32:	f000 fad3 	bl	80044dc <__retarget_lock_acquire_recursive>
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	0719      	lsls	r1, r3, #28
 8003f3a:	d51d      	bpl.n	8003f78 <_puts_r+0x78>
 8003f3c:	6923      	ldr	r3, [r4, #16]
 8003f3e:	b1db      	cbz	r3, 8003f78 <_puts_r+0x78>
 8003f40:	3e01      	subs	r6, #1
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	60a3      	str	r3, [r4, #8]
 8003f4c:	bb39      	cbnz	r1, 8003f9e <_puts_r+0x9e>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da38      	bge.n	8003fc4 <_puts_r+0xc4>
 8003f52:	4622      	mov	r2, r4
 8003f54:	210a      	movs	r1, #10
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 f848 	bl	8003fec <__swbuf_r>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d011      	beq.n	8003f84 <_puts_r+0x84>
 8003f60:	250a      	movs	r5, #10
 8003f62:	e011      	b.n	8003f88 <_puts_r+0x88>
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <_puts_r+0xd4>)
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d101      	bne.n	8003f6e <_puts_r+0x6e>
 8003f6a:	68ac      	ldr	r4, [r5, #8]
 8003f6c:	e7da      	b.n	8003f24 <_puts_r+0x24>
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <_puts_r+0xd8>)
 8003f70:	429c      	cmp	r4, r3
 8003f72:	bf08      	it	eq
 8003f74:	68ec      	ldreq	r4, [r5, #12]
 8003f76:	e7d5      	b.n	8003f24 <_puts_r+0x24>
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 f888 	bl	8004090 <__swsetup_r>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d0dd      	beq.n	8003f40 <_puts_r+0x40>
 8003f84:	f04f 35ff 	mov.w	r5, #4294967295
 8003f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f8a:	07da      	lsls	r2, r3, #31
 8003f8c:	d405      	bmi.n	8003f9a <_puts_r+0x9a>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	059b      	lsls	r3, r3, #22
 8003f92:	d402      	bmi.n	8003f9a <_puts_r+0x9a>
 8003f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f96:	f000 faa2 	bl	80044de <__retarget_lock_release_recursive>
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da04      	bge.n	8003fac <_puts_r+0xac>
 8003fa2:	69a2      	ldr	r2, [r4, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	dc06      	bgt.n	8003fb6 <_puts_r+0xb6>
 8003fa8:	290a      	cmp	r1, #10
 8003faa:	d004      	beq.n	8003fb6 <_puts_r+0xb6>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	7019      	strb	r1, [r3, #0]
 8003fb4:	e7c5      	b.n	8003f42 <_puts_r+0x42>
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f000 f817 	bl	8003fec <__swbuf_r>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d1bf      	bne.n	8003f42 <_puts_r+0x42>
 8003fc2:	e7df      	b.n	8003f84 <_puts_r+0x84>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	250a      	movs	r5, #10
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	6022      	str	r2, [r4, #0]
 8003fcc:	701d      	strb	r5, [r3, #0]
 8003fce:	e7db      	b.n	8003f88 <_puts_r+0x88>
 8003fd0:	08004fa0 	.word	0x08004fa0
 8003fd4:	08004fc0 	.word	0x08004fc0
 8003fd8:	08004f80 	.word	0x08004f80

08003fdc <puts>:
 8003fdc:	4b02      	ldr	r3, [pc, #8]	; (8003fe8 <puts+0xc>)
 8003fde:	4601      	mov	r1, r0
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f7ff bf8d 	b.w	8003f00 <_puts_r>
 8003fe6:	bf00      	nop
 8003fe8:	20000224 	.word	0x20000224

08003fec <__swbuf_r>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	460e      	mov	r6, r1
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	b118      	cbz	r0, 8003ffe <__swbuf_r+0x12>
 8003ff6:	6983      	ldr	r3, [r0, #24]
 8003ff8:	b90b      	cbnz	r3, 8003ffe <__swbuf_r+0x12>
 8003ffa:	f000 f9d1 	bl	80043a0 <__sinit>
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <__swbuf_r+0x98>)
 8004000:	429c      	cmp	r4, r3
 8004002:	d12b      	bne.n	800405c <__swbuf_r+0x70>
 8004004:	686c      	ldr	r4, [r5, #4]
 8004006:	69a3      	ldr	r3, [r4, #24]
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	071a      	lsls	r2, r3, #28
 800400e:	d52f      	bpl.n	8004070 <__swbuf_r+0x84>
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	b36b      	cbz	r3, 8004070 <__swbuf_r+0x84>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	1ac0      	subs	r0, r0, r3
 800401a:	6963      	ldr	r3, [r4, #20]
 800401c:	b2f6      	uxtb	r6, r6
 800401e:	4283      	cmp	r3, r0
 8004020:	4637      	mov	r7, r6
 8004022:	dc04      	bgt.n	800402e <__swbuf_r+0x42>
 8004024:	4621      	mov	r1, r4
 8004026:	4628      	mov	r0, r5
 8004028:	f000 f926 	bl	8004278 <_fflush_r>
 800402c:	bb30      	cbnz	r0, 800407c <__swbuf_r+0x90>
 800402e:	68a3      	ldr	r3, [r4, #8]
 8004030:	3b01      	subs	r3, #1
 8004032:	60a3      	str	r3, [r4, #8]
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	701e      	strb	r6, [r3, #0]
 800403c:	6963      	ldr	r3, [r4, #20]
 800403e:	3001      	adds	r0, #1
 8004040:	4283      	cmp	r3, r0
 8004042:	d004      	beq.n	800404e <__swbuf_r+0x62>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	07db      	lsls	r3, r3, #31
 8004048:	d506      	bpl.n	8004058 <__swbuf_r+0x6c>
 800404a:	2e0a      	cmp	r6, #10
 800404c:	d104      	bne.n	8004058 <__swbuf_r+0x6c>
 800404e:	4621      	mov	r1, r4
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f911 	bl	8004278 <_fflush_r>
 8004056:	b988      	cbnz	r0, 800407c <__swbuf_r+0x90>
 8004058:	4638      	mov	r0, r7
 800405a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <__swbuf_r+0x9c>)
 800405e:	429c      	cmp	r4, r3
 8004060:	d101      	bne.n	8004066 <__swbuf_r+0x7a>
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	e7cf      	b.n	8004006 <__swbuf_r+0x1a>
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <__swbuf_r+0xa0>)
 8004068:	429c      	cmp	r4, r3
 800406a:	bf08      	it	eq
 800406c:	68ec      	ldreq	r4, [r5, #12]
 800406e:	e7ca      	b.n	8004006 <__swbuf_r+0x1a>
 8004070:	4621      	mov	r1, r4
 8004072:	4628      	mov	r0, r5
 8004074:	f000 f80c 	bl	8004090 <__swsetup_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	d0cb      	beq.n	8004014 <__swbuf_r+0x28>
 800407c:	f04f 37ff 	mov.w	r7, #4294967295
 8004080:	e7ea      	b.n	8004058 <__swbuf_r+0x6c>
 8004082:	bf00      	nop
 8004084:	08004fa0 	.word	0x08004fa0
 8004088:	08004fc0 	.word	0x08004fc0
 800408c:	08004f80 	.word	0x08004f80

08004090 <__swsetup_r>:
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <__swsetup_r+0xcc>)
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	4606      	mov	r6, r0
 8004098:	460c      	mov	r4, r1
 800409a:	b125      	cbz	r5, 80040a6 <__swsetup_r+0x16>
 800409c:	69ab      	ldr	r3, [r5, #24]
 800409e:	b913      	cbnz	r3, 80040a6 <__swsetup_r+0x16>
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 f97d 	bl	80043a0 <__sinit>
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <__swsetup_r+0xd0>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	d10f      	bne.n	80040cc <__swsetup_r+0x3c>
 80040ac:	686c      	ldr	r4, [r5, #4]
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040b4:	0719      	lsls	r1, r3, #28
 80040b6:	d42c      	bmi.n	8004112 <__swsetup_r+0x82>
 80040b8:	06dd      	lsls	r5, r3, #27
 80040ba:	d411      	bmi.n	80040e0 <__swsetup_r+0x50>
 80040bc:	2309      	movs	r3, #9
 80040be:	6033      	str	r3, [r6, #0]
 80040c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	e03e      	b.n	800414a <__swsetup_r+0xba>
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <__swsetup_r+0xd4>)
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d101      	bne.n	80040d6 <__swsetup_r+0x46>
 80040d2:	68ac      	ldr	r4, [r5, #8]
 80040d4:	e7eb      	b.n	80040ae <__swsetup_r+0x1e>
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <__swsetup_r+0xd8>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	bf08      	it	eq
 80040dc:	68ec      	ldreq	r4, [r5, #12]
 80040de:	e7e6      	b.n	80040ae <__swsetup_r+0x1e>
 80040e0:	0758      	lsls	r0, r3, #29
 80040e2:	d512      	bpl.n	800410a <__swsetup_r+0x7a>
 80040e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e6:	b141      	cbz	r1, 80040fa <__swsetup_r+0x6a>
 80040e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <__swsetup_r+0x66>
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 fa59 	bl	80045a8 <_free_r>
 80040f6:	2300      	movs	r3, #0
 80040f8:	6363      	str	r3, [r4, #52]	; 0x34
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	2300      	movs	r3, #0
 8004104:	6063      	str	r3, [r4, #4]
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	b94b      	cbnz	r3, 800412a <__swsetup_r+0x9a>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d003      	beq.n	800412a <__swsetup_r+0x9a>
 8004122:	4621      	mov	r1, r4
 8004124:	4630      	mov	r0, r6
 8004126:	f000 f9ff 	bl	8004528 <__smakebuf_r>
 800412a:	89a0      	ldrh	r0, [r4, #12]
 800412c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004130:	f010 0301 	ands.w	r3, r0, #1
 8004134:	d00a      	beq.n	800414c <__swsetup_r+0xbc>
 8004136:	2300      	movs	r3, #0
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6963      	ldr	r3, [r4, #20]
 800413c:	425b      	negs	r3, r3
 800413e:	61a3      	str	r3, [r4, #24]
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	b943      	cbnz	r3, 8004156 <__swsetup_r+0xc6>
 8004144:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004148:	d1ba      	bne.n	80040c0 <__swsetup_r+0x30>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	0781      	lsls	r1, r0, #30
 800414e:	bf58      	it	pl
 8004150:	6963      	ldrpl	r3, [r4, #20]
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	e7f4      	b.n	8004140 <__swsetup_r+0xb0>
 8004156:	2000      	movs	r0, #0
 8004158:	e7f7      	b.n	800414a <__swsetup_r+0xba>
 800415a:	bf00      	nop
 800415c:	20000224 	.word	0x20000224
 8004160:	08004fa0 	.word	0x08004fa0
 8004164:	08004fc0 	.word	0x08004fc0
 8004168:	08004f80 	.word	0x08004f80

0800416c <__sflush_r>:
 800416c:	898a      	ldrh	r2, [r1, #12]
 800416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	4605      	mov	r5, r0
 8004174:	0710      	lsls	r0, r2, #28
 8004176:	460c      	mov	r4, r1
 8004178:	d458      	bmi.n	800422c <__sflush_r+0xc0>
 800417a:	684b      	ldr	r3, [r1, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	dc05      	bgt.n	800418c <__sflush_r+0x20>
 8004180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	dc02      	bgt.n	800418c <__sflush_r+0x20>
 8004186:	2000      	movs	r0, #0
 8004188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800418c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800418e:	2e00      	cmp	r6, #0
 8004190:	d0f9      	beq.n	8004186 <__sflush_r+0x1a>
 8004192:	2300      	movs	r3, #0
 8004194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004198:	682f      	ldr	r7, [r5, #0]
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	d032      	beq.n	8004204 <__sflush_r+0x98>
 800419e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	075a      	lsls	r2, r3, #29
 80041a4:	d505      	bpl.n	80041b2 <__sflush_r+0x46>
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	1ac0      	subs	r0, r0, r3
 80041aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ac:	b10b      	cbz	r3, 80041b2 <__sflush_r+0x46>
 80041ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041b0:	1ac0      	subs	r0, r0, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	4602      	mov	r2, r0
 80041b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041b8:	6a21      	ldr	r1, [r4, #32]
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b0      	blx	r6
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	d106      	bne.n	80041d2 <__sflush_r+0x66>
 80041c4:	6829      	ldr	r1, [r5, #0]
 80041c6:	291d      	cmp	r1, #29
 80041c8:	d82c      	bhi.n	8004224 <__sflush_r+0xb8>
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <__sflush_r+0x108>)
 80041cc:	40ca      	lsrs	r2, r1
 80041ce:	07d6      	lsls	r6, r2, #31
 80041d0:	d528      	bpl.n	8004224 <__sflush_r+0xb8>
 80041d2:	2200      	movs	r2, #0
 80041d4:	6062      	str	r2, [r4, #4]
 80041d6:	04d9      	lsls	r1, r3, #19
 80041d8:	6922      	ldr	r2, [r4, #16]
 80041da:	6022      	str	r2, [r4, #0]
 80041dc:	d504      	bpl.n	80041e8 <__sflush_r+0x7c>
 80041de:	1c42      	adds	r2, r0, #1
 80041e0:	d101      	bne.n	80041e6 <__sflush_r+0x7a>
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	b903      	cbnz	r3, 80041e8 <__sflush_r+0x7c>
 80041e6:	6560      	str	r0, [r4, #84]	; 0x54
 80041e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ea:	602f      	str	r7, [r5, #0]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d0ca      	beq.n	8004186 <__sflush_r+0x1a>
 80041f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f4:	4299      	cmp	r1, r3
 80041f6:	d002      	beq.n	80041fe <__sflush_r+0x92>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 f9d5 	bl	80045a8 <_free_r>
 80041fe:	2000      	movs	r0, #0
 8004200:	6360      	str	r0, [r4, #52]	; 0x34
 8004202:	e7c1      	b.n	8004188 <__sflush_r+0x1c>
 8004204:	6a21      	ldr	r1, [r4, #32]
 8004206:	2301      	movs	r3, #1
 8004208:	4628      	mov	r0, r5
 800420a:	47b0      	blx	r6
 800420c:	1c41      	adds	r1, r0, #1
 800420e:	d1c7      	bne.n	80041a0 <__sflush_r+0x34>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0c4      	beq.n	80041a0 <__sflush_r+0x34>
 8004216:	2b1d      	cmp	r3, #29
 8004218:	d001      	beq.n	800421e <__sflush_r+0xb2>
 800421a:	2b16      	cmp	r3, #22
 800421c:	d101      	bne.n	8004222 <__sflush_r+0xb6>
 800421e:	602f      	str	r7, [r5, #0]
 8004220:	e7b1      	b.n	8004186 <__sflush_r+0x1a>
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	e7ad      	b.n	8004188 <__sflush_r+0x1c>
 800422c:	690f      	ldr	r7, [r1, #16]
 800422e:	2f00      	cmp	r7, #0
 8004230:	d0a9      	beq.n	8004186 <__sflush_r+0x1a>
 8004232:	0793      	lsls	r3, r2, #30
 8004234:	680e      	ldr	r6, [r1, #0]
 8004236:	bf08      	it	eq
 8004238:	694b      	ldreq	r3, [r1, #20]
 800423a:	600f      	str	r7, [r1, #0]
 800423c:	bf18      	it	ne
 800423e:	2300      	movne	r3, #0
 8004240:	eba6 0807 	sub.w	r8, r6, r7
 8004244:	608b      	str	r3, [r1, #8]
 8004246:	f1b8 0f00 	cmp.w	r8, #0
 800424a:	dd9c      	ble.n	8004186 <__sflush_r+0x1a>
 800424c:	6a21      	ldr	r1, [r4, #32]
 800424e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004250:	4643      	mov	r3, r8
 8004252:	463a      	mov	r2, r7
 8004254:	4628      	mov	r0, r5
 8004256:	47b0      	blx	r6
 8004258:	2800      	cmp	r0, #0
 800425a:	dc06      	bgt.n	800426a <__sflush_r+0xfe>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	f04f 30ff 	mov.w	r0, #4294967295
 8004268:	e78e      	b.n	8004188 <__sflush_r+0x1c>
 800426a:	4407      	add	r7, r0
 800426c:	eba8 0800 	sub.w	r8, r8, r0
 8004270:	e7e9      	b.n	8004246 <__sflush_r+0xda>
 8004272:	bf00      	nop
 8004274:	20400001 	.word	0x20400001

08004278 <_fflush_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	690b      	ldr	r3, [r1, #16]
 800427c:	4605      	mov	r5, r0
 800427e:	460c      	mov	r4, r1
 8004280:	b913      	cbnz	r3, 8004288 <_fflush_r+0x10>
 8004282:	2500      	movs	r5, #0
 8004284:	4628      	mov	r0, r5
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	b118      	cbz	r0, 8004292 <_fflush_r+0x1a>
 800428a:	6983      	ldr	r3, [r0, #24]
 800428c:	b90b      	cbnz	r3, 8004292 <_fflush_r+0x1a>
 800428e:	f000 f887 	bl	80043a0 <__sinit>
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <_fflush_r+0x6c>)
 8004294:	429c      	cmp	r4, r3
 8004296:	d11b      	bne.n	80042d0 <_fflush_r+0x58>
 8004298:	686c      	ldr	r4, [r5, #4]
 800429a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ef      	beq.n	8004282 <_fflush_r+0xa>
 80042a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042a4:	07d0      	lsls	r0, r2, #31
 80042a6:	d404      	bmi.n	80042b2 <_fflush_r+0x3a>
 80042a8:	0599      	lsls	r1, r3, #22
 80042aa:	d402      	bmi.n	80042b2 <_fflush_r+0x3a>
 80042ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ae:	f000 f915 	bl	80044dc <__retarget_lock_acquire_recursive>
 80042b2:	4628      	mov	r0, r5
 80042b4:	4621      	mov	r1, r4
 80042b6:	f7ff ff59 	bl	800416c <__sflush_r>
 80042ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042bc:	07da      	lsls	r2, r3, #31
 80042be:	4605      	mov	r5, r0
 80042c0:	d4e0      	bmi.n	8004284 <_fflush_r+0xc>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d4dd      	bmi.n	8004284 <_fflush_r+0xc>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f000 f908 	bl	80044de <__retarget_lock_release_recursive>
 80042ce:	e7d9      	b.n	8004284 <_fflush_r+0xc>
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <_fflush_r+0x70>)
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d101      	bne.n	80042da <_fflush_r+0x62>
 80042d6:	68ac      	ldr	r4, [r5, #8]
 80042d8:	e7df      	b.n	800429a <_fflush_r+0x22>
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <_fflush_r+0x74>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	bf08      	it	eq
 80042e0:	68ec      	ldreq	r4, [r5, #12]
 80042e2:	e7da      	b.n	800429a <_fflush_r+0x22>
 80042e4:	08004fa0 	.word	0x08004fa0
 80042e8:	08004fc0 	.word	0x08004fc0
 80042ec:	08004f80 	.word	0x08004f80

080042f0 <std>:
 80042f0:	2300      	movs	r3, #0
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
 80042f6:	e9c0 3300 	strd	r3, r3, [r0]
 80042fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042fe:	6083      	str	r3, [r0, #8]
 8004300:	8181      	strh	r1, [r0, #12]
 8004302:	6643      	str	r3, [r0, #100]	; 0x64
 8004304:	81c2      	strh	r2, [r0, #14]
 8004306:	6183      	str	r3, [r0, #24]
 8004308:	4619      	mov	r1, r3
 800430a:	2208      	movs	r2, #8
 800430c:	305c      	adds	r0, #92	; 0x5c
 800430e:	f7ff fdd7 	bl	8003ec0 <memset>
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <std+0x38>)
 8004314:	6263      	str	r3, [r4, #36]	; 0x24
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <std+0x3c>)
 8004318:	62a3      	str	r3, [r4, #40]	; 0x28
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <std+0x40>)
 800431c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <std+0x44>)
 8004320:	6224      	str	r4, [r4, #32]
 8004322:	6323      	str	r3, [r4, #48]	; 0x30
 8004324:	bd10      	pop	{r4, pc}
 8004326:	bf00      	nop
 8004328:	08004cf9 	.word	0x08004cf9
 800432c:	08004d1b 	.word	0x08004d1b
 8004330:	08004d53 	.word	0x08004d53
 8004334:	08004d77 	.word	0x08004d77

08004338 <_cleanup_r>:
 8004338:	4901      	ldr	r1, [pc, #4]	; (8004340 <_cleanup_r+0x8>)
 800433a:	f000 b8af 	b.w	800449c <_fwalk_reent>
 800433e:	bf00      	nop
 8004340:	08004279 	.word	0x08004279

08004344 <__sfmoreglue>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	1e4a      	subs	r2, r1, #1
 8004348:	2568      	movs	r5, #104	; 0x68
 800434a:	4355      	muls	r5, r2
 800434c:	460e      	mov	r6, r1
 800434e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004352:	f000 f979 	bl	8004648 <_malloc_r>
 8004356:	4604      	mov	r4, r0
 8004358:	b140      	cbz	r0, 800436c <__sfmoreglue+0x28>
 800435a:	2100      	movs	r1, #0
 800435c:	e9c0 1600 	strd	r1, r6, [r0]
 8004360:	300c      	adds	r0, #12
 8004362:	60a0      	str	r0, [r4, #8]
 8004364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004368:	f7ff fdaa 	bl	8003ec0 <memset>
 800436c:	4620      	mov	r0, r4
 800436e:	bd70      	pop	{r4, r5, r6, pc}

08004370 <__sfp_lock_acquire>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__sfp_lock_acquire+0x8>)
 8004372:	f000 b8b3 	b.w	80044dc <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	2000047c 	.word	0x2000047c

0800437c <__sfp_lock_release>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__sfp_lock_release+0x8>)
 800437e:	f000 b8ae 	b.w	80044de <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	2000047c 	.word	0x2000047c

08004388 <__sinit_lock_acquire>:
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <__sinit_lock_acquire+0x8>)
 800438a:	f000 b8a7 	b.w	80044dc <__retarget_lock_acquire_recursive>
 800438e:	bf00      	nop
 8004390:	20000477 	.word	0x20000477

08004394 <__sinit_lock_release>:
 8004394:	4801      	ldr	r0, [pc, #4]	; (800439c <__sinit_lock_release+0x8>)
 8004396:	f000 b8a2 	b.w	80044de <__retarget_lock_release_recursive>
 800439a:	bf00      	nop
 800439c:	20000477 	.word	0x20000477

080043a0 <__sinit>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	4604      	mov	r4, r0
 80043a4:	f7ff fff0 	bl	8004388 <__sinit_lock_acquire>
 80043a8:	69a3      	ldr	r3, [r4, #24]
 80043aa:	b11b      	cbz	r3, 80043b4 <__sinit+0x14>
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	f7ff bff0 	b.w	8004394 <__sinit_lock_release>
 80043b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043b8:	6523      	str	r3, [r4, #80]	; 0x50
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <__sinit+0x68>)
 80043bc:	4a13      	ldr	r2, [pc, #76]	; (800440c <__sinit+0x6c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	bf04      	itt	eq
 80043c6:	2301      	moveq	r3, #1
 80043c8:	61a3      	streq	r3, [r4, #24]
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 f820 	bl	8004410 <__sfp>
 80043d0:	6060      	str	r0, [r4, #4]
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 f81c 	bl	8004410 <__sfp>
 80043d8:	60a0      	str	r0, [r4, #8]
 80043da:	4620      	mov	r0, r4
 80043dc:	f000 f818 	bl	8004410 <__sfp>
 80043e0:	2200      	movs	r2, #0
 80043e2:	60e0      	str	r0, [r4, #12]
 80043e4:	2104      	movs	r1, #4
 80043e6:	6860      	ldr	r0, [r4, #4]
 80043e8:	f7ff ff82 	bl	80042f0 <std>
 80043ec:	68a0      	ldr	r0, [r4, #8]
 80043ee:	2201      	movs	r2, #1
 80043f0:	2109      	movs	r1, #9
 80043f2:	f7ff ff7d 	bl	80042f0 <std>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	2202      	movs	r2, #2
 80043fa:	2112      	movs	r1, #18
 80043fc:	f7ff ff78 	bl	80042f0 <std>
 8004400:	2301      	movs	r3, #1
 8004402:	61a3      	str	r3, [r4, #24]
 8004404:	e7d2      	b.n	80043ac <__sinit+0xc>
 8004406:	bf00      	nop
 8004408:	08004f7c 	.word	0x08004f7c
 800440c:	08004339 	.word	0x08004339

08004410 <__sfp>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	4607      	mov	r7, r0
 8004414:	f7ff ffac 	bl	8004370 <__sfp_lock_acquire>
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <__sfp+0x84>)
 800441a:	681e      	ldr	r6, [r3, #0]
 800441c:	69b3      	ldr	r3, [r6, #24]
 800441e:	b913      	cbnz	r3, 8004426 <__sfp+0x16>
 8004420:	4630      	mov	r0, r6
 8004422:	f7ff ffbd 	bl	80043a0 <__sinit>
 8004426:	3648      	adds	r6, #72	; 0x48
 8004428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800442c:	3b01      	subs	r3, #1
 800442e:	d503      	bpl.n	8004438 <__sfp+0x28>
 8004430:	6833      	ldr	r3, [r6, #0]
 8004432:	b30b      	cbz	r3, 8004478 <__sfp+0x68>
 8004434:	6836      	ldr	r6, [r6, #0]
 8004436:	e7f7      	b.n	8004428 <__sfp+0x18>
 8004438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800443c:	b9d5      	cbnz	r5, 8004474 <__sfp+0x64>
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <__sfp+0x88>)
 8004440:	60e3      	str	r3, [r4, #12]
 8004442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004446:	6665      	str	r5, [r4, #100]	; 0x64
 8004448:	f000 f847 	bl	80044da <__retarget_lock_init_recursive>
 800444c:	f7ff ff96 	bl	800437c <__sfp_lock_release>
 8004450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004458:	6025      	str	r5, [r4, #0]
 800445a:	61a5      	str	r5, [r4, #24]
 800445c:	2208      	movs	r2, #8
 800445e:	4629      	mov	r1, r5
 8004460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004464:	f7ff fd2c 	bl	8003ec0 <memset>
 8004468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800446c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004470:	4620      	mov	r0, r4
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004474:	3468      	adds	r4, #104	; 0x68
 8004476:	e7d9      	b.n	800442c <__sfp+0x1c>
 8004478:	2104      	movs	r1, #4
 800447a:	4638      	mov	r0, r7
 800447c:	f7ff ff62 	bl	8004344 <__sfmoreglue>
 8004480:	4604      	mov	r4, r0
 8004482:	6030      	str	r0, [r6, #0]
 8004484:	2800      	cmp	r0, #0
 8004486:	d1d5      	bne.n	8004434 <__sfp+0x24>
 8004488:	f7ff ff78 	bl	800437c <__sfp_lock_release>
 800448c:	230c      	movs	r3, #12
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	e7ee      	b.n	8004470 <__sfp+0x60>
 8004492:	bf00      	nop
 8004494:	08004f7c 	.word	0x08004f7c
 8004498:	ffff0001 	.word	0xffff0001

0800449c <_fwalk_reent>:
 800449c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	4606      	mov	r6, r0
 80044a2:	4688      	mov	r8, r1
 80044a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044a8:	2700      	movs	r7, #0
 80044aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ae:	f1b9 0901 	subs.w	r9, r9, #1
 80044b2:	d505      	bpl.n	80044c0 <_fwalk_reent+0x24>
 80044b4:	6824      	ldr	r4, [r4, #0]
 80044b6:	2c00      	cmp	r4, #0
 80044b8:	d1f7      	bne.n	80044aa <_fwalk_reent+0xe>
 80044ba:	4638      	mov	r0, r7
 80044bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044c0:	89ab      	ldrh	r3, [r5, #12]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d907      	bls.n	80044d6 <_fwalk_reent+0x3a>
 80044c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044ca:	3301      	adds	r3, #1
 80044cc:	d003      	beq.n	80044d6 <_fwalk_reent+0x3a>
 80044ce:	4629      	mov	r1, r5
 80044d0:	4630      	mov	r0, r6
 80044d2:	47c0      	blx	r8
 80044d4:	4307      	orrs	r7, r0
 80044d6:	3568      	adds	r5, #104	; 0x68
 80044d8:	e7e9      	b.n	80044ae <_fwalk_reent+0x12>

080044da <__retarget_lock_init_recursive>:
 80044da:	4770      	bx	lr

080044dc <__retarget_lock_acquire_recursive>:
 80044dc:	4770      	bx	lr

080044de <__retarget_lock_release_recursive>:
 80044de:	4770      	bx	lr

080044e0 <__swhatbuf_r>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	460e      	mov	r6, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	2900      	cmp	r1, #0
 80044ea:	b096      	sub	sp, #88	; 0x58
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	da07      	bge.n	8004502 <__swhatbuf_r+0x22>
 80044f2:	2300      	movs	r3, #0
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	89b3      	ldrh	r3, [r6, #12]
 80044f8:	061a      	lsls	r2, r3, #24
 80044fa:	d410      	bmi.n	800451e <__swhatbuf_r+0x3e>
 80044fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004500:	e00e      	b.n	8004520 <__swhatbuf_r+0x40>
 8004502:	466a      	mov	r2, sp
 8004504:	f000 fc5e 	bl	8004dc4 <_fstat_r>
 8004508:	2800      	cmp	r0, #0
 800450a:	dbf2      	blt.n	80044f2 <__swhatbuf_r+0x12>
 800450c:	9a01      	ldr	r2, [sp, #4]
 800450e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004516:	425a      	negs	r2, r3
 8004518:	415a      	adcs	r2, r3
 800451a:	602a      	str	r2, [r5, #0]
 800451c:	e7ee      	b.n	80044fc <__swhatbuf_r+0x1c>
 800451e:	2340      	movs	r3, #64	; 0x40
 8004520:	2000      	movs	r0, #0
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	b016      	add	sp, #88	; 0x58
 8004526:	bd70      	pop	{r4, r5, r6, pc}

08004528 <__smakebuf_r>:
 8004528:	898b      	ldrh	r3, [r1, #12]
 800452a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800452c:	079d      	lsls	r5, r3, #30
 800452e:	4606      	mov	r6, r0
 8004530:	460c      	mov	r4, r1
 8004532:	d507      	bpl.n	8004544 <__smakebuf_r+0x1c>
 8004534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	6123      	str	r3, [r4, #16]
 800453c:	2301      	movs	r3, #1
 800453e:	6163      	str	r3, [r4, #20]
 8004540:	b002      	add	sp, #8
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	ab01      	add	r3, sp, #4
 8004546:	466a      	mov	r2, sp
 8004548:	f7ff ffca 	bl	80044e0 <__swhatbuf_r>
 800454c:	9900      	ldr	r1, [sp, #0]
 800454e:	4605      	mov	r5, r0
 8004550:	4630      	mov	r0, r6
 8004552:	f000 f879 	bl	8004648 <_malloc_r>
 8004556:	b948      	cbnz	r0, 800456c <__smakebuf_r+0x44>
 8004558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455c:	059a      	lsls	r2, r3, #22
 800455e:	d4ef      	bmi.n	8004540 <__smakebuf_r+0x18>
 8004560:	f023 0303 	bic.w	r3, r3, #3
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	e7e3      	b.n	8004534 <__smakebuf_r+0xc>
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <__smakebuf_r+0x7c>)
 800456e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	6020      	str	r0, [r4, #0]
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	81a3      	strh	r3, [r4, #12]
 800457a:	9b00      	ldr	r3, [sp, #0]
 800457c:	6163      	str	r3, [r4, #20]
 800457e:	9b01      	ldr	r3, [sp, #4]
 8004580:	6120      	str	r0, [r4, #16]
 8004582:	b15b      	cbz	r3, 800459c <__smakebuf_r+0x74>
 8004584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004588:	4630      	mov	r0, r6
 800458a:	f000 fc2d 	bl	8004de8 <_isatty_r>
 800458e:	b128      	cbz	r0, 800459c <__smakebuf_r+0x74>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	81a3      	strh	r3, [r4, #12]
 800459c:	89a0      	ldrh	r0, [r4, #12]
 800459e:	4305      	orrs	r5, r0
 80045a0:	81a5      	strh	r5, [r4, #12]
 80045a2:	e7cd      	b.n	8004540 <__smakebuf_r+0x18>
 80045a4:	08004339 	.word	0x08004339

080045a8 <_free_r>:
 80045a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045aa:	2900      	cmp	r1, #0
 80045ac:	d048      	beq.n	8004640 <_free_r+0x98>
 80045ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b2:	9001      	str	r0, [sp, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f1a1 0404 	sub.w	r4, r1, #4
 80045ba:	bfb8      	it	lt
 80045bc:	18e4      	addlt	r4, r4, r3
 80045be:	f000 fc35 	bl	8004e2c <__malloc_lock>
 80045c2:	4a20      	ldr	r2, [pc, #128]	; (8004644 <_free_r+0x9c>)
 80045c4:	9801      	ldr	r0, [sp, #4]
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	4615      	mov	r5, r2
 80045ca:	b933      	cbnz	r3, 80045da <_free_r+0x32>
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	6014      	str	r4, [r2, #0]
 80045d0:	b003      	add	sp, #12
 80045d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045d6:	f000 bc2f 	b.w	8004e38 <__malloc_unlock>
 80045da:	42a3      	cmp	r3, r4
 80045dc:	d90b      	bls.n	80045f6 <_free_r+0x4e>
 80045de:	6821      	ldr	r1, [r4, #0]
 80045e0:	1862      	adds	r2, r4, r1
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bf04      	itt	eq
 80045e6:	681a      	ldreq	r2, [r3, #0]
 80045e8:	685b      	ldreq	r3, [r3, #4]
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	bf04      	itt	eq
 80045ee:	1852      	addeq	r2, r2, r1
 80045f0:	6022      	streq	r2, [r4, #0]
 80045f2:	602c      	str	r4, [r5, #0]
 80045f4:	e7ec      	b.n	80045d0 <_free_r+0x28>
 80045f6:	461a      	mov	r2, r3
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	b10b      	cbz	r3, 8004600 <_free_r+0x58>
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	d9fa      	bls.n	80045f6 <_free_r+0x4e>
 8004600:	6811      	ldr	r1, [r2, #0]
 8004602:	1855      	adds	r5, r2, r1
 8004604:	42a5      	cmp	r5, r4
 8004606:	d10b      	bne.n	8004620 <_free_r+0x78>
 8004608:	6824      	ldr	r4, [r4, #0]
 800460a:	4421      	add	r1, r4
 800460c:	1854      	adds	r4, r2, r1
 800460e:	42a3      	cmp	r3, r4
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	d1dd      	bne.n	80045d0 <_free_r+0x28>
 8004614:	681c      	ldr	r4, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	6053      	str	r3, [r2, #4]
 800461a:	4421      	add	r1, r4
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	e7d7      	b.n	80045d0 <_free_r+0x28>
 8004620:	d902      	bls.n	8004628 <_free_r+0x80>
 8004622:	230c      	movs	r3, #12
 8004624:	6003      	str	r3, [r0, #0]
 8004626:	e7d3      	b.n	80045d0 <_free_r+0x28>
 8004628:	6825      	ldr	r5, [r4, #0]
 800462a:	1961      	adds	r1, r4, r5
 800462c:	428b      	cmp	r3, r1
 800462e:	bf04      	itt	eq
 8004630:	6819      	ldreq	r1, [r3, #0]
 8004632:	685b      	ldreq	r3, [r3, #4]
 8004634:	6063      	str	r3, [r4, #4]
 8004636:	bf04      	itt	eq
 8004638:	1949      	addeq	r1, r1, r5
 800463a:	6021      	streq	r1, [r4, #0]
 800463c:	6054      	str	r4, [r2, #4]
 800463e:	e7c7      	b.n	80045d0 <_free_r+0x28>
 8004640:	b003      	add	sp, #12
 8004642:	bd30      	pop	{r4, r5, pc}
 8004644:	200002b4 	.word	0x200002b4

08004648 <_malloc_r>:
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	1ccd      	adds	r5, r1, #3
 800464c:	f025 0503 	bic.w	r5, r5, #3
 8004650:	3508      	adds	r5, #8
 8004652:	2d0c      	cmp	r5, #12
 8004654:	bf38      	it	cc
 8004656:	250c      	movcc	r5, #12
 8004658:	2d00      	cmp	r5, #0
 800465a:	4606      	mov	r6, r0
 800465c:	db01      	blt.n	8004662 <_malloc_r+0x1a>
 800465e:	42a9      	cmp	r1, r5
 8004660:	d903      	bls.n	800466a <_malloc_r+0x22>
 8004662:	230c      	movs	r3, #12
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	2000      	movs	r0, #0
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466a:	f000 fbdf 	bl	8004e2c <__malloc_lock>
 800466e:	4921      	ldr	r1, [pc, #132]	; (80046f4 <_malloc_r+0xac>)
 8004670:	680a      	ldr	r2, [r1, #0]
 8004672:	4614      	mov	r4, r2
 8004674:	b99c      	cbnz	r4, 800469e <_malloc_r+0x56>
 8004676:	4f20      	ldr	r7, [pc, #128]	; (80046f8 <_malloc_r+0xb0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b923      	cbnz	r3, 8004686 <_malloc_r+0x3e>
 800467c:	4621      	mov	r1, r4
 800467e:	4630      	mov	r0, r6
 8004680:	f000 fb2a 	bl	8004cd8 <_sbrk_r>
 8004684:	6038      	str	r0, [r7, #0]
 8004686:	4629      	mov	r1, r5
 8004688:	4630      	mov	r0, r6
 800468a:	f000 fb25 	bl	8004cd8 <_sbrk_r>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	d123      	bne.n	80046da <_malloc_r+0x92>
 8004692:	230c      	movs	r3, #12
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	4630      	mov	r0, r6
 8004698:	f000 fbce 	bl	8004e38 <__malloc_unlock>
 800469c:	e7e3      	b.n	8004666 <_malloc_r+0x1e>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	1b5b      	subs	r3, r3, r5
 80046a2:	d417      	bmi.n	80046d4 <_malloc_r+0x8c>
 80046a4:	2b0b      	cmp	r3, #11
 80046a6:	d903      	bls.n	80046b0 <_malloc_r+0x68>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	441c      	add	r4, r3
 80046ac:	6025      	str	r5, [r4, #0]
 80046ae:	e004      	b.n	80046ba <_malloc_r+0x72>
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	42a2      	cmp	r2, r4
 80046b4:	bf0c      	ite	eq
 80046b6:	600b      	streq	r3, [r1, #0]
 80046b8:	6053      	strne	r3, [r2, #4]
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 fbbc 	bl	8004e38 <__malloc_unlock>
 80046c0:	f104 000b 	add.w	r0, r4, #11
 80046c4:	1d23      	adds	r3, r4, #4
 80046c6:	f020 0007 	bic.w	r0, r0, #7
 80046ca:	1ac2      	subs	r2, r0, r3
 80046cc:	d0cc      	beq.n	8004668 <_malloc_r+0x20>
 80046ce:	1a1b      	subs	r3, r3, r0
 80046d0:	50a3      	str	r3, [r4, r2]
 80046d2:	e7c9      	b.n	8004668 <_malloc_r+0x20>
 80046d4:	4622      	mov	r2, r4
 80046d6:	6864      	ldr	r4, [r4, #4]
 80046d8:	e7cc      	b.n	8004674 <_malloc_r+0x2c>
 80046da:	1cc4      	adds	r4, r0, #3
 80046dc:	f024 0403 	bic.w	r4, r4, #3
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d0e3      	beq.n	80046ac <_malloc_r+0x64>
 80046e4:	1a21      	subs	r1, r4, r0
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 faf6 	bl	8004cd8 <_sbrk_r>
 80046ec:	3001      	adds	r0, #1
 80046ee:	d1dd      	bne.n	80046ac <_malloc_r+0x64>
 80046f0:	e7cf      	b.n	8004692 <_malloc_r+0x4a>
 80046f2:	bf00      	nop
 80046f4:	200002b4 	.word	0x200002b4
 80046f8:	200002b8 	.word	0x200002b8

080046fc <__sfputc_r>:
 80046fc:	6893      	ldr	r3, [r2, #8]
 80046fe:	3b01      	subs	r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	b410      	push	{r4}
 8004704:	6093      	str	r3, [r2, #8]
 8004706:	da08      	bge.n	800471a <__sfputc_r+0x1e>
 8004708:	6994      	ldr	r4, [r2, #24]
 800470a:	42a3      	cmp	r3, r4
 800470c:	db01      	blt.n	8004712 <__sfputc_r+0x16>
 800470e:	290a      	cmp	r1, #10
 8004710:	d103      	bne.n	800471a <__sfputc_r+0x1e>
 8004712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004716:	f7ff bc69 	b.w	8003fec <__swbuf_r>
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	1c58      	adds	r0, r3, #1
 800471e:	6010      	str	r0, [r2, #0]
 8004720:	7019      	strb	r1, [r3, #0]
 8004722:	4608      	mov	r0, r1
 8004724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004728:	4770      	bx	lr

0800472a <__sfputs_r>:
 800472a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472c:	4606      	mov	r6, r0
 800472e:	460f      	mov	r7, r1
 8004730:	4614      	mov	r4, r2
 8004732:	18d5      	adds	r5, r2, r3
 8004734:	42ac      	cmp	r4, r5
 8004736:	d101      	bne.n	800473c <__sfputs_r+0x12>
 8004738:	2000      	movs	r0, #0
 800473a:	e007      	b.n	800474c <__sfputs_r+0x22>
 800473c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004740:	463a      	mov	r2, r7
 8004742:	4630      	mov	r0, r6
 8004744:	f7ff ffda 	bl	80046fc <__sfputc_r>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d1f3      	bne.n	8004734 <__sfputs_r+0xa>
 800474c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004750 <_vfiprintf_r>:
 8004750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004754:	460d      	mov	r5, r1
 8004756:	b09d      	sub	sp, #116	; 0x74
 8004758:	4614      	mov	r4, r2
 800475a:	4698      	mov	r8, r3
 800475c:	4606      	mov	r6, r0
 800475e:	b118      	cbz	r0, 8004768 <_vfiprintf_r+0x18>
 8004760:	6983      	ldr	r3, [r0, #24]
 8004762:	b90b      	cbnz	r3, 8004768 <_vfiprintf_r+0x18>
 8004764:	f7ff fe1c 	bl	80043a0 <__sinit>
 8004768:	4b89      	ldr	r3, [pc, #548]	; (8004990 <_vfiprintf_r+0x240>)
 800476a:	429d      	cmp	r5, r3
 800476c:	d11b      	bne.n	80047a6 <_vfiprintf_r+0x56>
 800476e:	6875      	ldr	r5, [r6, #4]
 8004770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004772:	07d9      	lsls	r1, r3, #31
 8004774:	d405      	bmi.n	8004782 <_vfiprintf_r+0x32>
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	059a      	lsls	r2, r3, #22
 800477a:	d402      	bmi.n	8004782 <_vfiprintf_r+0x32>
 800477c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800477e:	f7ff fead 	bl	80044dc <__retarget_lock_acquire_recursive>
 8004782:	89ab      	ldrh	r3, [r5, #12]
 8004784:	071b      	lsls	r3, r3, #28
 8004786:	d501      	bpl.n	800478c <_vfiprintf_r+0x3c>
 8004788:	692b      	ldr	r3, [r5, #16]
 800478a:	b9eb      	cbnz	r3, 80047c8 <_vfiprintf_r+0x78>
 800478c:	4629      	mov	r1, r5
 800478e:	4630      	mov	r0, r6
 8004790:	f7ff fc7e 	bl	8004090 <__swsetup_r>
 8004794:	b1c0      	cbz	r0, 80047c8 <_vfiprintf_r+0x78>
 8004796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004798:	07dc      	lsls	r4, r3, #31
 800479a:	d50e      	bpl.n	80047ba <_vfiprintf_r+0x6a>
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	b01d      	add	sp, #116	; 0x74
 80047a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a6:	4b7b      	ldr	r3, [pc, #492]	; (8004994 <_vfiprintf_r+0x244>)
 80047a8:	429d      	cmp	r5, r3
 80047aa:	d101      	bne.n	80047b0 <_vfiprintf_r+0x60>
 80047ac:	68b5      	ldr	r5, [r6, #8]
 80047ae:	e7df      	b.n	8004770 <_vfiprintf_r+0x20>
 80047b0:	4b79      	ldr	r3, [pc, #484]	; (8004998 <_vfiprintf_r+0x248>)
 80047b2:	429d      	cmp	r5, r3
 80047b4:	bf08      	it	eq
 80047b6:	68f5      	ldreq	r5, [r6, #12]
 80047b8:	e7da      	b.n	8004770 <_vfiprintf_r+0x20>
 80047ba:	89ab      	ldrh	r3, [r5, #12]
 80047bc:	0598      	lsls	r0, r3, #22
 80047be:	d4ed      	bmi.n	800479c <_vfiprintf_r+0x4c>
 80047c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047c2:	f7ff fe8c 	bl	80044de <__retarget_lock_release_recursive>
 80047c6:	e7e9      	b.n	800479c <_vfiprintf_r+0x4c>
 80047c8:	2300      	movs	r3, #0
 80047ca:	9309      	str	r3, [sp, #36]	; 0x24
 80047cc:	2320      	movs	r3, #32
 80047ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d6:	2330      	movs	r3, #48	; 0x30
 80047d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800499c <_vfiprintf_r+0x24c>
 80047dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047e0:	f04f 0901 	mov.w	r9, #1
 80047e4:	4623      	mov	r3, r4
 80047e6:	469a      	mov	sl, r3
 80047e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ec:	b10a      	cbz	r2, 80047f2 <_vfiprintf_r+0xa2>
 80047ee:	2a25      	cmp	r2, #37	; 0x25
 80047f0:	d1f9      	bne.n	80047e6 <_vfiprintf_r+0x96>
 80047f2:	ebba 0b04 	subs.w	fp, sl, r4
 80047f6:	d00b      	beq.n	8004810 <_vfiprintf_r+0xc0>
 80047f8:	465b      	mov	r3, fp
 80047fa:	4622      	mov	r2, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	4630      	mov	r0, r6
 8004800:	f7ff ff93 	bl	800472a <__sfputs_r>
 8004804:	3001      	adds	r0, #1
 8004806:	f000 80aa 	beq.w	800495e <_vfiprintf_r+0x20e>
 800480a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800480c:	445a      	add	r2, fp
 800480e:	9209      	str	r2, [sp, #36]	; 0x24
 8004810:	f89a 3000 	ldrb.w	r3, [sl]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a2 	beq.w	800495e <_vfiprintf_r+0x20e>
 800481a:	2300      	movs	r3, #0
 800481c:	f04f 32ff 	mov.w	r2, #4294967295
 8004820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004824:	f10a 0a01 	add.w	sl, sl, #1
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	9307      	str	r3, [sp, #28]
 800482c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004830:	931a      	str	r3, [sp, #104]	; 0x68
 8004832:	4654      	mov	r4, sl
 8004834:	2205      	movs	r2, #5
 8004836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483a:	4858      	ldr	r0, [pc, #352]	; (800499c <_vfiprintf_r+0x24c>)
 800483c:	f7fb fce8 	bl	8000210 <memchr>
 8004840:	9a04      	ldr	r2, [sp, #16]
 8004842:	b9d8      	cbnz	r0, 800487c <_vfiprintf_r+0x12c>
 8004844:	06d1      	lsls	r1, r2, #27
 8004846:	bf44      	itt	mi
 8004848:	2320      	movmi	r3, #32
 800484a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800484e:	0713      	lsls	r3, r2, #28
 8004850:	bf44      	itt	mi
 8004852:	232b      	movmi	r3, #43	; 0x2b
 8004854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004858:	f89a 3000 	ldrb.w	r3, [sl]
 800485c:	2b2a      	cmp	r3, #42	; 0x2a
 800485e:	d015      	beq.n	800488c <_vfiprintf_r+0x13c>
 8004860:	9a07      	ldr	r2, [sp, #28]
 8004862:	4654      	mov	r4, sl
 8004864:	2000      	movs	r0, #0
 8004866:	f04f 0c0a 	mov.w	ip, #10
 800486a:	4621      	mov	r1, r4
 800486c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004870:	3b30      	subs	r3, #48	; 0x30
 8004872:	2b09      	cmp	r3, #9
 8004874:	d94e      	bls.n	8004914 <_vfiprintf_r+0x1c4>
 8004876:	b1b0      	cbz	r0, 80048a6 <_vfiprintf_r+0x156>
 8004878:	9207      	str	r2, [sp, #28]
 800487a:	e014      	b.n	80048a6 <_vfiprintf_r+0x156>
 800487c:	eba0 0308 	sub.w	r3, r0, r8
 8004880:	fa09 f303 	lsl.w	r3, r9, r3
 8004884:	4313      	orrs	r3, r2
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	46a2      	mov	sl, r4
 800488a:	e7d2      	b.n	8004832 <_vfiprintf_r+0xe2>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	1d19      	adds	r1, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9103      	str	r1, [sp, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	bfbb      	ittet	lt
 8004898:	425b      	neglt	r3, r3
 800489a:	f042 0202 	orrlt.w	r2, r2, #2
 800489e:	9307      	strge	r3, [sp, #28]
 80048a0:	9307      	strlt	r3, [sp, #28]
 80048a2:	bfb8      	it	lt
 80048a4:	9204      	strlt	r2, [sp, #16]
 80048a6:	7823      	ldrb	r3, [r4, #0]
 80048a8:	2b2e      	cmp	r3, #46	; 0x2e
 80048aa:	d10c      	bne.n	80048c6 <_vfiprintf_r+0x176>
 80048ac:	7863      	ldrb	r3, [r4, #1]
 80048ae:	2b2a      	cmp	r3, #42	; 0x2a
 80048b0:	d135      	bne.n	800491e <_vfiprintf_r+0x1ce>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	9203      	str	r2, [sp, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfb8      	it	lt
 80048be:	f04f 33ff 	movlt.w	r3, #4294967295
 80048c2:	3402      	adds	r4, #2
 80048c4:	9305      	str	r3, [sp, #20]
 80048c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80049ac <_vfiprintf_r+0x25c>
 80048ca:	7821      	ldrb	r1, [r4, #0]
 80048cc:	2203      	movs	r2, #3
 80048ce:	4650      	mov	r0, sl
 80048d0:	f7fb fc9e 	bl	8000210 <memchr>
 80048d4:	b140      	cbz	r0, 80048e8 <_vfiprintf_r+0x198>
 80048d6:	2340      	movs	r3, #64	; 0x40
 80048d8:	eba0 000a 	sub.w	r0, r0, sl
 80048dc:	fa03 f000 	lsl.w	r0, r3, r0
 80048e0:	9b04      	ldr	r3, [sp, #16]
 80048e2:	4303      	orrs	r3, r0
 80048e4:	3401      	adds	r4, #1
 80048e6:	9304      	str	r3, [sp, #16]
 80048e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ec:	482c      	ldr	r0, [pc, #176]	; (80049a0 <_vfiprintf_r+0x250>)
 80048ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048f2:	2206      	movs	r2, #6
 80048f4:	f7fb fc8c 	bl	8000210 <memchr>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d03f      	beq.n	800497c <_vfiprintf_r+0x22c>
 80048fc:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <_vfiprintf_r+0x254>)
 80048fe:	bb1b      	cbnz	r3, 8004948 <_vfiprintf_r+0x1f8>
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	3307      	adds	r3, #7
 8004904:	f023 0307 	bic.w	r3, r3, #7
 8004908:	3308      	adds	r3, #8
 800490a:	9303      	str	r3, [sp, #12]
 800490c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490e:	443b      	add	r3, r7
 8004910:	9309      	str	r3, [sp, #36]	; 0x24
 8004912:	e767      	b.n	80047e4 <_vfiprintf_r+0x94>
 8004914:	fb0c 3202 	mla	r2, ip, r2, r3
 8004918:	460c      	mov	r4, r1
 800491a:	2001      	movs	r0, #1
 800491c:	e7a5      	b.n	800486a <_vfiprintf_r+0x11a>
 800491e:	2300      	movs	r3, #0
 8004920:	3401      	adds	r4, #1
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 0c0a 	mov.w	ip, #10
 800492a:	4620      	mov	r0, r4
 800492c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004930:	3a30      	subs	r2, #48	; 0x30
 8004932:	2a09      	cmp	r2, #9
 8004934:	d903      	bls.n	800493e <_vfiprintf_r+0x1ee>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0c5      	beq.n	80048c6 <_vfiprintf_r+0x176>
 800493a:	9105      	str	r1, [sp, #20]
 800493c:	e7c3      	b.n	80048c6 <_vfiprintf_r+0x176>
 800493e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004942:	4604      	mov	r4, r0
 8004944:	2301      	movs	r3, #1
 8004946:	e7f0      	b.n	800492a <_vfiprintf_r+0x1da>
 8004948:	ab03      	add	r3, sp, #12
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	462a      	mov	r2, r5
 800494e:	4b16      	ldr	r3, [pc, #88]	; (80049a8 <_vfiprintf_r+0x258>)
 8004950:	a904      	add	r1, sp, #16
 8004952:	4630      	mov	r0, r6
 8004954:	f3af 8000 	nop.w
 8004958:	4607      	mov	r7, r0
 800495a:	1c78      	adds	r0, r7, #1
 800495c:	d1d6      	bne.n	800490c <_vfiprintf_r+0x1bc>
 800495e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004960:	07d9      	lsls	r1, r3, #31
 8004962:	d405      	bmi.n	8004970 <_vfiprintf_r+0x220>
 8004964:	89ab      	ldrh	r3, [r5, #12]
 8004966:	059a      	lsls	r2, r3, #22
 8004968:	d402      	bmi.n	8004970 <_vfiprintf_r+0x220>
 800496a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800496c:	f7ff fdb7 	bl	80044de <__retarget_lock_release_recursive>
 8004970:	89ab      	ldrh	r3, [r5, #12]
 8004972:	065b      	lsls	r3, r3, #25
 8004974:	f53f af12 	bmi.w	800479c <_vfiprintf_r+0x4c>
 8004978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800497a:	e711      	b.n	80047a0 <_vfiprintf_r+0x50>
 800497c:	ab03      	add	r3, sp, #12
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	462a      	mov	r2, r5
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <_vfiprintf_r+0x258>)
 8004984:	a904      	add	r1, sp, #16
 8004986:	4630      	mov	r0, r6
 8004988:	f000 f880 	bl	8004a8c <_printf_i>
 800498c:	e7e4      	b.n	8004958 <_vfiprintf_r+0x208>
 800498e:	bf00      	nop
 8004990:	08004fa0 	.word	0x08004fa0
 8004994:	08004fc0 	.word	0x08004fc0
 8004998:	08004f80 	.word	0x08004f80
 800499c:	08004fe0 	.word	0x08004fe0
 80049a0:	08004fea 	.word	0x08004fea
 80049a4:	00000000 	.word	0x00000000
 80049a8:	0800472b 	.word	0x0800472b
 80049ac:	08004fe6 	.word	0x08004fe6

080049b0 <_printf_common>:
 80049b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	4616      	mov	r6, r2
 80049b6:	4699      	mov	r9, r3
 80049b8:	688a      	ldr	r2, [r1, #8]
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bfb8      	it	lt
 80049c4:	4613      	movlt	r3, r2
 80049c6:	6033      	str	r3, [r6, #0]
 80049c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049cc:	4607      	mov	r7, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	b10a      	cbz	r2, 80049d6 <_printf_common+0x26>
 80049d2:	3301      	adds	r3, #1
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	0699      	lsls	r1, r3, #26
 80049da:	bf42      	ittt	mi
 80049dc:	6833      	ldrmi	r3, [r6, #0]
 80049de:	3302      	addmi	r3, #2
 80049e0:	6033      	strmi	r3, [r6, #0]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	f015 0506 	ands.w	r5, r5, #6
 80049e8:	d106      	bne.n	80049f8 <_printf_common+0x48>
 80049ea:	f104 0a19 	add.w	sl, r4, #25
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	6832      	ldr	r2, [r6, #0]
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	dc26      	bgt.n	8004a46 <_printf_common+0x96>
 80049f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049fc:	1e13      	subs	r3, r2, #0
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	bf18      	it	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	0692      	lsls	r2, r2, #26
 8004a06:	d42b      	bmi.n	8004a60 <_printf_common+0xb0>
 8004a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c0      	blx	r8
 8004a12:	3001      	adds	r0, #1
 8004a14:	d01e      	beq.n	8004a54 <_printf_common+0xa4>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	68e5      	ldr	r5, [r4, #12]
 8004a1a:	6832      	ldr	r2, [r6, #0]
 8004a1c:	f003 0306 	and.w	r3, r3, #6
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	bf08      	it	eq
 8004a24:	1aad      	subeq	r5, r5, r2
 8004a26:	68a3      	ldr	r3, [r4, #8]
 8004a28:	6922      	ldr	r2, [r4, #16]
 8004a2a:	bf0c      	ite	eq
 8004a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a30:	2500      	movne	r5, #0
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bfc4      	itt	gt
 8004a36:	1a9b      	subgt	r3, r3, r2
 8004a38:	18ed      	addgt	r5, r5, r3
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	341a      	adds	r4, #26
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	d11a      	bne.n	8004a78 <_printf_common+0xc8>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e008      	b.n	8004a58 <_printf_common+0xa8>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	47c0      	blx	r8
 8004a50:	3001      	adds	r0, #1
 8004a52:	d103      	bne.n	8004a5c <_printf_common+0xac>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7c6      	b.n	80049ee <_printf_common+0x3e>
 8004a60:	18e1      	adds	r1, r4, r3
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	2030      	movs	r0, #48	; 0x30
 8004a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a6a:	4422      	add	r2, r4
 8004a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a74:	3302      	adds	r3, #2
 8004a76:	e7c7      	b.n	8004a08 <_printf_common+0x58>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0e6      	beq.n	8004a54 <_printf_common+0xa4>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7d9      	b.n	8004a3e <_printf_common+0x8e>
	...

08004a8c <_printf_i>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	460c      	mov	r4, r1
 8004a92:	4691      	mov	r9, r2
 8004a94:	7e27      	ldrb	r7, [r4, #24]
 8004a96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a98:	2f78      	cmp	r7, #120	; 0x78
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa2:	d807      	bhi.n	8004ab4 <_printf_i+0x28>
 8004aa4:	2f62      	cmp	r7, #98	; 0x62
 8004aa6:	d80a      	bhi.n	8004abe <_printf_i+0x32>
 8004aa8:	2f00      	cmp	r7, #0
 8004aaa:	f000 80d8 	beq.w	8004c5e <_printf_i+0x1d2>
 8004aae:	2f58      	cmp	r7, #88	; 0x58
 8004ab0:	f000 80a3 	beq.w	8004bfa <_printf_i+0x16e>
 8004ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004abc:	e03a      	b.n	8004b34 <_printf_i+0xa8>
 8004abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d8f6      	bhi.n	8004ab4 <_printf_i+0x28>
 8004ac6:	a001      	add	r0, pc, #4	; (adr r0, 8004acc <_printf_i+0x40>)
 8004ac8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004ab5 	.word	0x08004ab5
 8004ad8:	08004ab5 	.word	0x08004ab5
 8004adc:	08004ab5 	.word	0x08004ab5
 8004ae0:	08004ab5 	.word	0x08004ab5
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004ab5 	.word	0x08004ab5
 8004aec:	08004ab5 	.word	0x08004ab5
 8004af0:	08004ab5 	.word	0x08004ab5
 8004af4:	08004ab5 	.word	0x08004ab5
 8004af8:	08004c45 	.word	0x08004c45
 8004afc:	08004b69 	.word	0x08004b69
 8004b00:	08004c27 	.word	0x08004c27
 8004b04:	08004ab5 	.word	0x08004ab5
 8004b08:	08004ab5 	.word	0x08004ab5
 8004b0c:	08004c67 	.word	0x08004c67
 8004b10:	08004ab5 	.word	0x08004ab5
 8004b14:	08004b69 	.word	0x08004b69
 8004b18:	08004ab5 	.word	0x08004ab5
 8004b1c:	08004ab5 	.word	0x08004ab5
 8004b20:	08004c2f 	.word	0x08004c2f
 8004b24:	680b      	ldr	r3, [r1, #0]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	600a      	str	r2, [r1, #0]
 8004b2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0a3      	b.n	8004c80 <_printf_i+0x1f4>
 8004b38:	6825      	ldr	r5, [r4, #0]
 8004b3a:	6808      	ldr	r0, [r1, #0]
 8004b3c:	062e      	lsls	r6, r5, #24
 8004b3e:	f100 0304 	add.w	r3, r0, #4
 8004b42:	d50a      	bpl.n	8004b5a <_printf_i+0xce>
 8004b44:	6805      	ldr	r5, [r0, #0]
 8004b46:	600b      	str	r3, [r1, #0]
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	da03      	bge.n	8004b54 <_printf_i+0xc8>
 8004b4c:	232d      	movs	r3, #45	; 0x2d
 8004b4e:	426d      	negs	r5, r5
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b54:	485e      	ldr	r0, [pc, #376]	; (8004cd0 <_printf_i+0x244>)
 8004b56:	230a      	movs	r3, #10
 8004b58:	e019      	b.n	8004b8e <_printf_i+0x102>
 8004b5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b5e:	6805      	ldr	r5, [r0, #0]
 8004b60:	600b      	str	r3, [r1, #0]
 8004b62:	bf18      	it	ne
 8004b64:	b22d      	sxthne	r5, r5
 8004b66:	e7ef      	b.n	8004b48 <_printf_i+0xbc>
 8004b68:	680b      	ldr	r3, [r1, #0]
 8004b6a:	6825      	ldr	r5, [r4, #0]
 8004b6c:	1d18      	adds	r0, r3, #4
 8004b6e:	6008      	str	r0, [r1, #0]
 8004b70:	0628      	lsls	r0, r5, #24
 8004b72:	d501      	bpl.n	8004b78 <_printf_i+0xec>
 8004b74:	681d      	ldr	r5, [r3, #0]
 8004b76:	e002      	b.n	8004b7e <_printf_i+0xf2>
 8004b78:	0669      	lsls	r1, r5, #25
 8004b7a:	d5fb      	bpl.n	8004b74 <_printf_i+0xe8>
 8004b7c:	881d      	ldrh	r5, [r3, #0]
 8004b7e:	4854      	ldr	r0, [pc, #336]	; (8004cd0 <_printf_i+0x244>)
 8004b80:	2f6f      	cmp	r7, #111	; 0x6f
 8004b82:	bf0c      	ite	eq
 8004b84:	2308      	moveq	r3, #8
 8004b86:	230a      	movne	r3, #10
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b8e:	6866      	ldr	r6, [r4, #4]
 8004b90:	60a6      	str	r6, [r4, #8]
 8004b92:	2e00      	cmp	r6, #0
 8004b94:	bfa2      	ittt	ge
 8004b96:	6821      	ldrge	r1, [r4, #0]
 8004b98:	f021 0104 	bicge.w	r1, r1, #4
 8004b9c:	6021      	strge	r1, [r4, #0]
 8004b9e:	b90d      	cbnz	r5, 8004ba4 <_printf_i+0x118>
 8004ba0:	2e00      	cmp	r6, #0
 8004ba2:	d04d      	beq.n	8004c40 <_printf_i+0x1b4>
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004baa:	fb03 5711 	mls	r7, r3, r1, r5
 8004bae:	5dc7      	ldrb	r7, [r0, r7]
 8004bb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bb4:	462f      	mov	r7, r5
 8004bb6:	42bb      	cmp	r3, r7
 8004bb8:	460d      	mov	r5, r1
 8004bba:	d9f4      	bls.n	8004ba6 <_printf_i+0x11a>
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d10b      	bne.n	8004bd8 <_printf_i+0x14c>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	07df      	lsls	r7, r3, #31
 8004bc4:	d508      	bpl.n	8004bd8 <_printf_i+0x14c>
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	6861      	ldr	r1, [r4, #4]
 8004bca:	4299      	cmp	r1, r3
 8004bcc:	bfde      	ittt	le
 8004bce:	2330      	movle	r3, #48	; 0x30
 8004bd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bd8:	1b92      	subs	r2, r2, r6
 8004bda:	6122      	str	r2, [r4, #16]
 8004bdc:	f8cd a000 	str.w	sl, [sp]
 8004be0:	464b      	mov	r3, r9
 8004be2:	aa03      	add	r2, sp, #12
 8004be4:	4621      	mov	r1, r4
 8004be6:	4640      	mov	r0, r8
 8004be8:	f7ff fee2 	bl	80049b0 <_printf_common>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d14c      	bne.n	8004c8a <_printf_i+0x1fe>
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	b004      	add	sp, #16
 8004bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfa:	4835      	ldr	r0, [pc, #212]	; (8004cd0 <_printf_i+0x244>)
 8004bfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	680e      	ldr	r6, [r1, #0]
 8004c04:	061f      	lsls	r7, r3, #24
 8004c06:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c0a:	600e      	str	r6, [r1, #0]
 8004c0c:	d514      	bpl.n	8004c38 <_printf_i+0x1ac>
 8004c0e:	07d9      	lsls	r1, r3, #31
 8004c10:	bf44      	itt	mi
 8004c12:	f043 0320 	orrmi.w	r3, r3, #32
 8004c16:	6023      	strmi	r3, [r4, #0]
 8004c18:	b91d      	cbnz	r5, 8004c22 <_printf_i+0x196>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	f023 0320 	bic.w	r3, r3, #32
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	2310      	movs	r3, #16
 8004c24:	e7b0      	b.n	8004b88 <_printf_i+0xfc>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	2378      	movs	r3, #120	; 0x78
 8004c30:	4828      	ldr	r0, [pc, #160]	; (8004cd4 <_printf_i+0x248>)
 8004c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c36:	e7e3      	b.n	8004c00 <_printf_i+0x174>
 8004c38:	065e      	lsls	r6, r3, #25
 8004c3a:	bf48      	it	mi
 8004c3c:	b2ad      	uxthmi	r5, r5
 8004c3e:	e7e6      	b.n	8004c0e <_printf_i+0x182>
 8004c40:	4616      	mov	r6, r2
 8004c42:	e7bb      	b.n	8004bbc <_printf_i+0x130>
 8004c44:	680b      	ldr	r3, [r1, #0]
 8004c46:	6826      	ldr	r6, [r4, #0]
 8004c48:	6960      	ldr	r0, [r4, #20]
 8004c4a:	1d1d      	adds	r5, r3, #4
 8004c4c:	600d      	str	r5, [r1, #0]
 8004c4e:	0635      	lsls	r5, r6, #24
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0x1cc>
 8004c54:	6018      	str	r0, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0x1d2>
 8004c58:	0671      	lsls	r1, r6, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0x1c8>
 8004c5c:	8018      	strh	r0, [r3, #0]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	4616      	mov	r6, r2
 8004c64:	e7ba      	b.n	8004bdc <_printf_i+0x150>
 8004c66:	680b      	ldr	r3, [r1, #0]
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	600a      	str	r2, [r1, #0]
 8004c6c:	681e      	ldr	r6, [r3, #0]
 8004c6e:	6862      	ldr	r2, [r4, #4]
 8004c70:	2100      	movs	r1, #0
 8004c72:	4630      	mov	r0, r6
 8004c74:	f7fb facc 	bl	8000210 <memchr>
 8004c78:	b108      	cbz	r0, 8004c7e <_printf_i+0x1f2>
 8004c7a:	1b80      	subs	r0, r0, r6
 8004c7c:	6060      	str	r0, [r4, #4]
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	6123      	str	r3, [r4, #16]
 8004c82:	2300      	movs	r3, #0
 8004c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c88:	e7a8      	b.n	8004bdc <_printf_i+0x150>
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	4632      	mov	r2, r6
 8004c8e:	4649      	mov	r1, r9
 8004c90:	4640      	mov	r0, r8
 8004c92:	47d0      	blx	sl
 8004c94:	3001      	adds	r0, #1
 8004c96:	d0ab      	beq.n	8004bf0 <_printf_i+0x164>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	079b      	lsls	r3, r3, #30
 8004c9c:	d413      	bmi.n	8004cc6 <_printf_i+0x23a>
 8004c9e:	68e0      	ldr	r0, [r4, #12]
 8004ca0:	9b03      	ldr	r3, [sp, #12]
 8004ca2:	4298      	cmp	r0, r3
 8004ca4:	bfb8      	it	lt
 8004ca6:	4618      	movlt	r0, r3
 8004ca8:	e7a4      	b.n	8004bf4 <_printf_i+0x168>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4632      	mov	r2, r6
 8004cae:	4649      	mov	r1, r9
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	47d0      	blx	sl
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d09b      	beq.n	8004bf0 <_printf_i+0x164>
 8004cb8:	3501      	adds	r5, #1
 8004cba:	68e3      	ldr	r3, [r4, #12]
 8004cbc:	9903      	ldr	r1, [sp, #12]
 8004cbe:	1a5b      	subs	r3, r3, r1
 8004cc0:	42ab      	cmp	r3, r5
 8004cc2:	dcf2      	bgt.n	8004caa <_printf_i+0x21e>
 8004cc4:	e7eb      	b.n	8004c9e <_printf_i+0x212>
 8004cc6:	2500      	movs	r5, #0
 8004cc8:	f104 0619 	add.w	r6, r4, #25
 8004ccc:	e7f5      	b.n	8004cba <_printf_i+0x22e>
 8004cce:	bf00      	nop
 8004cd0:	08004ff1 	.word	0x08004ff1
 8004cd4:	08005002 	.word	0x08005002

08004cd8 <_sbrk_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d06      	ldr	r5, [pc, #24]	; (8004cf4 <_sbrk_r+0x1c>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fc fa98 	bl	8001218 <_sbrk>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_sbrk_r+0x1a>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_sbrk_r+0x1a>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	20000480 	.word	0x20000480

08004cf8 <__sread>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d00:	f000 f8a0 	bl	8004e44 <_read_r>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	bfab      	itete	ge
 8004d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d0c:	181b      	addge	r3, r3, r0
 8004d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d12:	bfac      	ite	ge
 8004d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d16:	81a3      	strhlt	r3, [r4, #12]
 8004d18:	bd10      	pop	{r4, pc}

08004d1a <__swrite>:
 8004d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1e:	461f      	mov	r7, r3
 8004d20:	898b      	ldrh	r3, [r1, #12]
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	4605      	mov	r5, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	4616      	mov	r6, r2
 8004d2a:	d505      	bpl.n	8004d38 <__swrite+0x1e>
 8004d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d30:	2302      	movs	r3, #2
 8004d32:	2200      	movs	r2, #0
 8004d34:	f000 f868 	bl	8004e08 <_lseek_r>
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d42:	81a3      	strh	r3, [r4, #12]
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	4628      	mov	r0, r5
 8004d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	f000 b817 	b.w	8004d80 <_write_r>

08004d52 <__sseek>:
 8004d52:	b510      	push	{r4, lr}
 8004d54:	460c      	mov	r4, r1
 8004d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5a:	f000 f855 	bl	8004e08 <_lseek_r>
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	bf15      	itete	ne
 8004d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d6e:	81a3      	strheq	r3, [r4, #12]
 8004d70:	bf18      	it	ne
 8004d72:	81a3      	strhne	r3, [r4, #12]
 8004d74:	bd10      	pop	{r4, pc}

08004d76 <__sclose>:
 8004d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7a:	f000 b813 	b.w	8004da4 <_close_r>
	...

08004d80 <_write_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d07      	ldr	r5, [pc, #28]	; (8004da0 <_write_r+0x20>)
 8004d84:	4604      	mov	r4, r0
 8004d86:	4608      	mov	r0, r1
 8004d88:	4611      	mov	r1, r2
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	602a      	str	r2, [r5, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f7fb fc0a 	bl	80005a8 <_write>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_write_r+0x1e>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_write_r+0x1e>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20000480 	.word	0x20000480

08004da4 <_close_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d06      	ldr	r5, [pc, #24]	; (8004dc0 <_close_r+0x1c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc f9fd 	bl	80011ae <_close>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_close_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_close_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	20000480 	.word	0x20000480

08004dc4 <_fstat_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <_fstat_r+0x20>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	f7fc f9f8 	bl	80011c6 <_fstat>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	d102      	bne.n	8004de0 <_fstat_r+0x1c>
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	b103      	cbz	r3, 8004de0 <_fstat_r+0x1c>
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
 8004de2:	bf00      	nop
 8004de4:	20000480 	.word	0x20000480

08004de8 <_isatty_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4d06      	ldr	r5, [pc, #24]	; (8004e04 <_isatty_r+0x1c>)
 8004dec:	2300      	movs	r3, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	f7fc f9f7 	bl	80011e6 <_isatty>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_isatty_r+0x1a>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_isatty_r+0x1a>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000480 	.word	0x20000480

08004e08 <_lseek_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	; (8004e28 <_lseek_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc f9f0 	bl	80011fc <_lseek>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_lseek_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_lseek_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000480 	.word	0x20000480

08004e2c <__malloc_lock>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__malloc_lock+0x8>)
 8004e2e:	f7ff bb55 	b.w	80044dc <__retarget_lock_acquire_recursive>
 8004e32:	bf00      	nop
 8004e34:	20000478 	.word	0x20000478

08004e38 <__malloc_unlock>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__malloc_unlock+0x8>)
 8004e3a:	f7ff bb50 	b.w	80044de <__retarget_lock_release_recursive>
 8004e3e:	bf00      	nop
 8004e40:	20000478 	.word	0x20000478

08004e44 <_read_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	; (8004e64 <_read_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fc f98e 	bl	8001174 <_read>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_read_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_read_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000480 	.word	0x20000480

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
